
sx1276_L152RE_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e00  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  08009f40  08009f40  00019f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a254  0800a254  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800a254  0800a254  0001a254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a25c  0800a25c  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a25c  0800a25c  0001a25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a260  0800a260  0001a260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800a264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001478  200000ac  0800a310  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001524  0800a310  00021524  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000256f4  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005595  00000000  00000000  000457c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  0004ad60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001870  00000000  00000000  0004c810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e279  00000000  00000000  0004e080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e731  00000000  00000000  0006c2f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7859  00000000  00000000  0008aa2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00132283  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075e0  00000000  00000000  001322d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000ac 	.word	0x200000ac
 800015c:	00000000 	.word	0x00000000
 8000160:	08009f28 	.word	0x08009f28

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000b0 	.word	0x200000b0
 800017c:	08009f28 	.word	0x08009f28

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b96e 	b.w	8000484 <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	460d      	mov	r5, r1
 80001c8:	4604      	mov	r4, r0
 80001ca:	468e      	mov	lr, r1
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	f040 8083 	bne.w	80002d8 <__udivmoddi4+0x118>
 80001d2:	428a      	cmp	r2, r1
 80001d4:	4617      	mov	r7, r2
 80001d6:	d947      	bls.n	8000268 <__udivmoddi4+0xa8>
 80001d8:	fab2 f382 	clz	r3, r2
 80001dc:	b14b      	cbz	r3, 80001f2 <__udivmoddi4+0x32>
 80001de:	f1c3 0120 	rsb	r1, r3, #32
 80001e2:	fa05 fe03 	lsl.w	lr, r5, r3
 80001e6:	fa20 f101 	lsr.w	r1, r0, r1
 80001ea:	409f      	lsls	r7, r3
 80001ec:	ea41 0e0e 	orr.w	lr, r1, lr
 80001f0:	409c      	lsls	r4, r3
 80001f2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001f6:	fbbe fcf8 	udiv	ip, lr, r8
 80001fa:	fa1f f987 	uxth.w	r9, r7
 80001fe:	fb08 e21c 	mls	r2, r8, ip, lr
 8000202:	fb0c f009 	mul.w	r0, ip, r9
 8000206:	0c21      	lsrs	r1, r4, #16
 8000208:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800020c:	4290      	cmp	r0, r2
 800020e:	d90a      	bls.n	8000226 <__udivmoddi4+0x66>
 8000210:	18ba      	adds	r2, r7, r2
 8000212:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000216:	f080 8118 	bcs.w	800044a <__udivmoddi4+0x28a>
 800021a:	4290      	cmp	r0, r2
 800021c:	f240 8115 	bls.w	800044a <__udivmoddi4+0x28a>
 8000220:	f1ac 0c02 	sub.w	ip, ip, #2
 8000224:	443a      	add	r2, r7
 8000226:	1a12      	subs	r2, r2, r0
 8000228:	fbb2 f0f8 	udiv	r0, r2, r8
 800022c:	fb08 2210 	mls	r2, r8, r0, r2
 8000230:	fb00 f109 	mul.w	r1, r0, r9
 8000234:	b2a4      	uxth	r4, r4
 8000236:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800023a:	42a1      	cmp	r1, r4
 800023c:	d909      	bls.n	8000252 <__udivmoddi4+0x92>
 800023e:	193c      	adds	r4, r7, r4
 8000240:	f100 32ff 	add.w	r2, r0, #4294967295
 8000244:	f080 8103 	bcs.w	800044e <__udivmoddi4+0x28e>
 8000248:	42a1      	cmp	r1, r4
 800024a:	f240 8100 	bls.w	800044e <__udivmoddi4+0x28e>
 800024e:	3802      	subs	r0, #2
 8000250:	443c      	add	r4, r7
 8000252:	1a64      	subs	r4, r4, r1
 8000254:	2100      	movs	r1, #0
 8000256:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa4>
 800025c:	2200      	movs	r2, #0
 800025e:	40dc      	lsrs	r4, r3
 8000260:	e9c6 4200 	strd	r4, r2, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	b902      	cbnz	r2, 800026c <__udivmoddi4+0xac>
 800026a:	deff      	udf	#255	; 0xff
 800026c:	fab2 f382 	clz	r3, r2
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14f      	bne.n	8000314 <__udivmoddi4+0x154>
 8000274:	1a8d      	subs	r5, r1, r2
 8000276:	2101      	movs	r1, #1
 8000278:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800027c:	fa1f f882 	uxth.w	r8, r2
 8000280:	fbb5 fcfe 	udiv	ip, r5, lr
 8000284:	fb0e 551c 	mls	r5, lr, ip, r5
 8000288:	fb08 f00c 	mul.w	r0, r8, ip
 800028c:	0c22      	lsrs	r2, r4, #16
 800028e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000292:	42a8      	cmp	r0, r5
 8000294:	d907      	bls.n	80002a6 <__udivmoddi4+0xe6>
 8000296:	197d      	adds	r5, r7, r5
 8000298:	f10c 32ff 	add.w	r2, ip, #4294967295
 800029c:	d202      	bcs.n	80002a4 <__udivmoddi4+0xe4>
 800029e:	42a8      	cmp	r0, r5
 80002a0:	f200 80e9 	bhi.w	8000476 <__udivmoddi4+0x2b6>
 80002a4:	4694      	mov	ip, r2
 80002a6:	1a2d      	subs	r5, r5, r0
 80002a8:	fbb5 f0fe 	udiv	r0, r5, lr
 80002ac:	fb0e 5510 	mls	r5, lr, r0, r5
 80002b0:	fb08 f800 	mul.w	r8, r8, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ba:	45a0      	cmp	r8, r4
 80002bc:	d907      	bls.n	80002ce <__udivmoddi4+0x10e>
 80002be:	193c      	adds	r4, r7, r4
 80002c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c4:	d202      	bcs.n	80002cc <__udivmoddi4+0x10c>
 80002c6:	45a0      	cmp	r8, r4
 80002c8:	f200 80d9 	bhi.w	800047e <__udivmoddi4+0x2be>
 80002cc:	4610      	mov	r0, r2
 80002ce:	eba4 0408 	sub.w	r4, r4, r8
 80002d2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002d6:	e7c0      	b.n	800025a <__udivmoddi4+0x9a>
 80002d8:	428b      	cmp	r3, r1
 80002da:	d908      	bls.n	80002ee <__udivmoddi4+0x12e>
 80002dc:	2e00      	cmp	r6, #0
 80002de:	f000 80b1 	beq.w	8000444 <__udivmoddi4+0x284>
 80002e2:	2100      	movs	r1, #0
 80002e4:	e9c6 0500 	strd	r0, r5, [r6]
 80002e8:	4608      	mov	r0, r1
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d14b      	bne.n	800038e <__udivmoddi4+0x1ce>
 80002f6:	42ab      	cmp	r3, r5
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0x140>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80b9 	bhi.w	8000472 <__udivmoddi4+0x2b2>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb65 0303 	sbc.w	r3, r5, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d0aa      	beq.n	8000264 <__udivmoddi4+0xa4>
 800030e:	e9c6 4e00 	strd	r4, lr, [r6]
 8000312:	e7a7      	b.n	8000264 <__udivmoddi4+0xa4>
 8000314:	409f      	lsls	r7, r3
 8000316:	f1c3 0220 	rsb	r2, r3, #32
 800031a:	40d1      	lsrs	r1, r2
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fa1f f887 	uxth.w	r8, r7
 8000328:	fb0e 1110 	mls	r1, lr, r0, r1
 800032c:	fa24 f202 	lsr.w	r2, r4, r2
 8000330:	409d      	lsls	r5, r3
 8000332:	fb00 fc08 	mul.w	ip, r0, r8
 8000336:	432a      	orrs	r2, r5
 8000338:	0c15      	lsrs	r5, r2, #16
 800033a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800033e:	45ac      	cmp	ip, r5
 8000340:	fa04 f403 	lsl.w	r4, r4, r3
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x19a>
 8000346:	197d      	adds	r5, r7, r5
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	f080 808f 	bcs.w	800046e <__udivmoddi4+0x2ae>
 8000350:	45ac      	cmp	ip, r5
 8000352:	f240 808c 	bls.w	800046e <__udivmoddi4+0x2ae>
 8000356:	3802      	subs	r0, #2
 8000358:	443d      	add	r5, r7
 800035a:	eba5 050c 	sub.w	r5, r5, ip
 800035e:	fbb5 f1fe 	udiv	r1, r5, lr
 8000362:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000366:	fb01 f908 	mul.w	r9, r1, r8
 800036a:	b295      	uxth	r5, r2
 800036c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000370:	45a9      	cmp	r9, r5
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x1c4>
 8000374:	197d      	adds	r5, r7, r5
 8000376:	f101 32ff 	add.w	r2, r1, #4294967295
 800037a:	d274      	bcs.n	8000466 <__udivmoddi4+0x2a6>
 800037c:	45a9      	cmp	r9, r5
 800037e:	d972      	bls.n	8000466 <__udivmoddi4+0x2a6>
 8000380:	3902      	subs	r1, #2
 8000382:	443d      	add	r5, r7
 8000384:	eba5 0509 	sub.w	r5, r5, r9
 8000388:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800038c:	e778      	b.n	8000280 <__udivmoddi4+0xc0>
 800038e:	f1c1 0720 	rsb	r7, r1, #32
 8000392:	408b      	lsls	r3, r1
 8000394:	fa22 fc07 	lsr.w	ip, r2, r7
 8000398:	ea4c 0c03 	orr.w	ip, ip, r3
 800039c:	fa25 f407 	lsr.w	r4, r5, r7
 80003a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a4:	fbb4 f9fe 	udiv	r9, r4, lr
 80003a8:	fa1f f88c 	uxth.w	r8, ip
 80003ac:	fb0e 4419 	mls	r4, lr, r9, r4
 80003b0:	fa20 f307 	lsr.w	r3, r0, r7
 80003b4:	fb09 fa08 	mul.w	sl, r9, r8
 80003b8:	408d      	lsls	r5, r1
 80003ba:	431d      	orrs	r5, r3
 80003bc:	0c2b      	lsrs	r3, r5, #16
 80003be:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003c2:	45a2      	cmp	sl, r4
 80003c4:	fa02 f201 	lsl.w	r2, r2, r1
 80003c8:	fa00 f301 	lsl.w	r3, r0, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0x222>
 80003ce:	eb1c 0404 	adds.w	r4, ip, r4
 80003d2:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d6:	d248      	bcs.n	800046a <__udivmoddi4+0x2aa>
 80003d8:	45a2      	cmp	sl, r4
 80003da:	d946      	bls.n	800046a <__udivmoddi4+0x2aa>
 80003dc:	f1a9 0902 	sub.w	r9, r9, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	fbb4 f0fe 	udiv	r0, r4, lr
 80003ea:	fb0e 4410 	mls	r4, lr, r0, r4
 80003ee:	fb00 fa08 	mul.w	sl, r0, r8
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x24e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 35ff 	add.w	r5, r0, #4294967295
 8000404:	d22d      	bcs.n	8000462 <__udivmoddi4+0x2a2>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d92b      	bls.n	8000462 <__udivmoddi4+0x2a2>
 800040a:	3802      	subs	r0, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c6      	mov	lr, r8
 800041e:	464d      	mov	r5, r9
 8000420:	d319      	bcc.n	8000456 <__udivmoddi4+0x296>
 8000422:	d016      	beq.n	8000452 <__udivmoddi4+0x292>
 8000424:	b15e      	cbz	r6, 800043e <__udivmoddi4+0x27e>
 8000426:	ebb3 020e 	subs.w	r2, r3, lr
 800042a:	eb64 0405 	sbc.w	r4, r4, r5
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431f      	orrs	r7, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c6 7400 	strd	r7, r4, [r6]
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	4631      	mov	r1, r6
 8000446:	4630      	mov	r0, r6
 8000448:	e70c      	b.n	8000264 <__udivmoddi4+0xa4>
 800044a:	468c      	mov	ip, r1
 800044c:	e6eb      	b.n	8000226 <__udivmoddi4+0x66>
 800044e:	4610      	mov	r0, r2
 8000450:	e6ff      	b.n	8000252 <__udivmoddi4+0x92>
 8000452:	4543      	cmp	r3, r8
 8000454:	d2e6      	bcs.n	8000424 <__udivmoddi4+0x264>
 8000456:	ebb8 0e02 	subs.w	lr, r8, r2
 800045a:	eb69 050c 	sbc.w	r5, r9, ip
 800045e:	3801      	subs	r0, #1
 8000460:	e7e0      	b.n	8000424 <__udivmoddi4+0x264>
 8000462:	4628      	mov	r0, r5
 8000464:	e7d3      	b.n	800040e <__udivmoddi4+0x24e>
 8000466:	4611      	mov	r1, r2
 8000468:	e78c      	b.n	8000384 <__udivmoddi4+0x1c4>
 800046a:	4681      	mov	r9, r0
 800046c:	e7b9      	b.n	80003e2 <__udivmoddi4+0x222>
 800046e:	4608      	mov	r0, r1
 8000470:	e773      	b.n	800035a <__udivmoddi4+0x19a>
 8000472:	4608      	mov	r0, r1
 8000474:	e749      	b.n	800030a <__udivmoddi4+0x14a>
 8000476:	f1ac 0c02 	sub.w	ip, ip, #2
 800047a:	443d      	add	r5, r7
 800047c:	e713      	b.n	80002a6 <__udivmoddi4+0xe6>
 800047e:	3802      	subs	r0, #2
 8000480:	443c      	add	r4, r7
 8000482:	e724      	b.n	80002ce <__udivmoddi4+0x10e>

08000484 <__aeabi_idiv0>:
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop

08000488 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	4a06      	ldr	r2, [pc, #24]	; (80004b0 <vApplicationGetIdleTaskMemory+0x28>)
 8000498:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	4a05      	ldr	r2, [pc, #20]	; (80004b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800049e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2280      	movs	r2, #128	; 0x80
 80004a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	200000c8 	.word	0x200000c8
 80004b4:	2000011c 	.word	0x2000011c

080004b8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b096      	sub	sp, #88	; 0x58
 80004bc:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	xQueueUartData = xQueueCreate( 10, sizeof(uint8_t*) );
 80004be:	2200      	movs	r2, #0
 80004c0:	2104      	movs	r1, #4
 80004c2:	200a      	movs	r0, #10
 80004c4:	f003 fd88 	bl	8003fd8 <xQueueGenericCreate>
 80004c8:	4603      	mov	r3, r0
 80004ca:	4a21      	ldr	r2, [pc, #132]	; (8000550 <MX_FREERTOS_Init+0x98>)
 80004cc:	6013      	str	r3, [r2, #0]
	if (xQueueUartData == NULL) {
 80004ce:	4b20      	ldr	r3, [pc, #128]	; (8000550 <MX_FREERTOS_Init+0x98>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d037      	beq.n	8000546 <MX_FREERTOS_Init+0x8e>
	}
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80004d6:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <MX_FREERTOS_Init+0x9c>)
 80004d8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80004dc:	461d      	mov	r5, r3
 80004de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80004ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004ee:	2100      	movs	r1, #0
 80004f0:	4618      	mov	r0, r3
 80004f2:	f003 fbf9 	bl	8003ce8 <osThreadCreate>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a17      	ldr	r2, [pc, #92]	; (8000558 <MX_FREERTOS_Init+0xa0>)
 80004fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of vRadioChData */
  osThreadDef(vRadioChData, StartRadioChData, osPriorityNormal, 0, 128);
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_FREERTOS_Init+0xa4>)
 80004fe:	f107 0420 	add.w	r4, r7, #32
 8000502:	461d      	mov	r5, r3
 8000504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000508:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800050c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  vRadioChDataHandle = osThreadCreate(osThread(vRadioChData), NULL);
 8000510:	f107 0320 	add.w	r3, r7, #32
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f003 fbe6 	bl	8003ce8 <osThreadCreate>
 800051c:	4603      	mov	r3, r0
 800051e:	4a10      	ldr	r2, [pc, #64]	; (8000560 <MX_FREERTOS_Init+0xa8>)
 8000520:	6013      	str	r3, [r2, #0]

  /* definition and creation of vUartData */
  osThreadDef(vUartData, StartUartData, osPriorityNormal, 0, 128);
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <MX_FREERTOS_Init+0xac>)
 8000524:	1d3c      	adds	r4, r7, #4
 8000526:	461d      	mov	r5, r3
 8000528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000530:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  vUartDataHandle = osThreadCreate(osThread(vUartData), NULL);
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f003 fbd5 	bl	8003ce8 <osThreadCreate>
 800053e:	4603      	mov	r3, r0
 8000540:	4a09      	ldr	r2, [pc, #36]	; (8000568 <MX_FREERTOS_Init+0xb0>)
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	e000      	b.n	8000548 <MX_FREERTOS_Init+0x90>
		return;
 8000546:	bf00      	nop

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000548:	3758      	adds	r7, #88	; 0x58
 800054a:	46bd      	mov	sp, r7
 800054c:	bdb0      	pop	{r4, r5, r7, pc}
 800054e:	bf00      	nop
 8000550:	2000128c 	.word	0x2000128c
 8000554:	08009f68 	.word	0x08009f68
 8000558:	20001280 	.word	0x20001280
 800055c:	08009f84 	.word	0x08009f84
 8000560:	20001284 	.word	0x20001284
 8000564:	08009fa0 	.word	0x08009fa0
 8000568:	20001288 	.word	0x20001288

0800056c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000574:	2001      	movs	r0, #1
 8000576:	f003 fc03 	bl	8003d80 <osDelay>
 800057a:	e7fb      	b.n	8000574 <StartDefaultTask+0x8>

0800057c <StartRadioChData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRadioChData */
void StartRadioChData(void const * argument)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRadioChData */
  /* Infinite loop */
  Radio.Rx( RX_TIMEOUT_VALUE );
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <StartRadioChData+0x20>)
 8000586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800058c:	4798      	blx	r3
  for(;;)
  {
	  Radio_Rx();
 800058e:	f007 fc11 	bl	8007db4 <Radio_Rx>
	  osDelay(1);
 8000592:	2001      	movs	r0, #1
 8000594:	f003 fbf4 	bl	8003d80 <osDelay>
	  Radio_Rx();
 8000598:	e7f9      	b.n	800058e <StartRadioChData+0x12>
 800059a:	bf00      	nop
 800059c:	0800a150 	.word	0x0800a150

080005a0 <StartUartData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartData */
void StartUartData(void const * argument)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUartData */
  /* Infinite loop */
  for(;;)
  {
	  UART_Tx( );
 80005a8:	f007 fba2 	bl	8007cf0 <UART_Tx>
	  osDelay(1);
 80005ac:	2001      	movs	r0, #1
 80005ae:	f003 fbe7 	bl	8003d80 <osDelay>
	  UART_Tx( );
 80005b2:	e7f9      	b.n	80005a8 <StartUartData+0x8>

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	4b42      	ldr	r3, [pc, #264]	; (80006d4 <MX_GPIO_Init+0x120>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a41      	ldr	r2, [pc, #260]	; (80006d4 <MX_GPIO_Init+0x120>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <MX_GPIO_Init+0x120>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	4b3c      	ldr	r3, [pc, #240]	; (80006d4 <MX_GPIO_Init+0x120>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a3b      	ldr	r2, [pc, #236]	; (80006d4 <MX_GPIO_Init+0x120>)
 80005e8:	f043 0320 	orr.w	r3, r3, #32
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b39      	ldr	r3, [pc, #228]	; (80006d4 <MX_GPIO_Init+0x120>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 0320 	and.w	r3, r3, #32
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b36      	ldr	r3, [pc, #216]	; (80006d4 <MX_GPIO_Init+0x120>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a35      	ldr	r2, [pc, #212]	; (80006d4 <MX_GPIO_Init+0x120>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <MX_GPIO_Init+0x120>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <MX_GPIO_Init+0x120>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a2f      	ldr	r2, [pc, #188]	; (80006d4 <MX_GPIO_Init+0x120>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b2d      	ldr	r3, [pc, #180]	; (80006d4 <MX_GPIO_Init+0x120>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SX1276_RST_Pin|LED_EXT_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2109      	movs	r1, #9
 800062e:	482a      	ldr	r0, [pc, #168]	; (80006d8 <MX_GPIO_Init+0x124>)
 8000630:	f000 ffef 	bl	8001612 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2110      	movs	r1, #16
 8000638:	4828      	ldr	r0, [pc, #160]	; (80006dc <MX_GPIO_Init+0x128>)
 800063a:	f000 ffea 	bl	8001612 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = B1_Pin|DIO_4_Pin|DIO_5_Pin|DIO_3_Pin
 800063e:	f242 3360 	movw	r3, #9056	; 0x2360
 8000642:	617b      	str	r3, [r7, #20]
                          |DIO_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <MX_GPIO_Init+0x12c>)
 8000646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	4821      	ldr	r0, [pc, #132]	; (80006d8 <MX_GPIO_Init+0x124>)
 8000654:	f000 fe36 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SX1276_RST_Pin|LED_EXT_Pin;
 8000658:	2309      	movs	r3, #9
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	481a      	ldr	r0, [pc, #104]	; (80006d8 <MX_GPIO_Init+0x124>)
 8000670:	f000 fe28 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8000674:	2310      	movs	r3, #16
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4814      	ldr	r0, [pc, #80]	; (80006dc <MX_GPIO_Init+0x128>)
 800068c:	f000 fe1a 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIO_1_Pin|DIO_0_Pin;
 8000690:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_GPIO_Init+0x12c>)
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <MX_GPIO_Init+0x128>)
 80006a6:	f000 fe0d 	bl	80012c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2105      	movs	r1, #5
 80006ae:	2017      	movs	r0, #23
 80006b0:	f000 fd9d 	bl	80011ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006b4:	2017      	movs	r0, #23
 80006b6:	f000 fdb6 	bl	8001226 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2105      	movs	r1, #5
 80006be:	2028      	movs	r0, #40	; 0x28
 80006c0:	f000 fd95 	bl	80011ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006c4:	2028      	movs	r0, #40	; 0x28
 80006c6:	f000 fdae 	bl	8001226 <HAL_NVIC_EnableIRQ>

}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	; 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020800 	.word	0x40020800
 80006dc:	40020000 	.word	0x40020000
 80006e0:	10110000 	.word	0x10110000

080006e4 <GpioWrite>:

/* USER CODE BEGIN 2 */
void GpioWrite( Gpio_t *obj, uint32_t value ) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(obj->port, obj->pin, (GPIO_PinState) value);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6818      	ldr	r0, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	889b      	ldrh	r3, [r3, #4]
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	4619      	mov	r1, r3
 80006fc:	f000 ff89 	bl	8001612 <HAL_GPIO_WritePin>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <GpioRead>:

uint32_t GpioRead( Gpio_t *obj ) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin( obj->port, obj->pin);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	889b      	ldrh	r3, [r3, #4]
 8000718:	4619      	mov	r1, r3
 800071a:	4610      	mov	r0, r2
 800071c:	f000 ff62 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000720:	4603      	mov	r3, r0
}
 8000722:	4618      	mov	r0, r3
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fc26 	bl	8000f82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f823 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073a:	f7ff ff3b 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800073e:	f000 fb85 	bl	8000e4c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000742:	f000 f897 	bl	8000874 <MX_RTC_Init>
  MX_SPI1_Init();
 8000746:	f000 f93d 	bl	80009c4 <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */
  struct InputParametrsRX_s iparam;
  struct BER_RX_s berParam;
  berParam.len = BARKER_11;
 800074a:	230b      	movs	r3, #11
 800074c:	723b      	strb	r3, [r7, #8]
  struct PER_RX_s perParam = { 620 , 20 };
 800074e:	4a0b      	ldr	r2, [pc, #44]	; (800077c <main+0x50>)
 8000750:	463b      	mov	r3, r7
 8000752:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000756:	e883 0003 	stmia.w	r3, {r0, r1}
  iparam.pBER = &berParam;
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	60fb      	str	r3, [r7, #12]
  iparam.pPER = &perParam;
 8000760:	463b      	mov	r3, r7
 8000762:	613b      	str	r3, [r7, #16]
  iparam.mode = BER;
 8000764:	2300      	movs	r3, #0
 8000766:	753b      	strb	r3, [r7, #20]
  Measurements( &iparam );
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	4618      	mov	r0, r3
 800076e:	f007 fb3d 	bl	8007dec <Measurements>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000772:	f7ff fea1 	bl	80004b8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000776:	f003 fab0 	bl	8003cda <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800077a:	e7fe      	b.n	800077a <main+0x4e>
 800077c:	08009fbc 	.word	0x08009fbc

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b096      	sub	sp, #88	; 0x58
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	2234      	movs	r2, #52	; 0x34
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f008 fa9e 	bl	8008cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ae:	4b25      	ldr	r3, [pc, #148]	; (8000844 <SystemClock_Config+0xc4>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80007b6:	4a23      	ldr	r2, [pc, #140]	; (8000844 <SystemClock_Config+0xc4>)
 80007b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007bc:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80007be:	2306      	movs	r3, #6
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007c2:	2301      	movs	r3, #1
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c6:	2301      	movs	r3, #1
 80007c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ca:	2310      	movs	r3, #16
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d2:	2300      	movs	r3, #0
 80007d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80007d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80007dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80007e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 ff5c 	bl	80016a4 <HAL_RCC_OscConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80007f2:	f000 f838 	bl	8000866 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f6:	230f      	movs	r3, #15
 80007f8:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fa:	2303      	movs	r3, #3
 80007fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	2101      	movs	r1, #1
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fa77 	bl	8001d04 <HAL_RCC_ClockConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800081c:	f000 f823 	bl	8000866 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000820:	2301      	movs	r3, #1
 8000822:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000828:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	4618      	mov	r0, r3
 800082e:	f001 fd2d 	bl	800228c <HAL_RCCEx_PeriphCLKConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000838:	f000 f815 	bl	8000866 <Error_Handler>
  }
}
 800083c:	bf00      	nop
 800083e:	3758      	adds	r7, #88	; 0x58
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40007000 	.word	0x40007000

08000848 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000858:	d101      	bne.n	800085e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800085a:	f000 fbab 	bl	8000fb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
	...

08000874 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b090      	sub	sp, #64	; 0x40
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800087a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2228      	movs	r2, #40	; 0x28
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f008 fa1b 	bl	8008cd0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800089a:	4b3a      	ldr	r3, [pc, #232]	; (8000984 <MX_RTC_Init+0x110>)
 800089c:	4a3a      	ldr	r2, [pc, #232]	; (8000988 <MX_RTC_Init+0x114>)
 800089e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008a0:	4b38      	ldr	r3, [pc, #224]	; (8000984 <MX_RTC_Init+0x110>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008a6:	4b37      	ldr	r3, [pc, #220]	; (8000984 <MX_RTC_Init+0x110>)
 80008a8:	227f      	movs	r2, #127	; 0x7f
 80008aa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008ac:	4b35      	ldr	r3, [pc, #212]	; (8000984 <MX_RTC_Init+0x110>)
 80008ae:	22ff      	movs	r2, #255	; 0xff
 80008b0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008b2:	4b34      	ldr	r3, [pc, #208]	; (8000984 <MX_RTC_Init+0x110>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008b8:	4b32      	ldr	r3, [pc, #200]	; (8000984 <MX_RTC_Init+0x110>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008be:	4b31      	ldr	r3, [pc, #196]	; (8000984 <MX_RTC_Init+0x110>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008c4:	482f      	ldr	r0, [pc, #188]	; (8000984 <MX_RTC_Init+0x110>)
 80008c6:	f001 fdc3 	bl	8002450 <HAL_RTC_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80008d0:	f7ff ffc9 	bl	8000866 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80008da:	2300      	movs	r3, #0
 80008dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f2:	2201      	movs	r2, #1
 80008f4:	4619      	mov	r1, r3
 80008f6:	4823      	ldr	r0, [pc, #140]	; (8000984 <MX_RTC_Init+0x110>)
 80008f8:	f001 fe25 	bl	8002546 <HAL_RTC_SetTime>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000902:	f7ff ffb0 	bl	8000866 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000906:	2301      	movs	r3, #1
 8000908:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800090c:	2301      	movs	r3, #1
 800090e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000912:	2301      	movs	r3, #1
 8000914:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000918:	2300      	movs	r3, #0
 800091a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800091e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000922:	2201      	movs	r2, #1
 8000924:	4619      	mov	r1, r3
 8000926:	4817      	ldr	r0, [pc, #92]	; (8000984 <MX_RTC_Init+0x110>)
 8000928:	f001 ff1e 	bl	8002768 <HAL_RTC_SetDate>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000932:	f7ff ff98 	bl	8000866 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000936:	2300      	movs	r3, #0
 8000938:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800093a:	2300      	movs	r3, #0
 800093c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800093e:	2300      	movs	r3, #0
 8000940:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800095a:	2301      	movs	r3, #1
 800095c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000966:	463b      	mov	r3, r7
 8000968:	2201      	movs	r2, #1
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_RTC_Init+0x110>)
 800096e:	f001 ffe7 	bl	8002940 <HAL_RTC_SetAlarm_IT>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000978:	f7ff ff75 	bl	8000866 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	3740      	adds	r7, #64	; 0x40
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20001290 	.word	0x20001290
 8000988:	40002800 	.word	0x40002800

0800098c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a08      	ldr	r2, [pc, #32]	; (80009bc <HAL_RTC_MspInit+0x30>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d10a      	bne.n	80009b4 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_RTC_MspInit+0x34>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2105      	movs	r1, #5
 80009a8:	2029      	movs	r0, #41	; 0x29
 80009aa:	f000 fc20 	bl	80011ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80009ae:	2029      	movs	r0, #41	; 0x29
 80009b0:	f000 fc39 	bl	8001226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40002800 	.word	0x40002800
 80009c0:	424706d8 	.word	0x424706d8

080009c4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009ca:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <MX_SPI1_Init+0x68>)
 80009cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009f8:	2218      	movs	r2, #24
 80009fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_SPI1_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <MX_SPI1_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_SPI1_Init+0x64>)
 8000a10:	220a      	movs	r2, #10
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_SPI1_Init+0x64>)
 8000a16:	f002 fa67 	bl	8002ee8 <HAL_SPI_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a20:	f7ff ff21 	bl	8000866 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200012b0 	.word	0x200012b0
 8000a2c:	40013000 	.word	0x40013000

08000a30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a17      	ldr	r2, [pc, #92]	; (8000aac <HAL_SPI_MspInit+0x7c>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d127      	bne.n	8000aa2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <HAL_SPI_MspInit+0x80>)
 8000a54:	6a1b      	ldr	r3, [r3, #32]
 8000a56:	4a16      	ldr	r2, [pc, #88]	; (8000ab0 <HAL_SPI_MspInit+0x80>)
 8000a58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a5c:	6213      	str	r3, [r2, #32]
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <HAL_SPI_MspInit+0x80>)
 8000a60:	6a1b      	ldr	r3, [r3, #32]
 8000a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_SPI_MspInit+0x80>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <HAL_SPI_MspInit+0x80>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	61d3      	str	r3, [r2, #28]
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_SPI_MspInit+0x80>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a82:	23e0      	movs	r3, #224	; 0xe0
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a92:	2305      	movs	r3, #5
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <HAL_SPI_MspInit+0x84>)
 8000a9e:	f000 fc11 	bl	80012c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3728      	adds	r7, #40	; 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40013000 	.word	0x40013000
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <SpiInOut>:
}

/* USER CODE BEGIN 1 */

uint16_t SpiInOut( Spi_t *obj, uint16_t outData )
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	807b      	strh	r3, [r7, #2]
    uint8_t rxData = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]

    if( ( obj == NULL ) || ( hspi1.Instance ) == NULL )
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b00      	cmp	r3, #0
    {
        assert_param( LMN_STATUS_ERROR );
    }

    __HAL_SPI_ENABLE( &hspi1 );
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <SpiInOut+0x78>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <SpiInOut+0x78>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ada:	601a      	str	r2, [r3, #0]

    CRITICAL_SECTION_BEGIN( );
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f006 fef1 	bl	80078c8 <BoardCriticalSectionBegin>

    while( __HAL_SPI_GET_FLAG( &hspi1, SPI_FLAG_TXE ) == RESET );
 8000ae6:	bf00      	nop
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <SpiInOut+0x78>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d1f8      	bne.n	8000ae8 <SpiInOut+0x30>
    hspi1.Instance->DR = ( uint16_t ) ( outData & 0xFF );
 8000af6:	887a      	ldrh	r2, [r7, #2]
 8000af8:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <SpiInOut+0x78>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	60da      	str	r2, [r3, #12]

    while( __HAL_SPI_GET_FLAG( &hspi1, SPI_FLAG_RXNE ) == RESET );
 8000b00:	bf00      	nop
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <SpiInOut+0x78>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d1f8      	bne.n	8000b02 <SpiInOut+0x4a>
    rxData = ( uint16_t ) hspi1.Instance->DR;
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <SpiInOut+0x78>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	73fb      	strb	r3, [r7, #15]

    CRITICAL_SECTION_END( );
 8000b18:	f107 0308 	add.w	r3, r7, #8
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f006 fee4 	bl	80078ea <BoardCriticalSectionEnd>

    return( rxData );
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	b29b      	uxth	r3, r3
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200012b0 	.word	0x200012b0

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <HAL_MspInit+0x64>)
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	4a16      	ldr	r2, [pc, #88]	; (8000b98 <HAL_MspInit+0x64>)
 8000b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b44:	6253      	str	r3, [r2, #36]	; 0x24
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_MspInit+0x64>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_MspInit+0x64>)
 8000b54:	6a1b      	ldr	r3, [r3, #32]
 8000b56:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <HAL_MspInit+0x64>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6213      	str	r3, [r2, #32]
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_MspInit+0x64>)
 8000b60:	6a1b      	ldr	r3, [r3, #32]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_MspInit+0x64>)
 8000b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_MspInit+0x64>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6253      	str	r3, [r2, #36]	; 0x24
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_MspInit+0x64>)
 8000b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	210f      	movs	r1, #15
 8000b86:	f06f 0001 	mvn.w	r0, #1
 8000b8a:	f000 fb30 	bl	80011ee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800

08000b9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08c      	sub	sp, #48	; 0x30
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	201c      	movs	r0, #28
 8000bb2:	f000 fb1c 	bl	80011ee <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bb6:	201c      	movs	r0, #28
 8000bb8:	f000 fb35 	bl	8001226 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <HAL_InitTick+0xa0>)
 8000bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <HAL_InitTick+0xa0>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6253      	str	r3, [r2, #36]	; 0x24
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <HAL_InitTick+0xa0>)
 8000bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bd4:	f107 0210 	add.w	r2, r7, #16
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 fac4 	bl	800216c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000be4:	f001 fa9a 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 8000be8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bec:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <HAL_InitTick+0xa4>)
 8000bee:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf2:	0c9b      	lsrs	r3, r3, #18
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_InitTick+0xa8>)
 8000bfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bfe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000c00:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <HAL_InitTick+0xa8>)
 8000c02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c06:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000c08:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <HAL_InitTick+0xa8>)
 8000c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <HAL_InitTick+0xa8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <HAL_InitTick+0xa8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000c1a:	480a      	ldr	r0, [pc, #40]	; (8000c44 <HAL_InitTick+0xa8>)
 8000c1c:	f002 f9ed 	bl	8002ffa <HAL_TIM_Base_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d104      	bne.n	8000c30 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000c26:	4807      	ldr	r0, [pc, #28]	; (8000c44 <HAL_InitTick+0xa8>)
 8000c28:	f002 fa30 	bl	800308c <HAL_TIM_Base_Start_IT>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	e000      	b.n	8000c32 <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3730      	adds	r7, #48	; 0x30
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	431bde83 	.word	0x431bde83
 8000c44:	20001308 	.word	0x20001308

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr

08000c72 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c76:	2020      	movs	r0, #32
 8000c78:	f000 fcfc 	bl	8001674 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000c7c:	2040      	movs	r0, #64	; 0x40
 8000c7e:	f000 fcf9 	bl	8001674 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000c82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c86:	f000 fcf5 	bl	8001674 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000c8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c8e:	f000 fcf1 	bl	8001674 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <TIM2_IRQHandler+0x10>)
 8000c9e:	f002 fa47 	bl	8003130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20001308 	.word	0x20001308

08000cac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <USART2_IRQHandler+0x10>)
 8000cb2:	f002 fc93 	bl	80035dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20001348 	.word	0x20001348

08000cc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000cc4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000cc8:	f000 fcd4 	bl	8001674 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000ccc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000cd0:	f000 fcd0 	bl	8001674 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cd4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cd8:	f000 fccc 	bl	8001674 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&RtcHandle);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <RTC_Alarm_IRQHandler+0x10>)
 8000ce6:	f001 ffef 	bl	8002cc8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
#endif
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20001234 	.word	0x20001234

08000cf4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	e00a      	b.n	8000d1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d06:	f3af 8000 	nop.w
 8000d0a:	4601      	mov	r1, r0
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	60ba      	str	r2, [r7, #8]
 8000d12:	b2ca      	uxtb	r2, r1
 8000d14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	dbf0      	blt.n	8000d06 <_read+0x12>
	}

return len;
 8000d24:	687b      	ldr	r3, [r7, #4]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	e009      	b.n	8000d54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	60ba      	str	r2, [r7, #8]
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	dbf1      	blt.n	8000d40 <_write+0x12>
	}
	return len;
 8000d5c:	687b      	ldr	r3, [r7, #4]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <_close>:

int _close(int file)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d8c:	605a      	str	r2, [r3, #4]
	return 0;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr

08000d9a <_isatty>:

int _isatty(int file)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
	return 1;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr

08000dae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b085      	sub	sp, #20
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
	return 0;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
	...

08000dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd0:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <_sbrk+0x5c>)
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <_sbrk+0x60>)
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <_sbrk+0x64>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <_sbrk+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d207      	bcs.n	8000e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df8:	f007 ff32 	bl	8008c60 <__errno>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	220c      	movs	r2, #12
 8000e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e009      	b.n	8000e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <_sbrk+0x64>)
 8000e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20014000 	.word	0x20014000
 8000e28:	00000400 	.word	0x00000400
 8000e2c:	2000031c 	.word	0x2000031c
 8000e30:	20001528 	.word	0x20001528

08000e34 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <SystemInit+0x14>)
 8000e3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <MX_USART2_UART_Init+0x50>)
 8000e54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e58:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000e5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e84:	f002 fac4 	bl	8003410 <HAL_UART_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e8e:	f7ff fcea 	bl	8000866 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20001348 	.word	0x20001348
 8000e9c:	40004400 	.word	0x40004400

08000ea0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	; (8000f2c <HAL_UART_MspInit+0x8c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d12f      	bne.n	8000f22 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <HAL_UART_MspInit+0x90>)
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	4a1a      	ldr	r2, [pc, #104]	; (8000f30 <HAL_UART_MspInit+0x90>)
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ecc:	6253      	str	r3, [r2, #36]	; 0x24
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_UART_MspInit+0x90>)
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_UART_MspInit+0x90>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <HAL_UART_MspInit+0x90>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	61d3      	str	r3, [r2, #28]
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_UART_MspInit+0x90>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f02:	2307      	movs	r3, #7
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <HAL_UART_MspInit+0x94>)
 8000f0e:	f000 f9d9 	bl	80012c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2105      	movs	r1, #5
 8000f16:	2026      	movs	r0, #38	; 0x26
 8000f18:	f000 f969 	bl	80011ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f1c:	2026      	movs	r0, #38	; 0x26
 8000f1e:	f000 f982 	bl	8001226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40004400 	.word	0x40004400
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020000 	.word	0x40020000

08000f38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f3a:	e003      	b.n	8000f44 <LoopCopyDataInit>

08000f3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f42:	3104      	adds	r1, #4

08000f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f44:	480a      	ldr	r0, [pc, #40]	; (8000f70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f4c:	d3f6      	bcc.n	8000f3c <CopyDataInit>
  ldr r2, =_sbss
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f50:	e002      	b.n	8000f58 <LoopFillZerobss>

08000f52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f54:	f842 3b04 	str.w	r3, [r2], #4

08000f58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f5c:	d3f9      	bcc.n	8000f52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f5e:	f7ff ff69 	bl	8000e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f62:	f007 fe83 	bl	8008c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f66:	f7ff fbe1 	bl	800072c <main>
  bx lr
 8000f6a:	4770      	bx	lr
  ldr r3, =_sidata
 8000f6c:	0800a264 	.word	0x0800a264
  ldr r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f74:	200000ac 	.word	0x200000ac
  ldr r2, =_sbss
 8000f78:	200000ac 	.word	0x200000ac
  ldr r3, = _ebss
 8000f7c:	20001524 	.word	0x20001524

08000f80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC1_IRQHandler>

08000f82 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	f000 f923 	bl	80011d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f92:	2000      	movs	r0, #0
 8000f94:	f7ff fe02 	bl	8000b9c <HAL_InitTick>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	71fb      	strb	r3, [r7, #7]
 8000fa2:	e001      	b.n	8000fa8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fa4:	f7ff fdc6 	bl	8000b34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <HAL_IncTick+0x1c>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <HAL_IncTick+0x1c>)
 8000fc4:	6013      	str	r3, [r2, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20001388 	.word	0x20001388
 8000fd4:	20000008 	.word	0x20000008

08000fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b02      	ldr	r3, [pc, #8]	; (8000fe8 <HAL_GetTick+0x10>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	20001388 	.word	0x20001388

08000fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff fff0 	bl	8000fd8 <HAL_GetTick>
 8000ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001004:	d004      	beq.n	8001010 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <HAL_Delay+0x40>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	4413      	add	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001010:	bf00      	nop
 8001012:	f7ff ffe1 	bl	8000fd8 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	429a      	cmp	r2, r3
 8001020:	d8f7      	bhi.n	8001012 <HAL_Delay+0x26>
  {
  }
}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000008 	.word	0x20000008

08001030 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	4a03      	ldr	r2, [pc, #12]	; (8001048 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6053      	str	r3, [r2, #4]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	e0042000 	.word	0xe0042000

0800104c <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	4a03      	ldr	r2, [pc, #12]	; (8001064 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	6053      	str	r3, [r2, #4]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	e0042000 	.word	0xe0042000

08001068 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	4a03      	ldr	r2, [pc, #12]	; (8001080 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	6053      	str	r3, [r2, #4]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	e0042000 	.word	0xe0042000

08001084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	60d3      	str	r3, [r2, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <__NVIC_GetPriorityGrouping+0x18>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	f003 0307 	and.w	r3, r3, #7
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	db0b      	blt.n	8001112 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	f003 021f 	and.w	r2, r3, #31
 8001100:	4906      	ldr	r1, [pc, #24]	; (800111c <__NVIC_EnableIRQ+0x34>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	095b      	lsrs	r3, r3, #5
 8001108:	2001      	movs	r0, #1
 800110a:	fa00 f202 	lsl.w	r2, r0, r2
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff4f 	bl	8001084 <__NVIC_SetPriorityGrouping>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001200:	f7ff ff64 	bl	80010cc <__NVIC_GetPriorityGrouping>
 8001204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	f7ff ffb2 	bl	8001174 <NVIC_EncodePriority>
 8001210:	4602      	mov	r2, r0
 8001212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff81 	bl	8001120 <__NVIC_SetPriority>
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff57 	bl	80010e8 <__NVIC_EnableIRQ>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b084      	sub	sp, #16
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d005      	beq.n	8001266 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2204      	movs	r2, #4
 800125e:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	73fb      	strb	r3, [r7, #15]
 8001264:	e029      	b.n	80012ba <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 020e 	bic.w	r2, r2, #14
 8001274:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0201 	bic.w	r2, r2, #1
 8001284:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 021c 	and.w	r2, r3, #28
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001292:	2101      	movs	r1, #1
 8001294:	fa01 f202 	lsl.w	r2, r1, r2
 8001298:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	4798      	blx	r3
    }
  }
  return status;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80012da:	e160      	b.n	800159e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	2101      	movs	r1, #1
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	fa01 f303 	lsl.w	r3, r1, r3
 80012e8:	4013      	ands	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8152 	beq.w	8001598 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d00b      	beq.n	8001314 <HAL_GPIO_Init+0x50>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d007      	beq.n	8001314 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001308:	2b11      	cmp	r3, #17
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b12      	cmp	r3, #18
 8001312:	d130      	bne.n	8001376 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800134a:	2201      	movs	r2, #1
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	f003 0201 	and.w	r2, r3, #1
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	2203      	movs	r2, #3
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0xf2>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b12      	cmp	r3, #18
 80013b4:	d123      	bne.n	80013fe <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	08da      	lsrs	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	220f      	movs	r2, #15
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	691a      	ldr	r2, [r3, #16]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	08da      	lsrs	r2, r3, #3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3208      	adds	r2, #8
 80013f8:	6939      	ldr	r1, [r7, #16]
 80013fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	2203      	movs	r2, #3
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0203 	and.w	r2, r3, #3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 80ac 	beq.w	8001598 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001440:	4b5e      	ldr	r3, [pc, #376]	; (80015bc <HAL_GPIO_Init+0x2f8>)
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	4a5d      	ldr	r2, [pc, #372]	; (80015bc <HAL_GPIO_Init+0x2f8>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6213      	str	r3, [r2, #32]
 800144c:	4b5b      	ldr	r3, [pc, #364]	; (80015bc <HAL_GPIO_Init+0x2f8>)
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001458:	4a59      	ldr	r2, [pc, #356]	; (80015c0 <HAL_GPIO_Init+0x2fc>)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	3302      	adds	r3, #2
 8001460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001464:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	220f      	movs	r2, #15
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a51      	ldr	r2, [pc, #324]	; (80015c4 <HAL_GPIO_Init+0x300>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d025      	beq.n	80014d0 <HAL_GPIO_Init+0x20c>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a50      	ldr	r2, [pc, #320]	; (80015c8 <HAL_GPIO_Init+0x304>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d01f      	beq.n	80014cc <HAL_GPIO_Init+0x208>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a4f      	ldr	r2, [pc, #316]	; (80015cc <HAL_GPIO_Init+0x308>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d019      	beq.n	80014c8 <HAL_GPIO_Init+0x204>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a4e      	ldr	r2, [pc, #312]	; (80015d0 <HAL_GPIO_Init+0x30c>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d013      	beq.n	80014c4 <HAL_GPIO_Init+0x200>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a4d      	ldr	r2, [pc, #308]	; (80015d4 <HAL_GPIO_Init+0x310>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d00d      	beq.n	80014c0 <HAL_GPIO_Init+0x1fc>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a4c      	ldr	r2, [pc, #304]	; (80015d8 <HAL_GPIO_Init+0x314>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d007      	beq.n	80014bc <HAL_GPIO_Init+0x1f8>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a4b      	ldr	r2, [pc, #300]	; (80015dc <HAL_GPIO_Init+0x318>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d101      	bne.n	80014b8 <HAL_GPIO_Init+0x1f4>
 80014b4:	2306      	movs	r3, #6
 80014b6:	e00c      	b.n	80014d2 <HAL_GPIO_Init+0x20e>
 80014b8:	2307      	movs	r3, #7
 80014ba:	e00a      	b.n	80014d2 <HAL_GPIO_Init+0x20e>
 80014bc:	2305      	movs	r3, #5
 80014be:	e008      	b.n	80014d2 <HAL_GPIO_Init+0x20e>
 80014c0:	2304      	movs	r3, #4
 80014c2:	e006      	b.n	80014d2 <HAL_GPIO_Init+0x20e>
 80014c4:	2303      	movs	r3, #3
 80014c6:	e004      	b.n	80014d2 <HAL_GPIO_Init+0x20e>
 80014c8:	2302      	movs	r3, #2
 80014ca:	e002      	b.n	80014d2 <HAL_GPIO_Init+0x20e>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <HAL_GPIO_Init+0x20e>
 80014d0:	2300      	movs	r3, #0
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	f002 0203 	and.w	r2, r2, #3
 80014d8:	0092      	lsls	r2, r2, #2
 80014da:	4093      	lsls	r3, r2
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014e2:	4937      	ldr	r1, [pc, #220]	; (80015c0 <HAL_GPIO_Init+0x2fc>)
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	089b      	lsrs	r3, r3, #2
 80014e8:	3302      	adds	r3, #2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f0:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <HAL_GPIO_Init+0x31c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001514:	4a32      	ldr	r2, [pc, #200]	; (80015e0 <HAL_GPIO_Init+0x31c>)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800151a:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <HAL_GPIO_Init+0x31c>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800153e:	4a28      	ldr	r2, [pc, #160]	; (80015e0 <HAL_GPIO_Init+0x31c>)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001544:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_GPIO_Init+0x31c>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001568:	4a1d      	ldr	r2, [pc, #116]	; (80015e0 <HAL_GPIO_Init+0x31c>)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800156e:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <HAL_GPIO_Init+0x31c>)
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001592:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <HAL_GPIO_Init+0x31c>)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	3301      	adds	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	fa22 f303 	lsr.w	r3, r2, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f47f ae97 	bne.w	80012dc <HAL_GPIO_Init+0x18>
  }
}
 80015ae:	bf00      	nop
 80015b0:	bf00      	nop
 80015b2:	371c      	adds	r7, #28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40010000 	.word	0x40010000
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40020800 	.word	0x40020800
 80015d0:	40020c00 	.word	0x40020c00
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40021400 	.word	0x40021400
 80015dc:	40021800 	.word	0x40021800
 80015e0:	40010400 	.word	0x40010400

080015e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	e001      	b.n	8001606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	460b      	mov	r3, r1
 800161c:	807b      	strh	r3, [r7, #2]
 800161e:	4613      	mov	r3, r2
 8001620:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001622:	787b      	ldrb	r3, [r7, #1]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001628:	887a      	ldrh	r2, [r7, #2]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800162e:	e003      	b.n	8001638 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	041a      	lsls	r2, r3, #16
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	619a      	str	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr

08001642 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001642:	b480      	push	{r7}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	460b      	mov	r3, r1
 800164c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001654:	887a      	ldrh	r2, [r7, #2]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4013      	ands	r3, r2
 800165a:	041a      	lsls	r2, r3, #16
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	43d9      	mvns	r1, r3
 8001660:	887b      	ldrh	r3, [r7, #2]
 8001662:	400b      	ands	r3, r1
 8001664:	431a      	orrs	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	619a      	str	r2, [r3, #24]
}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	4013      	ands	r3, r2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d006      	beq.n	8001698 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800168a:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	4618      	mov	r0, r3
 8001694:	f007 f83a 	bl	800870c <HAL_GPIO_EXTI_Callback>
  }
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40010400 	.word	0x40010400

080016a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e31d      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016b6:	4b94      	ldr	r3, [pc, #592]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c0:	4b91      	ldr	r3, [pc, #580]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d07b      	beq.n	80017ce <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d006      	beq.n	80016ea <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	d10f      	bne.n	8001702 <HAL_RCC_OscConfig+0x5e>
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e8:	d10b      	bne.n	8001702 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ea:	4b87      	ldr	r3, [pc, #540]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d06a      	beq.n	80017cc <HAL_RCC_OscConfig+0x128>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d166      	bne.n	80017cc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e2f7      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d106      	bne.n	8001718 <HAL_RCC_OscConfig+0x74>
 800170a:	4b7f      	ldr	r3, [pc, #508]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a7e      	ldr	r2, [pc, #504]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e02d      	b.n	8001774 <HAL_RCC_OscConfig+0xd0>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10c      	bne.n	800173a <HAL_RCC_OscConfig+0x96>
 8001720:	4b79      	ldr	r3, [pc, #484]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a78      	ldr	r2, [pc, #480]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 8001726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	4b76      	ldr	r3, [pc, #472]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a75      	ldr	r2, [pc, #468]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 8001732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	e01c      	b.n	8001774 <HAL_RCC_OscConfig+0xd0>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b05      	cmp	r3, #5
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0xb8>
 8001742:	4b71      	ldr	r3, [pc, #452]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a70      	ldr	r2, [pc, #448]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b6e      	ldr	r3, [pc, #440]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a6d      	ldr	r2, [pc, #436]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0xd0>
 800175c:	4b6a      	ldr	r3, [pc, #424]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a69      	ldr	r2, [pc, #420]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 8001762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b67      	ldr	r3, [pc, #412]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a66      	ldr	r2, [pc, #408]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fc2c 	bl	8000fd8 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fc28 	bl	8000fd8 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e2ad      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001796:	4b5c      	ldr	r3, [pc, #368]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0xe0>
 80017a2:	e014      	b.n	80017ce <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fc18 	bl	8000fd8 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fc14 	bl	8000fd8 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e299      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017be:	4b52      	ldr	r3, [pc, #328]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x108>
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d05a      	beq.n	8001890 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d005      	beq.n	80017ec <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	2b0c      	cmp	r3, #12
 80017e4:	d119      	bne.n	800181a <HAL_RCC_OscConfig+0x176>
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d116      	bne.n	800181a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ec:	4b46      	ldr	r3, [pc, #280]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_OscConfig+0x160>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e276      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001804:	4b40      	ldr	r3, [pc, #256]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	493d      	ldr	r1, [pc, #244]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001818:	e03a      	b.n	8001890 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d020      	beq.n	8001864 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001822:	4b3a      	ldr	r3, [pc, #232]	; (800190c <HAL_RCC_OscConfig+0x268>)
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fbd6 	bl	8000fd8 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001830:	f7ff fbd2 	bl	8000fd8 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e257      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001842:	4b31      	ldr	r3, [pc, #196]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184e:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	492a      	ldr	r1, [pc, #168]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 800185e:	4313      	orrs	r3, r2
 8001860:	604b      	str	r3, [r1, #4]
 8001862:	e015      	b.n	8001890 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001864:	4b29      	ldr	r3, [pc, #164]	; (800190c <HAL_RCC_OscConfig+0x268>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff fbb5 	bl	8000fd8 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001872:	f7ff fbb1 	bl	8000fd8 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e236      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001884:	4b20      	ldr	r3, [pc, #128]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80b8 	beq.w	8001a0e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d170      	bne.n	8001986 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_OscConfig+0x218>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e21a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1a      	ldr	r2, [r3, #32]
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d921      	bls.n	8001910 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 fc7b 	bl	80021cc <RCC_SetFlashLatencyFromMSIRange>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e208      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	4906      	ldr	r1, [pc, #24]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	061b      	lsls	r3, r3, #24
 8001900:	4901      	ldr	r1, [pc, #4]	; (8001908 <HAL_RCC_OscConfig+0x264>)
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]
 8001906:	e020      	b.n	800194a <HAL_RCC_OscConfig+0x2a6>
 8001908:	40023800 	.word	0x40023800
 800190c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001910:	4ba4      	ldr	r3, [pc, #656]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	49a1      	ldr	r1, [pc, #644]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 800191e:	4313      	orrs	r3, r2
 8001920:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001922:	4ba0      	ldr	r3, [pc, #640]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	061b      	lsls	r3, r3, #24
 8001930:	499c      	ldr	r1, [pc, #624]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001932:	4313      	orrs	r3, r2
 8001934:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fc46 	bl	80021cc <RCC_SetFlashLatencyFromMSIRange>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e1d3      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	0b5b      	lsrs	r3, r3, #13
 8001950:	3301      	adds	r3, #1
 8001952:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800195a:	4a92      	ldr	r2, [pc, #584]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 800195c:	6892      	ldr	r2, [r2, #8]
 800195e:	0912      	lsrs	r2, r2, #4
 8001960:	f002 020f 	and.w	r2, r2, #15
 8001964:	4990      	ldr	r1, [pc, #576]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001966:	5c8a      	ldrb	r2, [r1, r2]
 8001968:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800196a:	4a90      	ldr	r2, [pc, #576]	; (8001bac <HAL_RCC_OscConfig+0x508>)
 800196c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800196e:	4b90      	ldr	r3, [pc, #576]	; (8001bb0 <HAL_RCC_OscConfig+0x50c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff f912 	bl	8000b9c <HAL_InitTick>
 8001978:	4603      	mov	r3, r0
 800197a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d045      	beq.n	8001a0e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	e1b5      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d029      	beq.n	80019e2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800198e:	4b89      	ldr	r3, [pc, #548]	; (8001bb4 <HAL_RCC_OscConfig+0x510>)
 8001990:	2201      	movs	r2, #1
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fb20 	bl	8000fd8 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800199c:	f7ff fb1c 	bl	8000fd8 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e1a1      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019ae:	4b7d      	ldr	r3, [pc, #500]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ba:	4b7a      	ldr	r3, [pc, #488]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	4977      	ldr	r1, [pc, #476]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019cc:	4b75      	ldr	r3, [pc, #468]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	061b      	lsls	r3, r3, #24
 80019da:	4972      	ldr	r1, [pc, #456]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
 80019e0:	e015      	b.n	8001a0e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019e2:	4b74      	ldr	r3, [pc, #464]	; (8001bb4 <HAL_RCC_OscConfig+0x510>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff faf6 	bl	8000fd8 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019f0:	f7ff faf2 	bl	8000fd8 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e177      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a02:	4b68      	ldr	r3, [pc, #416]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d030      	beq.n	8001a7c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d016      	beq.n	8001a50 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a22:	4b65      	ldr	r3, [pc, #404]	; (8001bb8 <HAL_RCC_OscConfig+0x514>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a28:	f7ff fad6 	bl	8000fd8 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a30:	f7ff fad2 	bl	8000fd8 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e157      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a42:	4b58      	ldr	r3, [pc, #352]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0x38c>
 8001a4e:	e015      	b.n	8001a7c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a50:	4b59      	ldr	r3, [pc, #356]	; (8001bb8 <HAL_RCC_OscConfig+0x514>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a56:	f7ff fabf 	bl	8000fd8 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a5e:	f7ff fabb 	bl	8000fd8 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e140      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a70:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f0      	bne.n	8001a5e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80b5 	beq.w	8001bf4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8e:	4b45      	ldr	r3, [pc, #276]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10d      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	4b42      	ldr	r3, [pc, #264]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	4a41      	ldr	r2, [pc, #260]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	6253      	str	r3, [r2, #36]	; 0x24
 8001aa6:	4b3f      	ldr	r3, [pc, #252]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab6:	4b41      	ldr	r3, [pc, #260]	; (8001bbc <HAL_RCC_OscConfig+0x518>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d118      	bne.n	8001af4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac2:	4b3e      	ldr	r3, [pc, #248]	; (8001bbc <HAL_RCC_OscConfig+0x518>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a3d      	ldr	r2, [pc, #244]	; (8001bbc <HAL_RCC_OscConfig+0x518>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ace:	f7ff fa83 	bl	8000fd8 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad6:	f7ff fa7f 	bl	8000fd8 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b64      	cmp	r3, #100	; 0x64
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e104      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <HAL_RCC_OscConfig+0x518>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x466>
 8001afc:	4b29      	ldr	r3, [pc, #164]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b00:	4a28      	ldr	r2, [pc, #160]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b06:	6353      	str	r3, [r2, #52]	; 0x34
 8001b08:	e02d      	b.n	8001b66 <HAL_RCC_OscConfig+0x4c2>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x488>
 8001b12:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b16:	4a23      	ldr	r2, [pc, #140]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b1c:	6353      	str	r3, [r2, #52]	; 0x34
 8001b1e:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b22:	4a20      	ldr	r2, [pc, #128]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001b24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b28:	6353      	str	r3, [r2, #52]	; 0x34
 8001b2a:	e01c      	b.n	8001b66 <HAL_RCC_OscConfig+0x4c2>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d10c      	bne.n	8001b4e <HAL_RCC_OscConfig+0x4aa>
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b38:	4a1a      	ldr	r2, [pc, #104]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b3e:	6353      	str	r3, [r2, #52]	; 0x34
 8001b40:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b44:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4a:	6353      	str	r3, [r2, #52]	; 0x34
 8001b4c:	e00b      	b.n	8001b66 <HAL_RCC_OscConfig+0x4c2>
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b52:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b58:	6353      	str	r3, [r2, #52]	; 0x34
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5e:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001b60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b64:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d015      	beq.n	8001b9a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fa33 	bl	8000fd8 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7ff fa2f 	bl	8000fd8 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e0b2      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0ee      	beq.n	8001b76 <HAL_RCC_OscConfig+0x4d2>
 8001b98:	e023      	b.n	8001be2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff fa1d 	bl	8000fd8 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ba0:	e019      	b.n	8001bd6 <HAL_RCC_OscConfig+0x532>
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	0800a040 	.word	0x0800a040
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000004 	.word	0x20000004
 8001bb4:	42470020 	.word	0x42470020
 8001bb8:	42470680 	.word	0x42470680
 8001bbc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fa0a 	bl	8000fd8 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e08d      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bd6:	4b49      	ldr	r3, [pc, #292]	; (8001cfc <HAL_RCC_OscConfig+0x658>)
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1ee      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001be2:	7ffb      	ldrb	r3, [r7, #31]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be8:	4b44      	ldr	r3, [pc, #272]	; (8001cfc <HAL_RCC_OscConfig+0x658>)
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	4a43      	ldr	r2, [pc, #268]	; (8001cfc <HAL_RCC_OscConfig+0x658>)
 8001bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d079      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d056      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d13b      	bne.n	8001c82 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <HAL_RCC_OscConfig+0x65c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff f9e2 	bl	8000fd8 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c18:	f7ff f9de 	bl	8000fd8 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e063      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c2a:	4b34      	ldr	r3, [pc, #208]	; (8001cfc <HAL_RCC_OscConfig+0x658>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c36:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <HAL_RCC_OscConfig+0x658>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	4319      	orrs	r1, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	492b      	ldr	r1, [pc, #172]	; (8001cfc <HAL_RCC_OscConfig+0x658>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c54:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <HAL_RCC_OscConfig+0x65c>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff f9bd 	bl	8000fd8 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c62:	f7ff f9b9 	bl	8000fd8 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e03e      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c74:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <HAL_RCC_OscConfig+0x658>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x5be>
 8001c80:	e036      	b.n	8001cf0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c82:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <HAL_RCC_OscConfig+0x65c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff f9a6 	bl	8000fd8 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c90:	f7ff f9a2 	bl	8000fd8 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e027      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ca2:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <HAL_RCC_OscConfig+0x658>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x5ec>
 8001cae:	e01f      	b.n	8001cf0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e01a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <HAL_RCC_OscConfig+0x658>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d10d      	bne.n	8001cec <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d106      	bne.n	8001cec <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3720      	adds	r7, #32
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	42470060 	.word	0x42470060

08001d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e11a      	b.n	8001f4e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b8f      	ldr	r3, [pc, #572]	; (8001f58 <HAL_RCC_ClockConfig+0x254>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d919      	bls.n	8001d5a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x34>
 8001d2c:	4b8a      	ldr	r3, [pc, #552]	; (8001f58 <HAL_RCC_ClockConfig+0x254>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a89      	ldr	r2, [pc, #548]	; (8001f58 <HAL_RCC_ClockConfig+0x254>)
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	4b87      	ldr	r3, [pc, #540]	; (8001f58 <HAL_RCC_ClockConfig+0x254>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 0201 	bic.w	r2, r3, #1
 8001d40:	4985      	ldr	r1, [pc, #532]	; (8001f58 <HAL_RCC_ClockConfig+0x254>)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d48:	4b83      	ldr	r3, [pc, #524]	; (8001f58 <HAL_RCC_ClockConfig+0x254>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e0f9      	b.n	8001f4e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d008      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d66:	4b7d      	ldr	r3, [pc, #500]	; (8001f5c <HAL_RCC_ClockConfig+0x258>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	497a      	ldr	r1, [pc, #488]	; (8001f5c <HAL_RCC_ClockConfig+0x258>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 808e 	beq.w	8001ea2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d8e:	4b73      	ldr	r3, [pc, #460]	; (8001f5c <HAL_RCC_ClockConfig+0x258>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d121      	bne.n	8001dde <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e0d7      	b.n	8001f4e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001da6:	4b6d      	ldr	r3, [pc, #436]	; (8001f5c <HAL_RCC_ClockConfig+0x258>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d115      	bne.n	8001dde <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e0cb      	b.n	8001f4e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dbe:	4b67      	ldr	r3, [pc, #412]	; (8001f5c <HAL_RCC_ClockConfig+0x258>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e0bf      	b.n	8001f4e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dce:	4b63      	ldr	r3, [pc, #396]	; (8001f5c <HAL_RCC_ClockConfig+0x258>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e0b7      	b.n	8001f4e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dde:	4b5f      	ldr	r3, [pc, #380]	; (8001f5c <HAL_RCC_ClockConfig+0x258>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f023 0203 	bic.w	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	495c      	ldr	r1, [pc, #368]	; (8001f5c <HAL_RCC_ClockConfig+0x258>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df0:	f7ff f8f2 	bl	8000fd8 <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d112      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e00:	f7ff f8ea 	bl	8000fd8 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e09b      	b.n	8001f4e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e16:	4b51      	ldr	r3, [pc, #324]	; (8001f5c <HAL_RCC_ClockConfig+0x258>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d1ee      	bne.n	8001e00 <HAL_RCC_ClockConfig+0xfc>
 8001e22:	e03e      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d112      	bne.n	8001e52 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2e:	f7ff f8d3 	bl	8000fd8 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e084      	b.n	8001f4e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e44:	4b45      	ldr	r3, [pc, #276]	; (8001f5c <HAL_RCC_ClockConfig+0x258>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b0c      	cmp	r3, #12
 8001e4e:	d1ee      	bne.n	8001e2e <HAL_RCC_ClockConfig+0x12a>
 8001e50:	e027      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d11d      	bne.n	8001e96 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5c:	f7ff f8bc 	bl	8000fd8 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e06d      	b.n	8001f4e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e72:	4b3a      	ldr	r3, [pc, #232]	; (8001f5c <HAL_RCC_ClockConfig+0x258>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d1ee      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x158>
 8001e7e:	e010      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e80:	f7ff f8aa 	bl	8000fd8 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e05b      	b.n	8001f4e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e96:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <HAL_RCC_ClockConfig+0x258>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1ee      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <HAL_RCC_ClockConfig+0x254>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d219      	bcs.n	8001ee4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d105      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0x1be>
 8001eb6:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <HAL_RCC_ClockConfig+0x254>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a27      	ldr	r2, [pc, #156]	; (8001f58 <HAL_RCC_ClockConfig+0x254>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <HAL_RCC_ClockConfig+0x254>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 0201 	bic.w	r2, r3, #1
 8001eca:	4923      	ldr	r1, [pc, #140]	; (8001f58 <HAL_RCC_ClockConfig+0x254>)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <HAL_RCC_ClockConfig+0x254>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e034      	b.n	8001f4e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <HAL_RCC_ClockConfig+0x258>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4917      	ldr	r1, [pc, #92]	; (8001f5c <HAL_RCC_ClockConfig+0x258>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f0e:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <HAL_RCC_ClockConfig+0x258>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	490f      	ldr	r1, [pc, #60]	; (8001f5c <HAL_RCC_ClockConfig+0x258>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f22:	f000 f823 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8001f26:	4602      	mov	r2, r0
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <HAL_RCC_ClockConfig+0x258>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	490b      	ldr	r1, [pc, #44]	; (8001f60 <HAL_RCC_ClockConfig+0x25c>)
 8001f34:	5ccb      	ldrb	r3, [r1, r3]
 8001f36:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <HAL_RCC_ClockConfig+0x260>)
 8001f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_RCC_ClockConfig+0x264>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fe2a 	bl	8000b9c <HAL_InitTick>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f4c:	7afb      	ldrb	r3, [r7, #11]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023c00 	.word	0x40023c00
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	0800a040 	.word	0x0800a040
 8001f64:	20000000 	.word	0x20000000
 8001f68:	20000004 	.word	0x20000004

08001f6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f6c:	b5b0      	push	{r4, r5, r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f72:	4b61      	ldr	r3, [pc, #388]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b0c      	cmp	r3, #12
 8001f80:	d00d      	beq.n	8001f9e <HAL_RCC_GetSysClockFreq+0x32>
 8001f82:	2b0c      	cmp	r3, #12
 8001f84:	f200 80a4 	bhi.w	80020d0 <HAL_RCC_GetSysClockFreq+0x164>
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d002      	beq.n	8001f92 <HAL_RCC_GetSysClockFreq+0x26>
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d003      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0x2c>
 8001f90:	e09e      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f92:	4b5a      	ldr	r3, [pc, #360]	; (80020fc <HAL_RCC_GetSysClockFreq+0x190>)
 8001f94:	613b      	str	r3, [r7, #16]
      break;
 8001f96:	e0a9      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f98:	4b59      	ldr	r3, [pc, #356]	; (8002100 <HAL_RCC_GetSysClockFreq+0x194>)
 8001f9a:	613b      	str	r3, [r7, #16]
      break;
 8001f9c:	e0a6      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	0c9b      	lsrs	r3, r3, #18
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	4a57      	ldr	r2, [pc, #348]	; (8002104 <HAL_RCC_GetSysClockFreq+0x198>)
 8001fa8:	5cd3      	ldrb	r3, [r2, r3]
 8001faa:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	0d9b      	lsrs	r3, r3, #22
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fb8:	4b4f      	ldr	r3, [pc, #316]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d041      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	461c      	mov	r4, r3
 8001fc8:	f04f 0500 	mov.w	r5, #0
 8001fcc:	4620      	mov	r0, r4
 8001fce:	4629      	mov	r1, r5
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	014b      	lsls	r3, r1, #5
 8001fda:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fde:	0142      	lsls	r2, r0, #5
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	1b00      	subs	r0, r0, r4
 8001fe6:	eb61 0105 	sbc.w	r1, r1, r5
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	018b      	lsls	r3, r1, #6
 8001ff4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ff8:	0182      	lsls	r2, r0, #6
 8001ffa:	1a12      	subs	r2, r2, r0
 8001ffc:	eb63 0301 	sbc.w	r3, r3, r1
 8002000:	f04f 0000 	mov.w	r0, #0
 8002004:	f04f 0100 	mov.w	r1, #0
 8002008:	00d9      	lsls	r1, r3, #3
 800200a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800200e:	00d0      	lsls	r0, r2, #3
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	1912      	adds	r2, r2, r4
 8002016:	eb45 0303 	adc.w	r3, r5, r3
 800201a:	f04f 0000 	mov.w	r0, #0
 800201e:	f04f 0100 	mov.w	r1, #0
 8002022:	0259      	lsls	r1, r3, #9
 8002024:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002028:	0250      	lsls	r0, r2, #9
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	461a      	mov	r2, r3
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	f7fe f8a9 	bl	8000190 <__aeabi_uldivmod>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4613      	mov	r3, r2
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	e040      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	461c      	mov	r4, r3
 800204c:	f04f 0500 	mov.w	r5, #0
 8002050:	4620      	mov	r0, r4
 8002052:	4629      	mov	r1, r5
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	014b      	lsls	r3, r1, #5
 800205e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002062:	0142      	lsls	r2, r0, #5
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	1b00      	subs	r0, r0, r4
 800206a:	eb61 0105 	sbc.w	r1, r1, r5
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	018b      	lsls	r3, r1, #6
 8002078:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800207c:	0182      	lsls	r2, r0, #6
 800207e:	1a12      	subs	r2, r2, r0
 8002080:	eb63 0301 	sbc.w	r3, r3, r1
 8002084:	f04f 0000 	mov.w	r0, #0
 8002088:	f04f 0100 	mov.w	r1, #0
 800208c:	00d9      	lsls	r1, r3, #3
 800208e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002092:	00d0      	lsls	r0, r2, #3
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	1912      	adds	r2, r2, r4
 800209a:	eb45 0303 	adc.w	r3, r5, r3
 800209e:	f04f 0000 	mov.w	r0, #0
 80020a2:	f04f 0100 	mov.w	r1, #0
 80020a6:	0299      	lsls	r1, r3, #10
 80020a8:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020ac:	0290      	lsls	r0, r2, #10
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	461a      	mov	r2, r3
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	f7fe f867 	bl	8000190 <__aeabi_uldivmod>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4613      	mov	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	613b      	str	r3, [r7, #16]
      break;
 80020ce:	e00d      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x18c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	0b5b      	lsrs	r3, r3, #13
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	613b      	str	r3, [r7, #16]
      break;
 80020ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ec:	693b      	ldr	r3, [r7, #16]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bdb0      	pop	{r4, r5, r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	00f42400 	.word	0x00f42400
 8002100:	007a1200 	.word	0x007a1200
 8002104:	0800a034 	.word	0x0800a034

08002108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800210c:	4b02      	ldr	r3, [pc, #8]	; (8002118 <HAL_RCC_GetHCLKFreq+0x10>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	20000000 	.word	0x20000000

0800211c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002120:	f7ff fff2 	bl	8002108 <HAL_RCC_GetHCLKFreq>
 8002124:	4602      	mov	r2, r0
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	4903      	ldr	r1, [pc, #12]	; (8002140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002132:	5ccb      	ldrb	r3, [r1, r3]
 8002134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002138:	4618      	mov	r0, r3
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40023800 	.word	0x40023800
 8002140:	0800a050 	.word	0x0800a050

08002144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002148:	f7ff ffde 	bl	8002108 <HAL_RCC_GetHCLKFreq>
 800214c:	4602      	mov	r2, r0
 800214e:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	0adb      	lsrs	r3, r3, #11
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	4903      	ldr	r1, [pc, #12]	; (8002168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800215a:	5ccb      	ldrb	r3, [r1, r3]
 800215c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40023800 	.word	0x40023800
 8002168:	0800a050 	.word	0x0800a050

0800216c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	220f      	movs	r2, #15
 800217a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_RCC_GetClockConfig+0x58>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0203 	and.w	r2, r3, #3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002188:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <HAL_RCC_GetClockConfig+0x58>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_GetClockConfig+0x58>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_RCC_GetClockConfig+0x58>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	08db      	lsrs	r3, r3, #3
 80021a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_RCC_GetClockConfig+0x5c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0201 	and.w	r2, r3, #1
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	601a      	str	r2, [r3, #0]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40023c00 	.word	0x40023c00

080021cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021d4:	2300      	movs	r3, #0
 80021d6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80021d8:	4b29      	ldr	r3, [pc, #164]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d12c      	bne.n	800223e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021e4:	4b26      	ldr	r3, [pc, #152]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80021f0:	4b24      	ldr	r3, [pc, #144]	; (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	e016      	b.n	800222a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fc:	4b20      	ldr	r3, [pc, #128]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	4a1f      	ldr	r2, [pc, #124]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002206:	6253      	str	r3, [r2, #36]	; 0x24
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800221c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800221e:	4b18      	ldr	r3, [pc, #96]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	4a17      	ldr	r2, [pc, #92]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002228:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002230:	d105      	bne.n	800223e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002238:	d101      	bne.n	800223e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800223a:	2301      	movs	r3, #1
 800223c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d105      	bne.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0f      	ldr	r2, [pc, #60]	; (8002288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800224a:	f043 0304 	orr.w	r3, r3, #4
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 0201 	bic.w	r2, r3, #1
 8002258:	490b      	ldr	r1, [pc, #44]	; (8002288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	429a      	cmp	r2, r3
 800226c:	d001      	beq.n	8002272 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	371c      	adds	r7, #28
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	40007000 	.word	0x40007000
 8002288:	40023c00 	.word	0x40023c00

0800228c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d106      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80c6 	beq.w	800243a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80022ae:	2300      	movs	r3, #0
 80022b0:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b2:	4b64      	ldr	r3, [pc, #400]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10d      	bne.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	4b61      	ldr	r3, [pc, #388]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	4a60      	ldr	r2, [pc, #384]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c8:	6253      	str	r3, [r2, #36]	; 0x24
 80022ca:	4b5e      	ldr	r3, [pc, #376]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d6:	2301      	movs	r3, #1
 80022d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022da:	4b5b      	ldr	r3, [pc, #364]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d118      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e6:	4b58      	ldr	r3, [pc, #352]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a57      	ldr	r2, [pc, #348]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f2:	f7fe fe71 	bl	8000fd8 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f8:	e008      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fa:	f7fe fe6d 	bl	8000fd8 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b64      	cmp	r3, #100	; 0x64
 8002306:	d901      	bls.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e097      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230c:	4b4e      	ldr	r3, [pc, #312]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002318:	4b4a      	ldr	r3, [pc, #296]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002320:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	429a      	cmp	r2, r3
 800232e:	d106      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	429a      	cmp	r2, r3
 800233c:	d00f      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002346:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800234a:	d108      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800234c:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002354:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002358:	d101      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e06e      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800235e:	4b39      	ldr	r3, [pc, #228]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002362:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002366:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d041      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	429a      	cmp	r2, r3
 800237a:	d005      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10c      	bne.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	429a      	cmp	r2, r3
 8002394:	d02d      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d027      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80023a2:	4b28      	ldr	r3, [pc, #160]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80023aa:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023ac:	4b27      	ldr	r3, [pc, #156]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023b2:	4b26      	ldr	r3, [pc, #152]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80023b8:	4a22      	ldr	r2, [pc, #136]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d014      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7fe fe06 	bl	8000fd8 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023ce:	e00a      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d0:	f7fe fe02 	bl	8000fd8 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	; 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e02a      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023e6:	4b17      	ldr	r3, [pc, #92]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0ee      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80023fe:	d10a      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002400:	4b10      	ldr	r3, [pc, #64]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002410:	490c      	ldr	r1, [pc, #48]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002422:	4908      	ldr	r1, [pc, #32]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002424:	4313      	orrs	r3, r2
 8002426:	634b      	str	r3, [r1, #52]	; 0x34

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002428:	7dfb      	ldrb	r3, [r7, #23]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d105      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	4a04      	ldr	r2, [pc, #16]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002438:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40023800 	.word	0x40023800
 8002448:	40007000 	.word	0x40007000
 800244c:	424706dc 	.word	0x424706dc

08002450 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e06d      	b.n	800253e <HAL_RTC_Init+0xee>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	7f5b      	ldrb	r3, [r3, #29]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d105      	bne.n	8002478 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe fa8a 	bl	800098c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	22ca      	movs	r2, #202	; 0xca
 8002484:	625a      	str	r2, [r3, #36]	; 0x24
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2253      	movs	r2, #83	; 0x53
 800248c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fc8d 	bl	8002dae <RTC_EnterInitMode>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d008      	beq.n	80024ac <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	22ff      	movs	r2, #255	; 0xff
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2204      	movs	r2, #4
 80024a6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e048      	b.n	800253e <HAL_RTC_Init+0xee>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80024ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024be:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6899      	ldr	r1, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68d2      	ldr	r2, [r2, #12]
 80024e6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6919      	ldr	r1, [r3, #16]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	041a      	lsls	r2, r3, #16
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800250a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699a      	ldr	r2, [r3, #24]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	22ff      	movs	r2, #255	; 0xff
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800253c:	2300      	movs	r3, #0
  }
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002546:	b590      	push	{r4, r7, lr}
 8002548:	b087      	sub	sp, #28
 800254a:	af00      	add	r7, sp, #0
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	7f1b      	ldrb	r3, [r3, #28]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_RTC_SetTime+0x18>
 800255a:	2302      	movs	r3, #2
 800255c:	e0a3      	b.n	80026a6 <HAL_RTC_SetTime+0x160>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2201      	movs	r2, #1
 8002562:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2202      	movs	r2, #2
 8002568:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d126      	bne.n	80025be <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d102      	bne.n	8002584 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2200      	movs	r2, #0
 8002582:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fc3a 	bl	8002e02 <RTC_ByteToBcd2>
 800258e:	4603      	mov	r3, r0
 8002590:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	785b      	ldrb	r3, [r3, #1]
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fc33 	bl	8002e02 <RTC_ByteToBcd2>
 800259c:	4603      	mov	r3, r0
 800259e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80025a0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	789b      	ldrb	r3, [r3, #2]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fc2b 	bl	8002e02 <RTC_ByteToBcd2>
 80025ac:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80025ae:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	78db      	ldrb	r3, [r3, #3]
 80025b6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80025b8:	4313      	orrs	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	e018      	b.n	80025f0 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2200      	movs	r2, #0
 80025d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	785b      	ldrb	r3, [r3, #1]
 80025dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80025de:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80025e4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	78db      	ldrb	r3, [r3, #3]
 80025ea:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80025ec:	4313      	orrs	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	22ca      	movs	r2, #202	; 0xca
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2253      	movs	r2, #83	; 0x53
 80025fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 fbd4 	bl	8002dae <RTC_EnterInitMode>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00b      	beq.n	8002624 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	22ff      	movs	r2, #255	; 0xff
 8002612:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2204      	movs	r2, #4
 8002618:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e040      	b.n	80026a6 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800262e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002632:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002642:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6899      	ldr	r1, [r3, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	431a      	orrs	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800266a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 fb71 	bl	8002d54 <HAL_RTC_WaitForSynchro>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00b      	beq.n	8002690 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	22ff      	movs	r2, #255	; 0xff
 800267e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2204      	movs	r2, #4
 8002684:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e00a      	b.n	80026a6 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	22ff      	movs	r2, #255	; 0xff
 8002696:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80026a4:	2300      	movs	r3, #0
  }
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd90      	pop	{r4, r7, pc}

080026ae <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b086      	sub	sp, #24
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	609a      	str	r2, [r3, #8]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80026de:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80026e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	0c1b      	lsrs	r3, r3, #16
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	0a1b      	lsrs	r3, r3, #8
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800270c:	b2da      	uxtb	r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	0c1b      	lsrs	r3, r3, #16
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271c:	b2da      	uxtb	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d11a      	bne.n	800275e <HAL_RTC_GetTime+0xb0>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fb87 	bl	8002e40 <RTC_Bcd2ToByte>
 8002732:	4603      	mov	r3, r0
 8002734:	461a      	mov	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	785b      	ldrb	r3, [r3, #1]
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fb7e 	bl	8002e40 <RTC_Bcd2ToByte>
 8002744:	4603      	mov	r3, r0
 8002746:	461a      	mov	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	789b      	ldrb	r3, [r3, #2]
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fb75 	bl	8002e40 <RTC_Bcd2ToByte>
 8002756:	4603      	mov	r3, r0
 8002758:	461a      	mov	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	7f1b      	ldrb	r3, [r3, #28]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_RTC_SetDate+0x18>
 800277c:	2302      	movs	r3, #2
 800277e:	e08d      	b.n	800289c <HAL_RTC_SetDate+0x134>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2201      	movs	r2, #1
 8002784:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2202      	movs	r2, #2
 800278a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10e      	bne.n	80027b0 <HAL_RTC_SetDate+0x48>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	785b      	ldrb	r3, [r3, #1]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	785b      	ldrb	r3, [r3, #1]
 80027a2:	f023 0310 	bic.w	r3, r3, #16
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	330a      	adds	r3, #10
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d11c      	bne.n	80027f0 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	78db      	ldrb	r3, [r3, #3]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fb21 	bl	8002e02 <RTC_ByteToBcd2>
 80027c0:	4603      	mov	r3, r0
 80027c2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	785b      	ldrb	r3, [r3, #1]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 fb1a 	bl	8002e02 <RTC_ByteToBcd2>
 80027ce:	4603      	mov	r3, r0
 80027d0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80027d2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	789b      	ldrb	r3, [r3, #2]
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 fb12 	bl	8002e02 <RTC_ByteToBcd2>
 80027de:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80027e0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80027ea:	4313      	orrs	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e00e      	b.n	800280e <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	78db      	ldrb	r3, [r3, #3]
 80027f4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	785b      	ldrb	r3, [r3, #1]
 80027fa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80027fc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002802:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800280a:	4313      	orrs	r3, r2
 800280c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	22ca      	movs	r2, #202	; 0xca
 8002814:	625a      	str	r2, [r3, #36]	; 0x24
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2253      	movs	r2, #83	; 0x53
 800281c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 fac5 	bl	8002dae <RTC_EnterInitMode>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00b      	beq.n	8002842 <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	22ff      	movs	r2, #255	; 0xff
 8002830:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2204      	movs	r2, #4
 8002836:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e02c      	b.n	800289c <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800284c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002850:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002860:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 fa76 	bl	8002d54 <HAL_RTC_WaitForSynchro>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00b      	beq.n	8002886 <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	22ff      	movs	r2, #255	; 0xff
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2204      	movs	r2, #4
 800287a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e00a      	b.n	800289c <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	22ff      	movs	r2, #255	; 0xff
 800288c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800289a:	2300      	movs	r3, #0
  }
}
 800289c:	4618      	mov	r0, r3
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd90      	pop	{r4, r7, pc}

080028a4 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80028ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80028be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	0c1b      	lsrs	r3, r3, #16
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	0a1b      	lsrs	r3, r3, #8
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	0b5b      	lsrs	r3, r3, #13
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d11a      	bne.n	8002934 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	78db      	ldrb	r3, [r3, #3]
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fa9c 	bl	8002e40 <RTC_Bcd2ToByte>
 8002908:	4603      	mov	r3, r0
 800290a:	461a      	mov	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	785b      	ldrb	r3, [r3, #1]
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fa93 	bl	8002e40 <RTC_Bcd2ToByte>
 800291a:	4603      	mov	r3, r0
 800291c:	461a      	mov	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	789b      	ldrb	r3, [r3, #2]
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fa8a 	bl	8002e40 <RTC_Bcd2ToByte>
 800292c:	4603      	mov	r3, r0
 800292e:	461a      	mov	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002940:	b590      	push	{r4, r7, lr}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  uint32_t subsecondtmpreg = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	7f1b      	ldrb	r3, [r3, #28]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_RTC_SetAlarm_IT+0x24>
 8002960:	2302      	movs	r3, #2
 8002962:	e11f      	b.n	8002ba4 <HAL_RTC_SetAlarm_IT+0x264>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2202      	movs	r2, #2
 800296e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d137      	bne.n	80029e6 <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002980:	2b00      	cmp	r3, #0
 8002982:	d102      	bne.n	800298a <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2200      	movs	r2, #0
 8002988:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fa37 	bl	8002e02 <RTC_ByteToBcd2>
 8002994:	4603      	mov	r3, r0
 8002996:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	785b      	ldrb	r3, [r3, #1]
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fa30 	bl	8002e02 <RTC_ByteToBcd2>
 80029a2:	4603      	mov	r3, r0
 80029a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80029a6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	789b      	ldrb	r3, [r3, #2]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 fa28 	bl	8002e02 <RTC_ByteToBcd2>
 80029b2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80029b4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	78db      	ldrb	r3, [r3, #3]
 80029bc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80029be:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fa1a 	bl	8002e02 <RTC_ByteToBcd2>
 80029ce:	4603      	mov	r3, r0
 80029d0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80029d2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80029da:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	e023      	b.n	8002a2e <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d102      	bne.n	80029fa <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2200      	movs	r2, #0
 80029f8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	785b      	ldrb	r3, [r3, #1]
 8002a04:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a06:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002a0c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	78db      	ldrb	r3, [r3, #3]
 8002a12:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002a14:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a1c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002a1e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002a24:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61fb      	str	r3, [r7, #28]
  }
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	22ca      	movs	r2, #202	; 0xca
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2253      	movs	r2, #83	; 0x53
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a52:	d148      	bne.n	8002ae6 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a62:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002a74:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002a76:	f7fe faaf 	bl	8000fd8 <HAL_GetTick>
 8002a7a:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002a7c:	e013      	b.n	8002aa6 <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002a7e:	f7fe faab 	bl	8000fd8 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a8c:	d90b      	bls.n	8002aa6 <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	22ff      	movs	r2, #255	; 0xff
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2203      	movs	r2, #3
 8002a9a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e07e      	b.n	8002ba4 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0e4      	beq.n	8002a7e <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	e047      	b.n	8002b76 <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002af4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002b06:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002b08:	f7fe fa66 	bl	8000fd8 <HAL_GetTick>
 8002b0c:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002b0e:	e013      	b.n	8002b38 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002b10:	f7fe fa62 	bl	8000fd8 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b1e:	d90b      	bls.n	8002b38 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	22ff      	movs	r2, #255	; 0xff
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e035      	b.n	8002ba4 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0e4      	beq.n	8002b10 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b64:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b74:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <HAL_RTC_SetAlarm_IT+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a0c      	ldr	r2, [pc, #48]	; (8002bac <HAL_RTC_SetAlarm_IT+0x26c>)
 8002b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b80:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_RTC_SetAlarm_IT+0x26c>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	4a09      	ldr	r2, [pc, #36]	; (8002bac <HAL_RTC_SetAlarm_IT+0x26c>)
 8002b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	22ff      	movs	r2, #255	; 0xff
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3724      	adds	r7, #36	; 0x24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd90      	pop	{r4, r7, pc}
 8002bac:	40010400 	.word	0x40010400

08002bb0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	7f1b      	ldrb	r3, [r3, #28]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RTC_DeactivateAlarm+0x16>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e07b      	b.n	8002cbe <HAL_RTC_DeactivateAlarm+0x10e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	22ca      	movs	r2, #202	; 0xca
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2253      	movs	r2, #83	; 0x53
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be8:	d12f      	bne.n	8002c4a <HAL_RTC_DeactivateAlarm+0x9a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bf8:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c08:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8002c0a:	f7fe f9e5 	bl	8000fd8 <HAL_GetTick>
 8002c0e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002c10:	e013      	b.n	8002c3a <HAL_RTC_DeactivateAlarm+0x8a>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002c12:	f7fe f9e1 	bl	8000fd8 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c20:	d90b      	bls.n	8002c3a <HAL_RTC_DeactivateAlarm+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e041      	b.n	8002cbe <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0e4      	beq.n	8002c12 <HAL_RTC_DeactivateAlarm+0x62>
 8002c48:	e02e      	b.n	8002ca8 <HAL_RTC_DeactivateAlarm+0xf8>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c58:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c68:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8002c6a:	f7fe f9b5 	bl	8000fd8 <HAL_GetTick>
 8002c6e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002c70:	e013      	b.n	8002c9a <HAL_RTC_DeactivateAlarm+0xea>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002c72:	f7fe f9b1 	bl	8000fd8 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c80:	d90b      	bls.n	8002c9a <HAL_RTC_DeactivateAlarm+0xea>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	22ff      	movs	r2, #255	; 0xff
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e011      	b.n	8002cbe <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0e4      	beq.n	8002c72 <HAL_RTC_DeactivateAlarm+0xc2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	22ff      	movs	r2, #255	; 0xff
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d012      	beq.n	8002d04 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00b      	beq.n	8002d04 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f005 fb6f 	bl	80083d0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002d02:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d012      	beq.n	8002d38 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00b      	beq.n	8002d38 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f8d8 	bl	8002ed6 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002d36:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002d3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d3e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	775a      	strb	r2, [r3, #29]
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40010400 	.word	0x40010400

08002d54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d11c      	bne.n	8002da4 <HAL_RTC_WaitForSynchro+0x50>
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d78:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002d7a:	f7fe f92d 	bl	8000fd8 <HAL_GetTick>
 8002d7e:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d80:	e009      	b.n	8002d96 <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002d82:	f7fe f929 	bl	8000fd8 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d90:	d901      	bls.n	8002d96 <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e007      	b.n	8002da6 <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0ee      	beq.n	8002d82 <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b084      	sub	sp, #16
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d119      	bne.n	8002df8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dcc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002dce:	f7fe f903 	bl	8000fd8 <HAL_GetTick>
 8002dd2:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002dd4:	e009      	b.n	8002dea <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002dd6:	f7fe f8ff 	bl	8000fd8 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002de4:	d901      	bls.n	8002dea <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e007      	b.n	8002dfa <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ee      	beq.n	8002dd6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b085      	sub	sp, #20
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	4603      	mov	r3, r0
 8002e0a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8002e14:	e005      	b.n	8002e22 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002e1c:	7afb      	ldrb	r3, [r7, #11]
 8002e1e:	3b0a      	subs	r3, #10
 8002e20:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8002e22:	7afb      	ldrb	r3, [r7, #11]
 8002e24:	2b09      	cmp	r3, #9
 8002e26:	d8f6      	bhi.n	8002e16 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	b2db      	uxtb	r3, r3
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	461a      	mov	r2, r3
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	4413      	add	r3, r2
 8002e6a:	b2db      	uxtb	r3, r3
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	7f1b      	ldrb	r3, [r3, #28]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_RTCEx_EnableBypassShadow+0x14>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e020      	b.n	8002ecc <HAL_RTCEx_EnableBypassShadow+0x56>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	22ca      	movs	r2, #202	; 0xca
 8002e9c:	625a      	str	r2, [r3, #36]	; 0x24
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2253      	movs	r2, #83	; 0x53
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0220 	orr.w	r2, r2, #32
 8002eb4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	22ff      	movs	r2, #255	; 0xff
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e07b      	b.n	8002ff2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d108      	bne.n	8002f14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f0a:	d009      	beq.n	8002f20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	61da      	str	r2, [r3, #28]
 8002f12:	e005      	b.n	8002f20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7fd fd78 	bl	8000a30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa4:	ea42 0103 	orr.w	r1, r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	0c1b      	lsrs	r3, r3, #16
 8002fbe:	f003 0104 	and.w	r1, r3, #4
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	f003 0210 	and.w	r2, r3, #16
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69da      	ldr	r2, [r3, #28]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fe0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e031      	b.n	8003070 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d106      	bne.n	8003026 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f829 	bl	8003078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2202      	movs	r2, #2
 800302a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3304      	adds	r3, #4
 8003036:	4619      	mov	r1, r3
 8003038:	4610      	mov	r0, r2
 800303a:	f000 f979 	bl	8003330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr
	...

0800308c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d001      	beq.n	80030a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e03a      	b.n	800311a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c4:	d00e      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x58>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a16      	ldr	r2, [pc, #88]	; (8003124 <HAL_TIM_Base_Start_IT+0x98>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d009      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x58>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a14      	ldr	r2, [pc, #80]	; (8003128 <HAL_TIM_Base_Start_IT+0x9c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d004      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x58>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a13      	ldr	r2, [pc, #76]	; (800312c <HAL_TIM_Base_Start_IT+0xa0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d111      	bne.n	8003108 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d010      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003106:	e007      	b.n	8003118 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr
 8003124:	40000400 	.word	0x40000400
 8003128:	40000800 	.word	0x40000800
 800312c:	40010800 	.word	0x40010800

08003130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b02      	cmp	r3, #2
 8003144:	d122      	bne.n	800318c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b02      	cmp	r3, #2
 8003152:	d11b      	bne.n	800318c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0202 	mvn.w	r2, #2
 800315c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f8c1 	bl	80032fa <HAL_TIM_IC_CaptureCallback>
 8003178:	e005      	b.n	8003186 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f8b4 	bl	80032e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f8c3 	bl	800330c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b04      	cmp	r3, #4
 8003198:	d122      	bne.n	80031e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d11b      	bne.n	80031e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0204 	mvn.w	r2, #4
 80031b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2202      	movs	r2, #2
 80031b6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f897 	bl	80032fa <HAL_TIM_IC_CaptureCallback>
 80031cc:	e005      	b.n	80031da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f88a 	bl	80032e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f899 	bl	800330c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d122      	bne.n	8003234 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d11b      	bne.n	8003234 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0208 	mvn.w	r2, #8
 8003204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2204      	movs	r2, #4
 800320a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f86d 	bl	80032fa <HAL_TIM_IC_CaptureCallback>
 8003220:	e005      	b.n	800322e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f860 	bl	80032e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f86f 	bl	800330c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b10      	cmp	r3, #16
 8003240:	d122      	bne.n	8003288 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0310 	and.w	r3, r3, #16
 800324c:	2b10      	cmp	r3, #16
 800324e:	d11b      	bne.n	8003288 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0210 	mvn.w	r2, #16
 8003258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2208      	movs	r2, #8
 800325e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f843 	bl	80032fa <HAL_TIM_IC_CaptureCallback>
 8003274:	e005      	b.n	8003282 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f836 	bl	80032e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f845 	bl	800330c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b01      	cmp	r3, #1
 8003294:	d10e      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d107      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0201 	mvn.w	r2, #1
 80032ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fd faca 	bl	8000848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032be:	2b40      	cmp	r3, #64	; 0x40
 80032c0:	d10e      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032cc:	2b40      	cmp	r3, #64	; 0x40
 80032ce:	d107      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f81f 	bl	800331e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr

080032fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr

0800331e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003346:	d00f      	beq.n	8003368 <TIM_Base_SetConfig+0x38>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a2b      	ldr	r2, [pc, #172]	; (80033f8 <TIM_Base_SetConfig+0xc8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00b      	beq.n	8003368 <TIM_Base_SetConfig+0x38>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a2a      	ldr	r2, [pc, #168]	; (80033fc <TIM_Base_SetConfig+0xcc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d007      	beq.n	8003368 <TIM_Base_SetConfig+0x38>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a29      	ldr	r2, [pc, #164]	; (8003400 <TIM_Base_SetConfig+0xd0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d003      	beq.n	8003368 <TIM_Base_SetConfig+0x38>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a28      	ldr	r2, [pc, #160]	; (8003404 <TIM_Base_SetConfig+0xd4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d108      	bne.n	800337a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800336e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003380:	d017      	beq.n	80033b2 <TIM_Base_SetConfig+0x82>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a1c      	ldr	r2, [pc, #112]	; (80033f8 <TIM_Base_SetConfig+0xc8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d013      	beq.n	80033b2 <TIM_Base_SetConfig+0x82>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a1b      	ldr	r2, [pc, #108]	; (80033fc <TIM_Base_SetConfig+0xcc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00f      	beq.n	80033b2 <TIM_Base_SetConfig+0x82>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a1a      	ldr	r2, [pc, #104]	; (8003400 <TIM_Base_SetConfig+0xd0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00b      	beq.n	80033b2 <TIM_Base_SetConfig+0x82>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a19      	ldr	r2, [pc, #100]	; (8003404 <TIM_Base_SetConfig+0xd4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d007      	beq.n	80033b2 <TIM_Base_SetConfig+0x82>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a18      	ldr	r2, [pc, #96]	; (8003408 <TIM_Base_SetConfig+0xd8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d003      	beq.n	80033b2 <TIM_Base_SetConfig+0x82>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a17      	ldr	r2, [pc, #92]	; (800340c <TIM_Base_SetConfig+0xdc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d108      	bne.n	80033c4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	615a      	str	r2, [r3, #20]
}
 80033ee:	bf00      	nop
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	40000400 	.word	0x40000400
 80033fc:	40000800 	.word	0x40000800
 8003400:	40000c00 	.word	0x40000c00
 8003404:	40010800 	.word	0x40010800
 8003408:	40010c00 	.word	0x40010c00
 800340c:	40011000 	.word	0x40011000

08003410 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e03f      	b.n	80034a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fd fd32 	bl	8000ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2224      	movs	r2, #36	; 0x24
 8003440:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003452:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fb45 	bl	8003ae4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003468:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003478:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003488:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b088      	sub	sp, #32
 80034ae:	af02      	add	r7, sp, #8
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	603b      	str	r3, [r7, #0]
 80034b6:	4613      	mov	r3, r2
 80034b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	f040 8083 	bne.w	80035d2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_UART_Transmit+0x2e>
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e07b      	b.n	80035d4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_UART_Transmit+0x40>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e074      	b.n	80035d4 <HAL_UART_Transmit+0x12a>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2221      	movs	r2, #33	; 0x21
 80034fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003500:	f7fd fd6a 	bl	8000fd8 <HAL_GetTick>
 8003504:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	88fa      	ldrh	r2, [r7, #6]
 800350a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	88fa      	ldrh	r2, [r7, #6]
 8003510:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800351a:	e042      	b.n	80035a2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003532:	d122      	bne.n	800357a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2200      	movs	r2, #0
 800353c:	2180      	movs	r1, #128	; 0x80
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 f967 	bl	8003812 <UART_WaitOnFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e042      	b.n	80035d4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003560:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d103      	bne.n	8003572 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	3302      	adds	r3, #2
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	e017      	b.n	80035a2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	3301      	adds	r3, #1
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	e013      	b.n	80035a2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2200      	movs	r2, #0
 8003582:	2180      	movs	r1, #128	; 0x80
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f944 	bl	8003812 <UART_WaitOnFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e01f      	b.n	80035d4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	60ba      	str	r2, [r7, #8]
 800359a:	781a      	ldrb	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1b7      	bne.n	800351c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2200      	movs	r2, #0
 80035b4:	2140      	movs	r1, #64	; 0x40
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f92b 	bl	8003812 <UART_WaitOnFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e006      	b.n	80035d4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	e000      	b.n	80035d4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
  }
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10d      	bne.n	800362e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_UART_IRQHandler+0x52>
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f9db 	bl	80039e2 <UART_Receive_IT>
      return;
 800362c:	e0d0      	b.n	80037d0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80b0 	beq.w	8003796 <HAL_UART_IRQHandler+0x1ba>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d105      	bne.n	800364c <HAL_UART_IRQHandler+0x70>
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80a5 	beq.w	8003796 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_UART_IRQHandler+0x90>
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003664:	f043 0201 	orr.w	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <HAL_UART_IRQHandler+0xb0>
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003684:	f043 0202 	orr.w	r2, r3, #2
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_UART_IRQHandler+0xd0>
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a4:	f043 0204 	orr.w	r2, r3, #4
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00f      	beq.n	80036d6 <HAL_UART_IRQHandler+0xfa>
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d104      	bne.n	80036ca <HAL_UART_IRQHandler+0xee>
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ce:	f043 0208 	orr.w	r2, r3, #8
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d077      	beq.n	80037ce <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d007      	beq.n	80036f8 <HAL_UART_IRQHandler+0x11c>
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f975 	bl	80039e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003702:	2b40      	cmp	r3, #64	; 0x40
 8003704:	bf0c      	ite	eq
 8003706:	2301      	moveq	r3, #1
 8003708:	2300      	movne	r3, #0
 800370a:	b2db      	uxtb	r3, r3
 800370c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d102      	bne.n	8003720 <HAL_UART_IRQHandler+0x144>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d031      	beq.n	8003784 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f8c0 	bl	80038a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003730:	2b40      	cmp	r3, #64	; 0x40
 8003732:	d123      	bne.n	800377c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003742:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003748:	2b00      	cmp	r3, #0
 800374a:	d013      	beq.n	8003774 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003750:	4a21      	ldr	r2, [pc, #132]	; (80037d8 <HAL_UART_IRQHandler+0x1fc>)
 8003752:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003758:	4618      	mov	r0, r3
 800375a:	f7fd fd72 	bl	8001242 <HAL_DMA_Abort_IT>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d016      	beq.n	8003792 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800376e:	4610      	mov	r0, r2
 8003770:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003772:	e00e      	b.n	8003792 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f843 	bl	8003800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800377a:	e00a      	b.n	8003792 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f83f 	bl	8003800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003782:	e006      	b.n	8003792 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f83b 	bl	8003800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003790:	e01d      	b.n	80037ce <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003792:	bf00      	nop
    return;
 8003794:	e01b      	b.n	80037ce <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_UART_IRQHandler+0x1d6>
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f8ac 	bl	8003908 <UART_Transmit_IT>
    return;
 80037b0:	e00e      	b.n	80037d0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d009      	beq.n	80037d0 <HAL_UART_IRQHandler+0x1f4>
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d004      	beq.n	80037d0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f8f3 	bl	80039b2 <UART_EndTransmit_IT>
    return;
 80037cc:	e000      	b.n	80037d0 <HAL_UART_IRQHandler+0x1f4>
    return;
 80037ce:	bf00      	nop
  }
}
 80037d0:	3720      	adds	r7, #32
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	080038e1 	.word	0x080038e1

080037dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr

080037ee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr

08003800 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr

08003812 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	4613      	mov	r3, r2
 8003820:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003822:	e02c      	b.n	800387e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382a:	d028      	beq.n	800387e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d007      	beq.n	8003842 <UART_WaitOnFlagUntilTimeout+0x30>
 8003832:	f7fd fbd1 	bl	8000fd8 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	429a      	cmp	r2, r3
 8003840:	d21d      	bcs.n	800387e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003850:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695a      	ldr	r2, [r3, #20]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0201 	bic.w	r2, r2, #1
 8003860:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e00f      	b.n	800389e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4013      	ands	r3, r2
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	429a      	cmp	r2, r3
 800388c:	bf0c      	ite	eq
 800388e:	2301      	moveq	r3, #1
 8003890:	2300      	movne	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	429a      	cmp	r2, r3
 800389a:	d0c3      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038bc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr

080038e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f7ff ff80 	bl	8003800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003900:	bf00      	nop
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b21      	cmp	r3, #33	; 0x21
 800391a:	d144      	bne.n	80039a6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003924:	d11a      	bne.n	800395c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800393a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d105      	bne.n	8003950 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	1c9a      	adds	r2, r3, #2
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	621a      	str	r2, [r3, #32]
 800394e:	e00e      	b.n	800396e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	621a      	str	r2, [r3, #32]
 800395a:	e008      	b.n	800396e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	1c59      	adds	r1, r3, #1
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6211      	str	r1, [r2, #32]
 8003966:	781a      	ldrb	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29b      	uxth	r3, r3
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	4619      	mov	r1, r3
 800397c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10f      	bne.n	80039a2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003990:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	e000      	b.n	80039a8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80039a6:	2302      	movs	r3, #2
  }
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr

080039b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff ff02 	bl	80037dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b22      	cmp	r3, #34	; 0x22
 80039f4:	d171      	bne.n	8003ada <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039fe:	d123      	bne.n	8003a48 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10e      	bne.n	8003a2c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	1c9a      	adds	r2, r3, #2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	629a      	str	r2, [r3, #40]	; 0x28
 8003a2a:	e029      	b.n	8003a80 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	629a      	str	r2, [r3, #40]	; 0x28
 8003a46:	e01b      	b.n	8003a80 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6858      	ldr	r0, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	1c59      	adds	r1, r3, #1
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6291      	str	r1, [r2, #40]	; 0x28
 8003a60:	b2c2      	uxtb	r2, r0
 8003a62:	701a      	strb	r2, [r3, #0]
 8003a64:	e00c      	b.n	8003a80 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	1c58      	adds	r0, r3, #1
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	6288      	str	r0, [r1, #40]	; 0x28
 8003a78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d120      	bne.n	8003ad6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0220 	bic.w	r2, r2, #32
 8003aa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ab2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695a      	ldr	r2, [r3, #20]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fe8e 	bl	80037ee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e002      	b.n	8003adc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e000      	b.n	8003adc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003ada:	2302      	movs	r3, #2
  }
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b24:	f023 030c 	bic.w	r3, r3, #12
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a55      	ldr	r2, [pc, #340]	; (8003ca4 <UART_SetConfig+0x1c0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d103      	bne.n	8003b5a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b52:	f7fe faf7 	bl	8002144 <HAL_RCC_GetPCLK2Freq>
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	e002      	b.n	8003b60 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b5a:	f7fe fadf 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 8003b5e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b68:	d14c      	bne.n	8003c04 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	009a      	lsls	r2, r3, #2
 8003b74:	441a      	add	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	4a49      	ldr	r2, [pc, #292]	; (8003ca8 <UART_SetConfig+0x1c4>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	0119      	lsls	r1, r3, #4
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	009a      	lsls	r2, r3, #2
 8003b94:	441a      	add	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ba0:	4b41      	ldr	r3, [pc, #260]	; (8003ca8 <UART_SetConfig+0x1c4>)
 8003ba2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	2064      	movs	r0, #100	; 0x64
 8003baa:	fb00 f303 	mul.w	r3, r0, r3
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	3332      	adds	r3, #50	; 0x32
 8003bb4:	4a3c      	ldr	r2, [pc, #240]	; (8003ca8 <UART_SetConfig+0x1c4>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bc2:	4419      	add	r1, r3
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	009a      	lsls	r2, r3, #2
 8003bce:	441a      	add	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bda:	4b33      	ldr	r3, [pc, #204]	; (8003ca8 <UART_SetConfig+0x1c4>)
 8003bdc:	fba3 0302 	umull	r0, r3, r3, r2
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	2064      	movs	r0, #100	; 0x64
 8003be4:	fb00 f303 	mul.w	r3, r0, r3
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	3332      	adds	r3, #50	; 0x32
 8003bee:	4a2e      	ldr	r2, [pc, #184]	; (8003ca8 <UART_SetConfig+0x1c4>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	f003 0207 	and.w	r2, r3, #7
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	440a      	add	r2, r1
 8003c00:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c02:	e04a      	b.n	8003c9a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009a      	lsls	r2, r3, #2
 8003c0e:	441a      	add	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1a:	4a23      	ldr	r2, [pc, #140]	; (8003ca8 <UART_SetConfig+0x1c4>)
 8003c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	0119      	lsls	r1, r3, #4
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009a      	lsls	r2, r3, #2
 8003c2e:	441a      	add	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ca8 <UART_SetConfig+0x1c4>)
 8003c3c:	fba3 0302 	umull	r0, r3, r3, r2
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	2064      	movs	r0, #100	; 0x64
 8003c44:	fb00 f303 	mul.w	r3, r0, r3
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	3332      	adds	r3, #50	; 0x32
 8003c4e:	4a16      	ldr	r2, [pc, #88]	; (8003ca8 <UART_SetConfig+0x1c4>)
 8003c50:	fba2 2303 	umull	r2, r3, r2, r3
 8003c54:	095b      	lsrs	r3, r3, #5
 8003c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c5a:	4419      	add	r1, r3
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	009a      	lsls	r2, r3, #2
 8003c66:	441a      	add	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c72:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <UART_SetConfig+0x1c4>)
 8003c74:	fba3 0302 	umull	r0, r3, r3, r2
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	2064      	movs	r0, #100	; 0x64
 8003c7c:	fb00 f303 	mul.w	r3, r0, r3
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	3332      	adds	r3, #50	; 0x32
 8003c86:	4a08      	ldr	r2, [pc, #32]	; (8003ca8 <UART_SetConfig+0x1c4>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	f003 020f 	and.w	r2, r3, #15
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	440a      	add	r2, r1
 8003c98:	609a      	str	r2, [r3, #8]
}
 8003c9a:	bf00      	nop
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40013800 	.word	0x40013800
 8003ca8:	51eb851f 	.word	0x51eb851f

08003cac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cbe:	2b84      	cmp	r3, #132	; 0x84
 8003cc0:	d005      	beq.n	8003cce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003cc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4413      	add	r3, r2
 8003cca:	3303      	adds	r3, #3
 8003ccc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003cce:	68fb      	ldr	r3, [r7, #12]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003cde:	f000 fd59 	bl	8004794 <vTaskStartScheduler>
  
  return osOK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cea:	b089      	sub	sp, #36	; 0x24
 8003cec:	af04      	add	r7, sp, #16
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d020      	beq.n	8003d3c <osThreadCreate+0x54>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d01c      	beq.n	8003d3c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685c      	ldr	r4, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681d      	ldr	r5, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691e      	ldr	r6, [r3, #16]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff ffc9 	bl	8003cac <makeFreeRtosPriority>
 8003d1a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d24:	9202      	str	r2, [sp, #8]
 8003d26:	9301      	str	r3, [sp, #4]
 8003d28:	9100      	str	r1, [sp, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	4632      	mov	r2, r6
 8003d2e:	4629      	mov	r1, r5
 8003d30:	4620      	mov	r0, r4
 8003d32:	f000 fb71 	bl	8004418 <xTaskCreateStatic>
 8003d36:	4603      	mov	r3, r0
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	e01c      	b.n	8003d76 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685c      	ldr	r4, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d48:	b29e      	uxth	r6, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff ffab 	bl	8003cac <makeFreeRtosPriority>
 8003d56:	4602      	mov	r2, r0
 8003d58:	f107 030c 	add.w	r3, r7, #12
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	9200      	str	r2, [sp, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	4632      	mov	r2, r6
 8003d64:	4629      	mov	r1, r5
 8003d66:	4620      	mov	r0, r4
 8003d68:	f000 fbb2 	bl	80044d0 <xTaskCreate>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d001      	beq.n	8003d76 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	e000      	b.n	8003d78 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d76:	68fb      	ldr	r3, [r7, #12]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d80 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <osDelay+0x16>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	e000      	b.n	8003d98 <osDelay+0x18>
 8003d96:	2301      	movs	r3, #1
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fcc7 	bl	800472c <vTaskDelay>
  
  return osOK;
 8003d9e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f103 0208 	add.w	r2, r3, #8
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f103 0208 	add.w	r2, r3, #8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f103 0208 	add.w	r2, r3, #8
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr

08003de6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr

08003dfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b085      	sub	sp, #20
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	601a      	str	r2, [r3, #0]
}
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5a:	d103      	bne.n	8003e64 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	e00c      	b.n	8003e7e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3308      	adds	r3, #8
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	e002      	b.n	8003e72 <vListInsert+0x2e>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d2f6      	bcs.n	8003e6c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	601a      	str	r2, [r3, #0]
}
 8003eaa:	bf00      	nop
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr

08003eb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6892      	ldr	r2, [r2, #8]
 8003eca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6852      	ldr	r2, [r2, #4]
 8003ed4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d103      	bne.n	8003ee8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	1e5a      	subs	r2, r3, #1
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr
	...

08003f08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f2e:	bf00      	nop
 8003f30:	e7fe      	b.n	8003f30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f32:	f001 f96b 	bl	800520c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	68f9      	ldr	r1, [r7, #12]
 8003f40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	441a      	add	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	3b01      	subs	r3, #1
 8003f64:	68f9      	ldr	r1, [r7, #12]
 8003f66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	441a      	add	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	22ff      	movs	r2, #255	; 0xff
 8003f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	22ff      	movs	r2, #255	; 0xff
 8003f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d114      	bne.n	8003fb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01a      	beq.n	8003fc6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3310      	adds	r3, #16
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fe1f 	bl	8004bd8 <xTaskRemoveFromEventList>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d012      	beq.n	8003fc6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <xQueueGenericReset+0xcc>)
 8003fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	e009      	b.n	8003fc6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	3310      	adds	r3, #16
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff fef6 	bl	8003da8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	3324      	adds	r3, #36	; 0x24
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fef1 	bl	8003da8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003fc6:	f001 f951 	bl	800526c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003fca:	2301      	movs	r3, #1
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	e000ed04 	.word	0xe000ed04

08003fd8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	; 0x28
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10a      	bne.n	8004002 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	613b      	str	r3, [r7, #16]
}
 8003ffe:	bf00      	nop
 8004000:	e7fe      	b.n	8004000 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d102      	bne.n	800400e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004008:	2300      	movs	r3, #0
 800400a:	61fb      	str	r3, [r7, #28]
 800400c:	e004      	b.n	8004018 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	3348      	adds	r3, #72	; 0x48
 800401c:	4618      	mov	r0, r3
 800401e:	f001 f9f5 	bl	800540c <pvPortMalloc>
 8004022:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00f      	beq.n	800404a <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	3348      	adds	r3, #72	; 0x48
 800402e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004038:	79fa      	ldrb	r2, [r7, #7]
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	4613      	mov	r3, r2
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	68b9      	ldr	r1, [r7, #8]
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 f805 	bl	8004054 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800404a:	69bb      	ldr	r3, [r7, #24]
	}
 800404c:	4618      	mov	r0, r3
 800404e:	3720      	adds	r7, #32
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d103      	bne.n	8004070 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	e002      	b.n	8004076 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004082:	2101      	movs	r1, #1
 8004084:	69b8      	ldr	r0, [r7, #24]
 8004086:	f7ff ff3f 	bl	8003f08 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b08e      	sub	sp, #56	; 0x38
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	607a      	str	r2, [r7, #4]
 800409e:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10a      	bne.n	80040c0 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040bc:	bf00      	nop
 80040be:	e7fe      	b.n	80040be <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d103      	bne.n	80040ce <xQueueGenericSendFromISR+0x3c>
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <xQueueGenericSendFromISR+0x40>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <xQueueGenericSendFromISR+0x42>
 80040d2:	2300      	movs	r3, #0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	623b      	str	r3, [r7, #32]
}
 80040ea:	bf00      	nop
 80040ec:	e7fe      	b.n	80040ec <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d103      	bne.n	80040fc <xQueueGenericSendFromISR+0x6a>
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <xQueueGenericSendFromISR+0x6e>
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <xQueueGenericSendFromISR+0x70>
 8004100:	2300      	movs	r3, #0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	61fb      	str	r3, [r7, #28]
}
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800411c:	f001 f938 	bl	8005390 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004120:	f3ef 8211 	mrs	r2, BASEPRI
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	61ba      	str	r2, [r7, #24]
 8004136:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004138:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800413a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004144:	429a      	cmp	r2, r3
 8004146:	d302      	bcc.n	800414e <xQueueGenericSendFromISR+0xbc>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d12c      	bne.n	80041a8 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004154:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800415e:	f000 f8cb 	bl	80042f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004162:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416a:	d112      	bne.n	8004192 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	2b00      	cmp	r3, #0
 8004172:	d016      	beq.n	80041a2 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	3324      	adds	r3, #36	; 0x24
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fd2d 	bl	8004bd8 <xTaskRemoveFromEventList>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00e      	beq.n	80041a2 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	e007      	b.n	80041a2 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004192:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004196:	3301      	adds	r3, #1
 8004198:	b2db      	uxtb	r3, r3
 800419a:	b25a      	sxtb	r2, r3
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80041a2:	2301      	movs	r3, #1
 80041a4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80041a6:	e001      	b.n	80041ac <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	637b      	str	r3, [r7, #52]	; 0x34
 80041ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3738      	adds	r7, #56	; 0x38
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b08e      	sub	sp, #56	; 0x38
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	623b      	str	r3, [r7, #32]
}
 80041ea:	bf00      	nop
 80041ec:	e7fe      	b.n	80041ec <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d103      	bne.n	80041fc <xQueueReceiveFromISR+0x3a>
 80041f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <xQueueReceiveFromISR+0x3e>
 80041fc:	2301      	movs	r3, #1
 80041fe:	e000      	b.n	8004202 <xQueueReceiveFromISR+0x40>
 8004200:	2300      	movs	r3, #0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10a      	bne.n	800421c <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	61fb      	str	r3, [r7, #28]
}
 8004218:	bf00      	nop
 800421a:	e7fe      	b.n	800421a <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800421c:	f001 f8b8 	bl	8005390 <vPortValidateInterruptPriority>
	__asm volatile
 8004220:	f3ef 8211 	mrs	r2, BASEPRI
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	61ba      	str	r2, [r7, #24]
 8004236:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004238:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004240:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004244:	2b00      	cmp	r3, #0
 8004246:	d02f      	beq.n	80042a8 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800424e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004256:	f000 f8b9 	bl	80043cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	1e5a      	subs	r2, r3, #1
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004262:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426a:	d112      	bne.n	8004292 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d016      	beq.n	80042a2 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	3310      	adds	r3, #16
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fcad 	bl	8004bd8 <xTaskRemoveFromEventList>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00e      	beq.n	80042a2 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00b      	beq.n	80042a2 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	e007      	b.n	80042a2 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004296:	3301      	adds	r3, #1
 8004298:	b2db      	uxtb	r3, r3
 800429a:	b25a      	sxtb	r2, r3
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80042a2:	2301      	movs	r3, #1
 80042a4:	637b      	str	r3, [r7, #52]	; 0x34
 80042a6:	e001      	b.n	80042ac <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	637b      	str	r3, [r7, #52]	; 0x34
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ae:	613b      	str	r3, [r7, #16]
	__asm volatile
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f383 8811 	msr	BASEPRI, r3
}
 80042b6:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3738      	adds	r7, #56	; 0x38
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80042c2:	b480      	push	{r7}
 80042c4:	b085      	sub	sp, #20
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10a      	bne.n	80042e6 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	60bb      	str	r3, [r7, #8]
}
 80042e2:	bf00      	nop
 80042e4:	e7fe      	b.n	80042e4 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ea:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 80042ec:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr

080042f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10d      	bne.n	8004332 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d14d      	bne.n	80043ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fd94 	bl	8004e50 <xTaskPriorityDisinherit>
 8004328:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	605a      	str	r2, [r3, #4]
 8004330:	e043      	b.n	80043ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d119      	bne.n	800436c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6898      	ldr	r0, [r3, #8]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	461a      	mov	r2, r3
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	f004 fcb6 	bl	8008cb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	441a      	add	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	429a      	cmp	r2, r3
 8004360:	d32b      	bcc.n	80043ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	609a      	str	r2, [r3, #8]
 800436a:	e026      	b.n	80043ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	68d8      	ldr	r0, [r3, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	461a      	mov	r2, r3
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	f004 fc9c 	bl	8008cb4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	425b      	negs	r3, r3
 8004386:	441a      	add	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d207      	bcs.n	80043a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	425b      	negs	r3, r3
 80043a2:	441a      	add	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d105      	bne.n	80043ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80043c2:	697b      	ldr	r3, [r7, #20]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d018      	beq.n	8004410 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	441a      	add	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d303      	bcc.n	8004400 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68d9      	ldr	r1, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	461a      	mov	r2, r3
 800440a:	6838      	ldr	r0, [r7, #0]
 800440c:	f004 fc52 	bl	8008cb4 <memcpy>
	}
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08e      	sub	sp, #56	; 0x38
 800441c:	af04      	add	r7, sp, #16
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10a      	bne.n	8004442 <xTaskCreateStatic+0x2a>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	623b      	str	r3, [r7, #32]
}
 800443e:	bf00      	nop
 8004440:	e7fe      	b.n	8004440 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10a      	bne.n	800445e <xTaskCreateStatic+0x46>
	__asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	61fb      	str	r3, [r7, #28]
}
 800445a:	bf00      	nop
 800445c:	e7fe      	b.n	800445c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800445e:	2354      	movs	r3, #84	; 0x54
 8004460:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	2b54      	cmp	r3, #84	; 0x54
 8004466:	d00a      	beq.n	800447e <xTaskCreateStatic+0x66>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	61bb      	str	r3, [r7, #24]
}
 800447a:	bf00      	nop
 800447c:	e7fe      	b.n	800447c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004480:	2b00      	cmp	r3, #0
 8004482:	d01e      	beq.n	80044c2 <xTaskCreateStatic+0xaa>
 8004484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004486:	2b00      	cmp	r3, #0
 8004488:	d01b      	beq.n	80044c2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800448a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004492:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	2202      	movs	r2, #2
 8004498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800449c:	2300      	movs	r3, #0
 800449e:	9303      	str	r3, [sp, #12]
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	9302      	str	r3, [sp, #8]
 80044a4:	f107 0314 	add.w	r3, r7, #20
 80044a8:	9301      	str	r3, [sp, #4]
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f850 	bl	800455a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044bc:	f000 f8cc 	bl	8004658 <prvAddNewTaskToReadyList>
 80044c0:	e001      	b.n	80044c6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80044c6:	697b      	ldr	r3, [r7, #20]
	}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3728      	adds	r7, #40	; 0x28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08c      	sub	sp, #48	; 0x30
 80044d4:	af04      	add	r7, sp, #16
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	4613      	mov	r3, r2
 80044de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e0:	88fb      	ldrh	r3, [r7, #6]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 ff91 	bl	800540c <pvPortMalloc>
 80044ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00e      	beq.n	8004510 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80044f2:	2054      	movs	r0, #84	; 0x54
 80044f4:	f000 ff8a 	bl	800540c <pvPortMalloc>
 80044f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	631a      	str	r2, [r3, #48]	; 0x30
 8004506:	e005      	b.n	8004514 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004508:	6978      	ldr	r0, [r7, #20]
 800450a:	f001 f843 	bl	8005594 <vPortFree>
 800450e:	e001      	b.n	8004514 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004510:	2300      	movs	r3, #0
 8004512:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d017      	beq.n	800454a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004522:	88fa      	ldrh	r2, [r7, #6]
 8004524:	2300      	movs	r3, #0
 8004526:	9303      	str	r3, [sp, #12]
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	9302      	str	r3, [sp, #8]
 800452c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452e:	9301      	str	r3, [sp, #4]
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f80e 	bl	800455a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800453e:	69f8      	ldr	r0, [r7, #28]
 8004540:	f000 f88a 	bl	8004658 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004544:	2301      	movs	r3, #1
 8004546:	61bb      	str	r3, [r7, #24]
 8004548:	e002      	b.n	8004550 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800454a:	f04f 33ff 	mov.w	r3, #4294967295
 800454e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004550:	69bb      	ldr	r3, [r7, #24]
	}
 8004552:	4618      	mov	r0, r3
 8004554:	3720      	adds	r7, #32
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b088      	sub	sp, #32
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
 8004566:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004572:	3b01      	subs	r3, #1
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	f023 0307 	bic.w	r3, r3, #7
 8004580:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <prvInitialiseNewTask+0x48>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	617b      	str	r3, [r7, #20]
}
 800459e:	bf00      	nop
 80045a0:	e7fe      	b.n	80045a0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	e012      	b.n	80045ce <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	4413      	add	r3, r2
 80045ae:	7819      	ldrb	r1, [r3, #0]
 80045b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	4413      	add	r3, r2
 80045b6:	3334      	adds	r3, #52	; 0x34
 80045b8:	460a      	mov	r2, r1
 80045ba:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	4413      	add	r3, r2
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d006      	beq.n	80045d6 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	3301      	adds	r3, #1
 80045cc:	61fb      	str	r3, [r7, #28]
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	2b0f      	cmp	r3, #15
 80045d2:	d9e9      	bls.n	80045a8 <prvInitialiseNewTask+0x4e>
 80045d4:	e000      	b.n	80045d8 <prvInitialiseNewTask+0x7e>
		{
			break;
 80045d6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e2:	2b06      	cmp	r3, #6
 80045e4:	d901      	bls.n	80045ea <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045e6:	2306      	movs	r3, #6
 80045e8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045f4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	2200      	movs	r2, #0
 80045fa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	3304      	adds	r3, #4
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff fbf0 	bl	8003de6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	3318      	adds	r3, #24
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff fbeb 	bl	8003de6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004614:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	f1c3 0207 	rsb	r2, r3, #7
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004624:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	2200      	movs	r2, #0
 800462a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	68f9      	ldr	r1, [r7, #12]
 8004638:	69b8      	ldr	r0, [r7, #24]
 800463a:	f000 fcf5 	bl	8005028 <pxPortInitialiseStack>
 800463e:	4602      	mov	r2, r0
 8004640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004642:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800464a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800464e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004650:	bf00      	nop
 8004652:	3720      	adds	r7, #32
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004660:	f000 fdd4 	bl	800520c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004664:	4b2a      	ldr	r3, [pc, #168]	; (8004710 <prvAddNewTaskToReadyList+0xb8>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3301      	adds	r3, #1
 800466a:	4a29      	ldr	r2, [pc, #164]	; (8004710 <prvAddNewTaskToReadyList+0xb8>)
 800466c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800466e:	4b29      	ldr	r3, [pc, #164]	; (8004714 <prvAddNewTaskToReadyList+0xbc>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d109      	bne.n	800468a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004676:	4a27      	ldr	r2, [pc, #156]	; (8004714 <prvAddNewTaskToReadyList+0xbc>)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800467c:	4b24      	ldr	r3, [pc, #144]	; (8004710 <prvAddNewTaskToReadyList+0xb8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d110      	bne.n	80046a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004684:	f000 fb22 	bl	8004ccc <prvInitialiseTaskLists>
 8004688:	e00d      	b.n	80046a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800468a:	4b23      	ldr	r3, [pc, #140]	; (8004718 <prvAddNewTaskToReadyList+0xc0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004692:	4b20      	ldr	r3, [pc, #128]	; (8004714 <prvAddNewTaskToReadyList+0xbc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	429a      	cmp	r2, r3
 800469e:	d802      	bhi.n	80046a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80046a0:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <prvAddNewTaskToReadyList+0xbc>)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046a6:	4b1d      	ldr	r3, [pc, #116]	; (800471c <prvAddNewTaskToReadyList+0xc4>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3301      	adds	r3, #1
 80046ac:	4a1b      	ldr	r2, [pc, #108]	; (800471c <prvAddNewTaskToReadyList+0xc4>)
 80046ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	2201      	movs	r2, #1
 80046b6:	409a      	lsls	r2, r3
 80046b8:	4b19      	ldr	r3, [pc, #100]	; (8004720 <prvAddNewTaskToReadyList+0xc8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4313      	orrs	r3, r2
 80046be:	4a18      	ldr	r2, [pc, #96]	; (8004720 <prvAddNewTaskToReadyList+0xc8>)
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4a15      	ldr	r2, [pc, #84]	; (8004724 <prvAddNewTaskToReadyList+0xcc>)
 80046d0:	441a      	add	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3304      	adds	r3, #4
 80046d6:	4619      	mov	r1, r3
 80046d8:	4610      	mov	r0, r2
 80046da:	f7ff fb90 	bl	8003dfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80046de:	f000 fdc5 	bl	800526c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80046e2:	4b0d      	ldr	r3, [pc, #52]	; (8004718 <prvAddNewTaskToReadyList+0xc0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00e      	beq.n	8004708 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046ea:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <prvAddNewTaskToReadyList+0xbc>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d207      	bcs.n	8004708 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046f8:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <prvAddNewTaskToReadyList+0xd0>)
 80046fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004708:	bf00      	nop
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	20000420 	.word	0x20000420
 8004714:	20000320 	.word	0x20000320
 8004718:	2000042c 	.word	0x2000042c
 800471c:	2000043c 	.word	0x2000043c
 8004720:	20000428 	.word	0x20000428
 8004724:	20000324 	.word	0x20000324
 8004728:	e000ed04 	.word	0xe000ed04

0800472c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d017      	beq.n	800476e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800473e:	4b13      	ldr	r3, [pc, #76]	; (800478c <vTaskDelay+0x60>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <vTaskDelay+0x30>
	__asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	60bb      	str	r3, [r7, #8]
}
 8004758:	bf00      	nop
 800475a:	e7fe      	b.n	800475a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800475c:	f000 f87a 	bl	8004854 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004760:	2100      	movs	r1, #0
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fbfa 	bl	8004f5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004768:	f000 f882 	bl	8004870 <xTaskResumeAll>
 800476c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d107      	bne.n	8004784 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004774:	4b06      	ldr	r3, [pc, #24]	; (8004790 <vTaskDelay+0x64>)
 8004776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	20000448 	.word	0x20000448
 8004790:	e000ed04 	.word	0xe000ed04

08004794 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08a      	sub	sp, #40	; 0x28
 8004798:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047a2:	463a      	mov	r2, r7
 80047a4:	1d39      	adds	r1, r7, #4
 80047a6:	f107 0308 	add.w	r3, r7, #8
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fb fe6c 	bl	8000488 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80047b0:	6839      	ldr	r1, [r7, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	9202      	str	r2, [sp, #8]
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	2300      	movs	r3, #0
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	2300      	movs	r3, #0
 80047c0:	460a      	mov	r2, r1
 80047c2:	491e      	ldr	r1, [pc, #120]	; (800483c <vTaskStartScheduler+0xa8>)
 80047c4:	481e      	ldr	r0, [pc, #120]	; (8004840 <vTaskStartScheduler+0xac>)
 80047c6:	f7ff fe27 	bl	8004418 <xTaskCreateStatic>
 80047ca:	4603      	mov	r3, r0
 80047cc:	4a1d      	ldr	r2, [pc, #116]	; (8004844 <vTaskStartScheduler+0xb0>)
 80047ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80047d0:	4b1c      	ldr	r3, [pc, #112]	; (8004844 <vTaskStartScheduler+0xb0>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80047d8:	2301      	movs	r3, #1
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	e001      	b.n	80047e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d116      	bne.n	8004816 <vTaskStartScheduler+0x82>
	__asm volatile
 80047e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	613b      	str	r3, [r7, #16]
}
 80047fa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047fc:	4b12      	ldr	r3, [pc, #72]	; (8004848 <vTaskStartScheduler+0xb4>)
 80047fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004802:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004804:	4b11      	ldr	r3, [pc, #68]	; (800484c <vTaskStartScheduler+0xb8>)
 8004806:	2201      	movs	r2, #1
 8004808:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800480a:	4b11      	ldr	r3, [pc, #68]	; (8004850 <vTaskStartScheduler+0xbc>)
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004810:	f000 fc8a 	bl	8005128 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004814:	e00e      	b.n	8004834 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481c:	d10a      	bne.n	8004834 <vTaskStartScheduler+0xa0>
	__asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	60fb      	str	r3, [r7, #12]
}
 8004830:	bf00      	nop
 8004832:	e7fe      	b.n	8004832 <vTaskStartScheduler+0x9e>
}
 8004834:	bf00      	nop
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	08009fc4 	.word	0x08009fc4
 8004840:	08004c9d 	.word	0x08004c9d
 8004844:	20000444 	.word	0x20000444
 8004848:	20000440 	.word	0x20000440
 800484c:	2000042c 	.word	0x2000042c
 8004850:	20000424 	.word	0x20000424

08004854 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004858:	4b04      	ldr	r3, [pc, #16]	; (800486c <vTaskSuspendAll+0x18>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3301      	adds	r3, #1
 800485e:	4a03      	ldr	r2, [pc, #12]	; (800486c <vTaskSuspendAll+0x18>)
 8004860:	6013      	str	r3, [r2, #0]
}
 8004862:	bf00      	nop
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	20000448 	.word	0x20000448

08004870 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800487a:	2300      	movs	r3, #0
 800487c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800487e:	4b41      	ldr	r3, [pc, #260]	; (8004984 <xTaskResumeAll+0x114>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10a      	bne.n	800489c <xTaskResumeAll+0x2c>
	__asm volatile
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	603b      	str	r3, [r7, #0]
}
 8004898:	bf00      	nop
 800489a:	e7fe      	b.n	800489a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800489c:	f000 fcb6 	bl	800520c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80048a0:	4b38      	ldr	r3, [pc, #224]	; (8004984 <xTaskResumeAll+0x114>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	4a37      	ldr	r2, [pc, #220]	; (8004984 <xTaskResumeAll+0x114>)
 80048a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048aa:	4b36      	ldr	r3, [pc, #216]	; (8004984 <xTaskResumeAll+0x114>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d161      	bne.n	8004976 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048b2:	4b35      	ldr	r3, [pc, #212]	; (8004988 <xTaskResumeAll+0x118>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d05d      	beq.n	8004976 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048ba:	e02e      	b.n	800491a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80048bc:	4b33      	ldr	r3, [pc, #204]	; (800498c <xTaskResumeAll+0x11c>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	3318      	adds	r3, #24
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff faf3 	bl	8003eb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3304      	adds	r3, #4
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff faee 	bl	8003eb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	2201      	movs	r2, #1
 80048de:	409a      	lsls	r2, r3
 80048e0:	4b2b      	ldr	r3, [pc, #172]	; (8004990 <xTaskResumeAll+0x120>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	4a2a      	ldr	r2, [pc, #168]	; (8004990 <xTaskResumeAll+0x120>)
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ee:	4613      	mov	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4a27      	ldr	r2, [pc, #156]	; (8004994 <xTaskResumeAll+0x124>)
 80048f8:	441a      	add	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3304      	adds	r3, #4
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f7ff fa7c 	bl	8003dfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490a:	4b23      	ldr	r3, [pc, #140]	; (8004998 <xTaskResumeAll+0x128>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	429a      	cmp	r2, r3
 8004912:	d302      	bcc.n	800491a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004914:	4b21      	ldr	r3, [pc, #132]	; (800499c <xTaskResumeAll+0x12c>)
 8004916:	2201      	movs	r2, #1
 8004918:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800491a:	4b1c      	ldr	r3, [pc, #112]	; (800498c <xTaskResumeAll+0x11c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1cc      	bne.n	80048bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004928:	f000 fa6e 	bl	8004e08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800492c:	4b1c      	ldr	r3, [pc, #112]	; (80049a0 <xTaskResumeAll+0x130>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d010      	beq.n	800495a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004938:	f000 f836 	bl	80049a8 <xTaskIncrementTick>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004942:	4b16      	ldr	r3, [pc, #88]	; (800499c <xTaskResumeAll+0x12c>)
 8004944:	2201      	movs	r2, #1
 8004946:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3b01      	subs	r3, #1
 800494c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1f1      	bne.n	8004938 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004954:	4b12      	ldr	r3, [pc, #72]	; (80049a0 <xTaskResumeAll+0x130>)
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800495a:	4b10      	ldr	r3, [pc, #64]	; (800499c <xTaskResumeAll+0x12c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004962:	2301      	movs	r3, #1
 8004964:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004966:	4b0f      	ldr	r3, [pc, #60]	; (80049a4 <xTaskResumeAll+0x134>)
 8004968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004976:	f000 fc79 	bl	800526c <vPortExitCritical>

	return xAlreadyYielded;
 800497a:	68bb      	ldr	r3, [r7, #8]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	20000448 	.word	0x20000448
 8004988:	20000420 	.word	0x20000420
 800498c:	200003e0 	.word	0x200003e0
 8004990:	20000428 	.word	0x20000428
 8004994:	20000324 	.word	0x20000324
 8004998:	20000320 	.word	0x20000320
 800499c:	20000434 	.word	0x20000434
 80049a0:	20000430 	.word	0x20000430
 80049a4:	e000ed04 	.word	0xe000ed04

080049a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049ae:	2300      	movs	r3, #0
 80049b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049b2:	4b51      	ldr	r3, [pc, #324]	; (8004af8 <xTaskIncrementTick+0x150>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f040 808d 	bne.w	8004ad6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049bc:	4b4f      	ldr	r3, [pc, #316]	; (8004afc <xTaskIncrementTick+0x154>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3301      	adds	r3, #1
 80049c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049c4:	4a4d      	ldr	r2, [pc, #308]	; (8004afc <xTaskIncrementTick+0x154>)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d120      	bne.n	8004a12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80049d0:	4b4b      	ldr	r3, [pc, #300]	; (8004b00 <xTaskIncrementTick+0x158>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	603b      	str	r3, [r7, #0]
}
 80049ec:	bf00      	nop
 80049ee:	e7fe      	b.n	80049ee <xTaskIncrementTick+0x46>
 80049f0:	4b43      	ldr	r3, [pc, #268]	; (8004b00 <xTaskIncrementTick+0x158>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	4b43      	ldr	r3, [pc, #268]	; (8004b04 <xTaskIncrementTick+0x15c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a41      	ldr	r2, [pc, #260]	; (8004b00 <xTaskIncrementTick+0x158>)
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	4a41      	ldr	r2, [pc, #260]	; (8004b04 <xTaskIncrementTick+0x15c>)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	4b40      	ldr	r3, [pc, #256]	; (8004b08 <xTaskIncrementTick+0x160>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	4a3f      	ldr	r2, [pc, #252]	; (8004b08 <xTaskIncrementTick+0x160>)
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	f000 f9fb 	bl	8004e08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a12:	4b3e      	ldr	r3, [pc, #248]	; (8004b0c <xTaskIncrementTick+0x164>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d34d      	bcc.n	8004ab8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a1c:	4b38      	ldr	r3, [pc, #224]	; (8004b00 <xTaskIncrementTick+0x158>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <xTaskIncrementTick+0x82>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <xTaskIncrementTick+0x84>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d004      	beq.n	8004a3a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a30:	4b36      	ldr	r3, [pc, #216]	; (8004b0c <xTaskIncrementTick+0x164>)
 8004a32:	f04f 32ff 	mov.w	r2, #4294967295
 8004a36:	601a      	str	r2, [r3, #0]
					break;
 8004a38:	e03e      	b.n	8004ab8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a3a:	4b31      	ldr	r3, [pc, #196]	; (8004b00 <xTaskIncrementTick+0x158>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d203      	bcs.n	8004a5a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a52:	4a2e      	ldr	r2, [pc, #184]	; (8004b0c <xTaskIncrementTick+0x164>)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6013      	str	r3, [r2, #0]
						break;
 8004a58:	e02e      	b.n	8004ab8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff fa28 	bl	8003eb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d004      	beq.n	8004a76 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	3318      	adds	r3, #24
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7ff fa1f 	bl	8003eb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	409a      	lsls	r2, r3
 8004a7e:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <xTaskIncrementTick+0x168>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	4a22      	ldr	r2, [pc, #136]	; (8004b10 <xTaskIncrementTick+0x168>)
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4a1f      	ldr	r2, [pc, #124]	; (8004b14 <xTaskIncrementTick+0x16c>)
 8004a96:	441a      	add	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	f7ff f9ad 	bl	8003dfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	; (8004b18 <xTaskIncrementTick+0x170>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d3b4      	bcc.n	8004a1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ab6:	e7b1      	b.n	8004a1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ab8:	4b17      	ldr	r3, [pc, #92]	; (8004b18 <xTaskIncrementTick+0x170>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004abe:	4915      	ldr	r1, [pc, #84]	; (8004b14 <xTaskIncrementTick+0x16c>)
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d907      	bls.n	8004ae0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	e004      	b.n	8004ae0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004ad6:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <xTaskIncrementTick+0x174>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3301      	adds	r3, #1
 8004adc:	4a0f      	ldr	r2, [pc, #60]	; (8004b1c <xTaskIncrementTick+0x174>)
 8004ade:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <xTaskIncrementTick+0x178>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004aec:	697b      	ldr	r3, [r7, #20]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	20000448 	.word	0x20000448
 8004afc:	20000424 	.word	0x20000424
 8004b00:	200003d8 	.word	0x200003d8
 8004b04:	200003dc 	.word	0x200003dc
 8004b08:	20000438 	.word	0x20000438
 8004b0c:	20000440 	.word	0x20000440
 8004b10:	20000428 	.word	0x20000428
 8004b14:	20000324 	.word	0x20000324
 8004b18:	20000320 	.word	0x20000320
 8004b1c:	20000430 	.word	0x20000430
 8004b20:	20000434 	.word	0x20000434

08004b24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b2a:	4b26      	ldr	r3, [pc, #152]	; (8004bc4 <vTaskSwitchContext+0xa0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b32:	4b25      	ldr	r3, [pc, #148]	; (8004bc8 <vTaskSwitchContext+0xa4>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b38:	e03f      	b.n	8004bba <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004b3a:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <vTaskSwitchContext+0xa4>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b40:	4b22      	ldr	r3, [pc, #136]	; (8004bcc <vTaskSwitchContext+0xa8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	fab3 f383 	clz	r3, r3
 8004b4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004b4e:	7afb      	ldrb	r3, [r7, #11]
 8004b50:	f1c3 031f 	rsb	r3, r3, #31
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	491e      	ldr	r1, [pc, #120]	; (8004bd0 <vTaskSwitchContext+0xac>)
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	440b      	add	r3, r1
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10a      	bne.n	8004b80 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	607b      	str	r3, [r7, #4]
}
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <vTaskSwitchContext+0x5a>
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4a11      	ldr	r2, [pc, #68]	; (8004bd0 <vTaskSwitchContext+0xac>)
 8004b8c:	4413      	add	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	605a      	str	r2, [r3, #4]
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	3308      	adds	r3, #8
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d104      	bne.n	8004bb0 <vTaskSwitchContext+0x8c>
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	605a      	str	r2, [r3, #4]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	4a07      	ldr	r2, [pc, #28]	; (8004bd4 <vTaskSwitchContext+0xb0>)
 8004bb8:	6013      	str	r3, [r2, #0]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr
 8004bc4:	20000448 	.word	0x20000448
 8004bc8:	20000434 	.word	0x20000434
 8004bcc:	20000428 	.word	0x20000428
 8004bd0:	20000324 	.word	0x20000324
 8004bd4:	20000320 	.word	0x20000320

08004bd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	60fb      	str	r3, [r7, #12]
}
 8004c00:	bf00      	nop
 8004c02:	e7fe      	b.n	8004c02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	3318      	adds	r3, #24
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff f953 	bl	8003eb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c0e:	4b1d      	ldr	r3, [pc, #116]	; (8004c84 <xTaskRemoveFromEventList+0xac>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d11c      	bne.n	8004c50 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff f94a 	bl	8003eb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c24:	2201      	movs	r2, #1
 8004c26:	409a      	lsls	r2, r3
 8004c28:	4b17      	ldr	r3, [pc, #92]	; (8004c88 <xTaskRemoveFromEventList+0xb0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	4a16      	ldr	r2, [pc, #88]	; (8004c88 <xTaskRemoveFromEventList+0xb0>)
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c36:	4613      	mov	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4a13      	ldr	r2, [pc, #76]	; (8004c8c <xTaskRemoveFromEventList+0xb4>)
 8004c40:	441a      	add	r2, r3
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	3304      	adds	r3, #4
 8004c46:	4619      	mov	r1, r3
 8004c48:	4610      	mov	r0, r2
 8004c4a:	f7ff f8d8 	bl	8003dfe <vListInsertEnd>
 8004c4e:	e005      	b.n	8004c5c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	3318      	adds	r3, #24
 8004c54:	4619      	mov	r1, r3
 8004c56:	480e      	ldr	r0, [pc, #56]	; (8004c90 <xTaskRemoveFromEventList+0xb8>)
 8004c58:	f7ff f8d1 	bl	8003dfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <xTaskRemoveFromEventList+0xbc>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d905      	bls.n	8004c76 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c6e:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <xTaskRemoveFromEventList+0xc0>)
 8004c70:	2201      	movs	r2, #1
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	e001      	b.n	8004c7a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004c76:	2300      	movs	r3, #0
 8004c78:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004c7a:	697b      	ldr	r3, [r7, #20]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	20000448 	.word	0x20000448
 8004c88:	20000428 	.word	0x20000428
 8004c8c:	20000324 	.word	0x20000324
 8004c90:	200003e0 	.word	0x200003e0
 8004c94:	20000320 	.word	0x20000320
 8004c98:	20000434 	.word	0x20000434

08004c9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ca4:	f000 f852 	bl	8004d4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ca8:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <prvIdleTask+0x28>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d9f9      	bls.n	8004ca4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004cb0:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <prvIdleTask+0x2c>)
 8004cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cc0:	e7f0      	b.n	8004ca4 <prvIdleTask+0x8>
 8004cc2:	bf00      	nop
 8004cc4:	20000324 	.word	0x20000324
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	607b      	str	r3, [r7, #4]
 8004cd6:	e00c      	b.n	8004cf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4a12      	ldr	r2, [pc, #72]	; (8004d2c <prvInitialiseTaskLists+0x60>)
 8004ce4:	4413      	add	r3, r2
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff f85e 	bl	8003da8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	607b      	str	r3, [r7, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b06      	cmp	r3, #6
 8004cf6:	d9ef      	bls.n	8004cd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004cf8:	480d      	ldr	r0, [pc, #52]	; (8004d30 <prvInitialiseTaskLists+0x64>)
 8004cfa:	f7ff f855 	bl	8003da8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cfe:	480d      	ldr	r0, [pc, #52]	; (8004d34 <prvInitialiseTaskLists+0x68>)
 8004d00:	f7ff f852 	bl	8003da8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d04:	480c      	ldr	r0, [pc, #48]	; (8004d38 <prvInitialiseTaskLists+0x6c>)
 8004d06:	f7ff f84f 	bl	8003da8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d0a:	480c      	ldr	r0, [pc, #48]	; (8004d3c <prvInitialiseTaskLists+0x70>)
 8004d0c:	f7ff f84c 	bl	8003da8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d10:	480b      	ldr	r0, [pc, #44]	; (8004d40 <prvInitialiseTaskLists+0x74>)
 8004d12:	f7ff f849 	bl	8003da8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d16:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <prvInitialiseTaskLists+0x78>)
 8004d18:	4a05      	ldr	r2, [pc, #20]	; (8004d30 <prvInitialiseTaskLists+0x64>)
 8004d1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d1c:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <prvInitialiseTaskLists+0x7c>)
 8004d1e:	4a05      	ldr	r2, [pc, #20]	; (8004d34 <prvInitialiseTaskLists+0x68>)
 8004d20:	601a      	str	r2, [r3, #0]
}
 8004d22:	bf00      	nop
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000324 	.word	0x20000324
 8004d30:	200003b0 	.word	0x200003b0
 8004d34:	200003c4 	.word	0x200003c4
 8004d38:	200003e0 	.word	0x200003e0
 8004d3c:	200003f4 	.word	0x200003f4
 8004d40:	2000040c 	.word	0x2000040c
 8004d44:	200003d8 	.word	0x200003d8
 8004d48:	200003dc 	.word	0x200003dc

08004d4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d52:	e019      	b.n	8004d88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d54:	f000 fa5a 	bl	800520c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004d58:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <prvCheckTasksWaitingTermination+0x50>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3304      	adds	r3, #4
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff f8a5 	bl	8003eb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <prvCheckTasksWaitingTermination+0x54>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	4a0b      	ldr	r2, [pc, #44]	; (8004da0 <prvCheckTasksWaitingTermination+0x54>)
 8004d72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d74:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <prvCheckTasksWaitingTermination+0x58>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	4a0a      	ldr	r2, [pc, #40]	; (8004da4 <prvCheckTasksWaitingTermination+0x58>)
 8004d7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d7e:	f000 fa75 	bl	800526c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f810 	bl	8004da8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d88:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <prvCheckTasksWaitingTermination+0x58>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1e1      	bne.n	8004d54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	200003f4 	.word	0x200003f4
 8004da0:	20000420 	.word	0x20000420
 8004da4:	20000408 	.word	0x20000408

08004da8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d108      	bne.n	8004dcc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fbe8 	bl	8005594 <vPortFree>
				vPortFree( pxTCB );
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fbe5 	bl	8005594 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004dca:	e018      	b.n	8004dfe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d103      	bne.n	8004dde <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fbdc 	bl	8005594 <vPortFree>
	}
 8004ddc:	e00f      	b.n	8004dfe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d00a      	beq.n	8004dfe <prvDeleteTCB+0x56>
	__asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	60fb      	str	r3, [r7, #12]
}
 8004dfa:	bf00      	nop
 8004dfc:	e7fe      	b.n	8004dfc <prvDeleteTCB+0x54>
	}
 8004dfe:	bf00      	nop
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e0e:	4b0e      	ldr	r3, [pc, #56]	; (8004e48 <prvResetNextTaskUnblockTime+0x40>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <prvResetNextTaskUnblockTime+0x14>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <prvResetNextTaskUnblockTime+0x16>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d004      	beq.n	8004e2c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e22:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <prvResetNextTaskUnblockTime+0x44>)
 8004e24:	f04f 32ff 	mov.w	r2, #4294967295
 8004e28:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e2a:	e008      	b.n	8004e3e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <prvResetNextTaskUnblockTime+0x40>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <prvResetNextTaskUnblockTime+0x44>)
 8004e3c:	6013      	str	r3, [r2, #0]
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr
 8004e48:	200003d8 	.word	0x200003d8
 8004e4c:	20000440 	.word	0x20000440

08004e50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d06e      	beq.n	8004f44 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e66:	4b3a      	ldr	r3, [pc, #232]	; (8004f50 <xTaskPriorityDisinherit+0x100>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d00a      	beq.n	8004e86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	60fb      	str	r3, [r7, #12]
}
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10a      	bne.n	8004ea4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	60bb      	str	r3, [r7, #8]
}
 8004ea0:	bf00      	nop
 8004ea2:	e7fe      	b.n	8004ea2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ea8:	1e5a      	subs	r2, r3, #1
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d044      	beq.n	8004f44 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d140      	bne.n	8004f44 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe fff4 	bl	8003eb4 <uxListRemove>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d115      	bne.n	8004efe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed6:	491f      	ldr	r1, [pc, #124]	; (8004f54 <xTaskPriorityDisinherit+0x104>)
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10a      	bne.n	8004efe <xTaskPriorityDisinherit+0xae>
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	2201      	movs	r2, #1
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	43da      	mvns	r2, r3
 8004ef4:	4b18      	ldr	r3, [pc, #96]	; (8004f58 <xTaskPriorityDisinherit+0x108>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	4a17      	ldr	r2, [pc, #92]	; (8004f58 <xTaskPriorityDisinherit+0x108>)
 8004efc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	f1c3 0207 	rsb	r2, r3, #7
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	2201      	movs	r2, #1
 8004f18:	409a      	lsls	r2, r3
 8004f1a:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <xTaskPriorityDisinherit+0x108>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	4a0d      	ldr	r2, [pc, #52]	; (8004f58 <xTaskPriorityDisinherit+0x108>)
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4a08      	ldr	r2, [pc, #32]	; (8004f54 <xTaskPriorityDisinherit+0x104>)
 8004f32:	441a      	add	r2, r3
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f7fe ff5f 	bl	8003dfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f40:	2301      	movs	r3, #1
 8004f42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f44:	697b      	ldr	r3, [r7, #20]
	}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	20000320 	.word	0x20000320
 8004f54:	20000324 	.word	0x20000324
 8004f58:	20000428 	.word	0x20000428

08004f5c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f66:	4b29      	ldr	r3, [pc, #164]	; (800500c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f6c:	4b28      	ldr	r3, [pc, #160]	; (8005010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3304      	adds	r3, #4
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fe ff9e 	bl	8003eb4 <uxListRemove>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10b      	bne.n	8004f96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004f7e:	4b24      	ldr	r3, [pc, #144]	; (8005010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	2201      	movs	r2, #1
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43da      	mvns	r2, r3
 8004f8c:	4b21      	ldr	r3, [pc, #132]	; (8005014 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4013      	ands	r3, r2
 8004f92:	4a20      	ldr	r2, [pc, #128]	; (8005014 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9c:	d10a      	bne.n	8004fb4 <prvAddCurrentTaskToDelayedList+0x58>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d007      	beq.n	8004fb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fa4:	4b1a      	ldr	r3, [pc, #104]	; (8005010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	4619      	mov	r1, r3
 8004fac:	481a      	ldr	r0, [pc, #104]	; (8005018 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004fae:	f7fe ff26 	bl	8003dfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fb2:	e026      	b.n	8005002 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4413      	add	r3, r2
 8004fba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fbc:	4b14      	ldr	r3, [pc, #80]	; (8005010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d209      	bcs.n	8004fe0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fcc:	4b13      	ldr	r3, [pc, #76]	; (800501c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	4610      	mov	r0, r2
 8004fda:	f7fe ff33 	bl	8003e44 <vListInsert>
}
 8004fde:	e010      	b.n	8005002 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fe0:	4b0f      	ldr	r3, [pc, #60]	; (8005020 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	4619      	mov	r1, r3
 8004fec:	4610      	mov	r0, r2
 8004fee:	f7fe ff29 	bl	8003e44 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ff2:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d202      	bcs.n	8005002 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ffc:	4a09      	ldr	r2, [pc, #36]	; (8005024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	6013      	str	r3, [r2, #0]
}
 8005002:	bf00      	nop
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20000424 	.word	0x20000424
 8005010:	20000320 	.word	0x20000320
 8005014:	20000428 	.word	0x20000428
 8005018:	2000040c 	.word	0x2000040c
 800501c:	200003dc 	.word	0x200003dc
 8005020:	200003d8 	.word	0x200003d8
 8005024:	20000440 	.word	0x20000440

08005028 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3b04      	subs	r3, #4
 8005038:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3b04      	subs	r3, #4
 8005046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f023 0201 	bic.w	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	3b04      	subs	r3, #4
 8005056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005058:	4a08      	ldr	r2, [pc, #32]	; (800507c <pxPortInitialiseStack+0x54>)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	3b14      	subs	r3, #20
 8005062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3b20      	subs	r3, #32
 800506e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005070:	68fb      	ldr	r3, [r7, #12]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr
 800507c:	08005081 	.word	0x08005081

08005080 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005086:	2300      	movs	r3, #0
 8005088:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800508a:	4b12      	ldr	r3, [pc, #72]	; (80050d4 <prvTaskExitError+0x54>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005092:	d00a      	beq.n	80050aa <prvTaskExitError+0x2a>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	60fb      	str	r3, [r7, #12]
}
 80050a6:	bf00      	nop
 80050a8:	e7fe      	b.n	80050a8 <prvTaskExitError+0x28>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	60bb      	str	r3, [r7, #8]
}
 80050bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050be:	bf00      	nop
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0fc      	beq.n	80050c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050c6:	bf00      	nop
 80050c8:	bf00      	nop
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc80      	pop	{r7}
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	2000000c 	.word	0x2000000c
	...

080050e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050e0:	4b07      	ldr	r3, [pc, #28]	; (8005100 <pxCurrentTCBConst2>)
 80050e2:	6819      	ldr	r1, [r3, #0]
 80050e4:	6808      	ldr	r0, [r1, #0]
 80050e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80050ea:	f380 8809 	msr	PSP, r0
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f04f 0000 	mov.w	r0, #0
 80050f6:	f380 8811 	msr	BASEPRI, r0
 80050fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80050fe:	4770      	bx	lr

08005100 <pxCurrentTCBConst2>:
 8005100:	20000320 	.word	0x20000320
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop

08005108 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005108:	4806      	ldr	r0, [pc, #24]	; (8005124 <prvPortStartFirstTask+0x1c>)
 800510a:	6800      	ldr	r0, [r0, #0]
 800510c:	6800      	ldr	r0, [r0, #0]
 800510e:	f380 8808 	msr	MSP, r0
 8005112:	b662      	cpsie	i
 8005114:	b661      	cpsie	f
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	df00      	svc	0
 8005120:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005122:	bf00      	nop
 8005124:	e000ed08 	.word	0xe000ed08

08005128 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800512e:	4b32      	ldr	r3, [pc, #200]	; (80051f8 <xPortStartScheduler+0xd0>)
 8005130:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	22ff      	movs	r2, #255	; 0xff
 800513e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	b2db      	uxtb	r3, r3
 8005146:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005150:	b2da      	uxtb	r2, r3
 8005152:	4b2a      	ldr	r3, [pc, #168]	; (80051fc <xPortStartScheduler+0xd4>)
 8005154:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005156:	4b2a      	ldr	r3, [pc, #168]	; (8005200 <xPortStartScheduler+0xd8>)
 8005158:	2207      	movs	r2, #7
 800515a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800515c:	e009      	b.n	8005172 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800515e:	4b28      	ldr	r3, [pc, #160]	; (8005200 <xPortStartScheduler+0xd8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3b01      	subs	r3, #1
 8005164:	4a26      	ldr	r2, [pc, #152]	; (8005200 <xPortStartScheduler+0xd8>)
 8005166:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005168:	78fb      	ldrb	r3, [r7, #3]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	b2db      	uxtb	r3, r3
 8005170:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005172:	78fb      	ldrb	r3, [r7, #3]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517a:	2b80      	cmp	r3, #128	; 0x80
 800517c:	d0ef      	beq.n	800515e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800517e:	4b20      	ldr	r3, [pc, #128]	; (8005200 <xPortStartScheduler+0xd8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f1c3 0307 	rsb	r3, r3, #7
 8005186:	2b04      	cmp	r3, #4
 8005188:	d00a      	beq.n	80051a0 <xPortStartScheduler+0x78>
	__asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	60bb      	str	r3, [r7, #8]
}
 800519c:	bf00      	nop
 800519e:	e7fe      	b.n	800519e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051a0:	4b17      	ldr	r3, [pc, #92]	; (8005200 <xPortStartScheduler+0xd8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	021b      	lsls	r3, r3, #8
 80051a6:	4a16      	ldr	r2, [pc, #88]	; (8005200 <xPortStartScheduler+0xd8>)
 80051a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051aa:	4b15      	ldr	r3, [pc, #84]	; (8005200 <xPortStartScheduler+0xd8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051b2:	4a13      	ldr	r2, [pc, #76]	; (8005200 <xPortStartScheduler+0xd8>)
 80051b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051be:	4b11      	ldr	r3, [pc, #68]	; (8005204 <xPortStartScheduler+0xdc>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a10      	ldr	r2, [pc, #64]	; (8005204 <xPortStartScheduler+0xdc>)
 80051c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051ca:	4b0e      	ldr	r3, [pc, #56]	; (8005204 <xPortStartScheduler+0xdc>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a0d      	ldr	r2, [pc, #52]	; (8005204 <xPortStartScheduler+0xdc>)
 80051d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051d6:	f000 f8b9 	bl	800534c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051da:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <xPortStartScheduler+0xe0>)
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051e0:	f7ff ff92 	bl	8005108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051e4:	f7ff fc9e 	bl	8004b24 <vTaskSwitchContext>
	prvTaskExitError();
 80051e8:	f7ff ff4a 	bl	8005080 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	e000e400 	.word	0xe000e400
 80051fc:	2000044c 	.word	0x2000044c
 8005200:	20000450 	.word	0x20000450
 8005204:	e000ed20 	.word	0xe000ed20
 8005208:	2000000c 	.word	0x2000000c

0800520c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	607b      	str	r3, [r7, #4]
}
 8005224:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005226:	4b0f      	ldr	r3, [pc, #60]	; (8005264 <vPortEnterCritical+0x58>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	3301      	adds	r3, #1
 800522c:	4a0d      	ldr	r2, [pc, #52]	; (8005264 <vPortEnterCritical+0x58>)
 800522e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005230:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <vPortEnterCritical+0x58>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d10f      	bne.n	8005258 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005238:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <vPortEnterCritical+0x5c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <vPortEnterCritical+0x4c>
	__asm volatile
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	603b      	str	r3, [r7, #0]
}
 8005254:	bf00      	nop
 8005256:	e7fe      	b.n	8005256 <vPortEnterCritical+0x4a>
	}
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	2000000c 	.word	0x2000000c
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005272:	4b11      	ldr	r3, [pc, #68]	; (80052b8 <vPortExitCritical+0x4c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <vPortExitCritical+0x24>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	607b      	str	r3, [r7, #4]
}
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005290:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <vPortExitCritical+0x4c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3b01      	subs	r3, #1
 8005296:	4a08      	ldr	r2, [pc, #32]	; (80052b8 <vPortExitCritical+0x4c>)
 8005298:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800529a:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <vPortExitCritical+0x4c>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d105      	bne.n	80052ae <vPortExitCritical+0x42>
 80052a2:	2300      	movs	r3, #0
 80052a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	f383 8811 	msr	BASEPRI, r3
}
 80052ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr
 80052b8:	2000000c 	.word	0x2000000c
 80052bc:	00000000 	.word	0x00000000

080052c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052c0:	f3ef 8009 	mrs	r0, PSP
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <pxCurrentTCBConst>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052d0:	6010      	str	r0, [r2, #0]
 80052d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80052d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80052da:	f380 8811 	msr	BASEPRI, r0
 80052de:	f7ff fc21 	bl	8004b24 <vTaskSwitchContext>
 80052e2:	f04f 0000 	mov.w	r0, #0
 80052e6:	f380 8811 	msr	BASEPRI, r0
 80052ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80052ee:	6819      	ldr	r1, [r3, #0]
 80052f0:	6808      	ldr	r0, [r1, #0]
 80052f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052f6:	f380 8809 	msr	PSP, r0
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	4770      	bx	lr

08005300 <pxCurrentTCBConst>:
 8005300:	20000320 	.word	0x20000320
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop

08005308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	607b      	str	r3, [r7, #4]
}
 8005320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005322:	f7ff fb41 	bl	80049a8 <xTaskIncrementTick>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800532c:	4b06      	ldr	r3, [pc, #24]	; (8005348 <SysTick_Handler+0x40>)
 800532e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	2300      	movs	r3, #0
 8005336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	f383 8811 	msr	BASEPRI, r3
}
 800533e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005340:	bf00      	nop
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	e000ed04 	.word	0xe000ed04

0800534c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005350:	4b0a      	ldr	r3, [pc, #40]	; (800537c <vPortSetupTimerInterrupt+0x30>)
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005356:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <vPortSetupTimerInterrupt+0x34>)
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800535c:	4b09      	ldr	r3, [pc, #36]	; (8005384 <vPortSetupTimerInterrupt+0x38>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a09      	ldr	r2, [pc, #36]	; (8005388 <vPortSetupTimerInterrupt+0x3c>)
 8005362:	fba2 2303 	umull	r2, r3, r2, r3
 8005366:	099b      	lsrs	r3, r3, #6
 8005368:	4a08      	ldr	r2, [pc, #32]	; (800538c <vPortSetupTimerInterrupt+0x40>)
 800536a:	3b01      	subs	r3, #1
 800536c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800536e:	4b03      	ldr	r3, [pc, #12]	; (800537c <vPortSetupTimerInterrupt+0x30>)
 8005370:	2207      	movs	r2, #7
 8005372:	601a      	str	r2, [r3, #0]
}
 8005374:	bf00      	nop
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr
 800537c:	e000e010 	.word	0xe000e010
 8005380:	e000e018 	.word	0xe000e018
 8005384:	20000000 	.word	0x20000000
 8005388:	10624dd3 	.word	0x10624dd3
 800538c:	e000e014 	.word	0xe000e014

08005390 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005396:	f3ef 8305 	mrs	r3, IPSR
 800539a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b0f      	cmp	r3, #15
 80053a0:	d914      	bls.n	80053cc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053a2:	4a16      	ldr	r2, [pc, #88]	; (80053fc <vPortValidateInterruptPriority+0x6c>)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4413      	add	r3, r2
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053ac:	4b14      	ldr	r3, [pc, #80]	; (8005400 <vPortValidateInterruptPriority+0x70>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	7afa      	ldrb	r2, [r7, #11]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d20a      	bcs.n	80053cc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	607b      	str	r3, [r7, #4]
}
 80053c8:	bf00      	nop
 80053ca:	e7fe      	b.n	80053ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053cc:	4b0d      	ldr	r3, [pc, #52]	; (8005404 <vPortValidateInterruptPriority+0x74>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053d4:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <vPortValidateInterruptPriority+0x78>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d90a      	bls.n	80053f2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	603b      	str	r3, [r7, #0]
}
 80053ee:	bf00      	nop
 80053f0:	e7fe      	b.n	80053f0 <vPortValidateInterruptPriority+0x60>
	}
 80053f2:	bf00      	nop
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr
 80053fc:	e000e3f0 	.word	0xe000e3f0
 8005400:	2000044c 	.word	0x2000044c
 8005404:	e000ed0c 	.word	0xe000ed0c
 8005408:	20000450 	.word	0x20000450

0800540c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08a      	sub	sp, #40	; 0x28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005414:	2300      	movs	r3, #0
 8005416:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005418:	f7ff fa1c 	bl	8004854 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800541c:	4b58      	ldr	r3, [pc, #352]	; (8005580 <pvPortMalloc+0x174>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005424:	f000 f910 	bl	8005648 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005428:	4b56      	ldr	r3, [pc, #344]	; (8005584 <pvPortMalloc+0x178>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4013      	ands	r3, r2
 8005430:	2b00      	cmp	r3, #0
 8005432:	f040 808e 	bne.w	8005552 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01d      	beq.n	8005478 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800543c:	2208      	movs	r2, #8
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4413      	add	r3, r2
 8005442:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	2b00      	cmp	r3, #0
 800544c:	d014      	beq.n	8005478 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f023 0307 	bic.w	r3, r3, #7
 8005454:	3308      	adds	r3, #8
 8005456:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <pvPortMalloc+0x6c>
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	617b      	str	r3, [r7, #20]
}
 8005474:	bf00      	nop
 8005476:	e7fe      	b.n	8005476 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d069      	beq.n	8005552 <pvPortMalloc+0x146>
 800547e:	4b42      	ldr	r3, [pc, #264]	; (8005588 <pvPortMalloc+0x17c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	d864      	bhi.n	8005552 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005488:	4b40      	ldr	r3, [pc, #256]	; (800558c <pvPortMalloc+0x180>)
 800548a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800548c:	4b3f      	ldr	r3, [pc, #252]	; (800558c <pvPortMalloc+0x180>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005492:	e004      	b.n	800549e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d903      	bls.n	80054b0 <pvPortMalloc+0xa4>
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1f1      	bne.n	8005494 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054b0:	4b33      	ldr	r3, [pc, #204]	; (8005580 <pvPortMalloc+0x174>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d04b      	beq.n	8005552 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2208      	movs	r2, #8
 80054c0:	4413      	add	r3, r2
 80054c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	1ad2      	subs	r2, r2, r3
 80054d4:	2308      	movs	r3, #8
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	429a      	cmp	r2, r3
 80054da:	d91f      	bls.n	800551c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4413      	add	r3, r2
 80054e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <pvPortMalloc+0xf8>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	613b      	str	r3, [r7, #16]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	1ad2      	subs	r2, r2, r3
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005516:	69b8      	ldr	r0, [r7, #24]
 8005518:	f000 f8f8 	bl	800570c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800551c:	4b1a      	ldr	r3, [pc, #104]	; (8005588 <pvPortMalloc+0x17c>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	4a18      	ldr	r2, [pc, #96]	; (8005588 <pvPortMalloc+0x17c>)
 8005528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800552a:	4b17      	ldr	r3, [pc, #92]	; (8005588 <pvPortMalloc+0x17c>)
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	4b18      	ldr	r3, [pc, #96]	; (8005590 <pvPortMalloc+0x184>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d203      	bcs.n	800553e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005536:	4b14      	ldr	r3, [pc, #80]	; (8005588 <pvPortMalloc+0x17c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a15      	ldr	r2, [pc, #84]	; (8005590 <pvPortMalloc+0x184>)
 800553c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	4b10      	ldr	r3, [pc, #64]	; (8005584 <pvPortMalloc+0x178>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	431a      	orrs	r2, r3
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005552:	f7ff f98d 	bl	8004870 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <pvPortMalloc+0x16a>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	60fb      	str	r3, [r7, #12]
}
 8005572:	bf00      	nop
 8005574:	e7fe      	b.n	8005574 <pvPortMalloc+0x168>
	return pvReturn;
 8005576:	69fb      	ldr	r3, [r7, #28]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3728      	adds	r7, #40	; 0x28
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	2000105c 	.word	0x2000105c
 8005584:	20001068 	.word	0x20001068
 8005588:	20001060 	.word	0x20001060
 800558c:	20001054 	.word	0x20001054
 8005590:	20001064 	.word	0x20001064

08005594 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d048      	beq.n	8005638 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055a6:	2308      	movs	r3, #8
 80055a8:	425b      	negs	r3, r3
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4413      	add	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	4b21      	ldr	r3, [pc, #132]	; (8005640 <vPortFree+0xac>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4013      	ands	r3, r2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10a      	bne.n	80055d8 <vPortFree+0x44>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	60fb      	str	r3, [r7, #12]
}
 80055d4:	bf00      	nop
 80055d6:	e7fe      	b.n	80055d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00a      	beq.n	80055f6 <vPortFree+0x62>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	60bb      	str	r3, [r7, #8]
}
 80055f2:	bf00      	nop
 80055f4:	e7fe      	b.n	80055f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	4b11      	ldr	r3, [pc, #68]	; (8005640 <vPortFree+0xac>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4013      	ands	r3, r2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d019      	beq.n	8005638 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d115      	bne.n	8005638 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <vPortFree+0xac>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	43db      	mvns	r3, r3
 8005616:	401a      	ands	r2, r3
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800561c:	f7ff f91a 	bl	8004854 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	4b07      	ldr	r3, [pc, #28]	; (8005644 <vPortFree+0xb0>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4413      	add	r3, r2
 800562a:	4a06      	ldr	r2, [pc, #24]	; (8005644 <vPortFree+0xb0>)
 800562c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800562e:	6938      	ldr	r0, [r7, #16]
 8005630:	f000 f86c 	bl	800570c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005634:	f7ff f91c 	bl	8004870 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005638:	bf00      	nop
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	20001068 	.word	0x20001068
 8005644:	20001060 	.word	0x20001060

08005648 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800564e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005652:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005654:	4b27      	ldr	r3, [pc, #156]	; (80056f4 <prvHeapInit+0xac>)
 8005656:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00c      	beq.n	800567c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3307      	adds	r3, #7
 8005666:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0307 	bic.w	r3, r3, #7
 800566e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	4a1f      	ldr	r2, [pc, #124]	; (80056f4 <prvHeapInit+0xac>)
 8005678:	4413      	add	r3, r2
 800567a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005680:	4a1d      	ldr	r2, [pc, #116]	; (80056f8 <prvHeapInit+0xb0>)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005686:	4b1c      	ldr	r3, [pc, #112]	; (80056f8 <prvHeapInit+0xb0>)
 8005688:	2200      	movs	r2, #0
 800568a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	4413      	add	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005694:	2208      	movs	r2, #8
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	1a9b      	subs	r3, r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0307 	bic.w	r3, r3, #7
 80056a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4a15      	ldr	r2, [pc, #84]	; (80056fc <prvHeapInit+0xb4>)
 80056a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056aa:	4b14      	ldr	r3, [pc, #80]	; (80056fc <prvHeapInit+0xb4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2200      	movs	r2, #0
 80056b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056b2:	4b12      	ldr	r3, [pc, #72]	; (80056fc <prvHeapInit+0xb4>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	1ad2      	subs	r2, r2, r3
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056c8:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <prvHeapInit+0xb4>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	4a0a      	ldr	r2, [pc, #40]	; (8005700 <prvHeapInit+0xb8>)
 80056d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	4a09      	ldr	r2, [pc, #36]	; (8005704 <prvHeapInit+0xbc>)
 80056de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056e0:	4b09      	ldr	r3, [pc, #36]	; (8005708 <prvHeapInit+0xc0>)
 80056e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056e6:	601a      	str	r2, [r3, #0]
}
 80056e8:	bf00      	nop
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	20000454 	.word	0x20000454
 80056f8:	20001054 	.word	0x20001054
 80056fc:	2000105c 	.word	0x2000105c
 8005700:	20001064 	.word	0x20001064
 8005704:	20001060 	.word	0x20001060
 8005708:	20001068 	.word	0x20001068

0800570c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005714:	4b27      	ldr	r3, [pc, #156]	; (80057b4 <prvInsertBlockIntoFreeList+0xa8>)
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	e002      	b.n	8005720 <prvInsertBlockIntoFreeList+0x14>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	429a      	cmp	r2, r3
 8005728:	d8f7      	bhi.n	800571a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	4413      	add	r3, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	429a      	cmp	r2, r3
 800573a:	d108      	bne.n	800574e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	441a      	add	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	441a      	add	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d118      	bne.n	8005794 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	4b14      	ldr	r3, [pc, #80]	; (80057b8 <prvInsertBlockIntoFreeList+0xac>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d00d      	beq.n	800578a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	441a      	add	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	e008      	b.n	800579c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800578a:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <prvInsertBlockIntoFreeList+0xac>)
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	e003      	b.n	800579c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d002      	beq.n	80057aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057aa:	bf00      	nop
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr
 80057b4:	20001054 	.word	0x20001054
 80057b8:	2000105c 	.word	0x2000105c

080057bc <SX1276Init>:
/*
 * Radio driver functions implementation
 */

void SX1276Init( RadioEvents_t *events )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  // my
    SX1276.Reset.port = SX1276_RST_GPIO_Port;
 80057c4:	4b2e      	ldr	r3, [pc, #184]	; (8005880 <SX1276Init+0xc4>)
 80057c6:	4a2f      	ldr	r2, [pc, #188]	; (8005884 <SX1276Init+0xc8>)
 80057c8:	601a      	str	r2, [r3, #0]
    SX1276.Reset.pin = SX1276_RST_Pin;
 80057ca:	4b2d      	ldr	r3, [pc, #180]	; (8005880 <SX1276Init+0xc4>)
 80057cc:	2201      	movs	r2, #1
 80057ce:	809a      	strh	r2, [r3, #4]
//    SX1276.Spi.Nss.port = SPI2_NSS_GPIO_Port;
//    SX1276.Spi.Nss.pin  = SPI2_NSS_Pin;
//
//    SX1276.Spi.SpiId = SPI_2;

	SX1276.Spi.Nss.port = SPI1_NSS_GPIO_Port;
 80057d0:	4b2b      	ldr	r3, [pc, #172]	; (8005880 <SX1276Init+0xc4>)
 80057d2:	4a2d      	ldr	r2, [pc, #180]	; (8005888 <SX1276Init+0xcc>)
 80057d4:	63da      	str	r2, [r3, #60]	; 0x3c
	SX1276.Spi.Nss.pin = SPI1_NSS_Pin;
 80057d6:	4b2a      	ldr	r3, [pc, #168]	; (8005880 <SX1276Init+0xc4>)
 80057d8:	2210      	movs	r2, #16
 80057da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	SX1276.Spi.SpiId = SPI_1;
 80057de:	4b28      	ldr	r3, [pc, #160]	; (8005880 <SX1276Init+0xc4>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    uint8_t i;

    RadioEvents = events;
 80057e6:	4a29      	ldr	r2, [pc, #164]	; (800588c <SX1276Init+0xd0>)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80057ec:	4928      	ldr	r1, [pc, #160]	; (8005890 <SX1276Init+0xd4>)
 80057ee:	4829      	ldr	r0, [pc, #164]	; (8005894 <SX1276Init+0xd8>)
 80057f0:	f002 ffd6 	bl	80087a0 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80057f4:	4926      	ldr	r1, [pc, #152]	; (8005890 <SX1276Init+0xd4>)
 80057f6:	4828      	ldr	r0, [pc, #160]	; (8005898 <SX1276Init+0xdc>)
 80057f8:	f002 ffd2 	bl	80087a0 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80057fc:	4924      	ldr	r1, [pc, #144]	; (8005890 <SX1276Init+0xd4>)
 80057fe:	4827      	ldr	r0, [pc, #156]	; (800589c <SX1276Init+0xe0>)
 8005800:	f002 ffce 	bl	80087a0 <TimerInit>

    SX1276Reset( );
 8005804:	f002 fe58 	bl	80084b8 <SX1276Reset>

    RxChainCalibration( );
 8005808:	f000 f8fa 	bl	8005a00 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800580c:	2000      	movs	r0, #0
 800580e:	f001 f8b3 	bl	8006978 <SX1276SetOpMode>

    SX1276IoInit();
 8005812:	f002 fde7 	bl	80083e4 <SX1276IoInit>

    SX1276IoIrqInit( DioIrq );
 8005816:	4822      	ldr	r0, [pc, #136]	; (80058a0 <SX1276Init+0xe4>)
 8005818:	f002 fe18 	bl	800844c <SX1276IoIrqInit>


    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800581c:	2300      	movs	r3, #0
 800581e:	73fb      	strb	r3, [r7, #15]
 8005820:	e020      	b.n	8005864 <SX1276Init+0xa8>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 8005822:	7bfa      	ldrb	r2, [r7, #15]
 8005824:	491f      	ldr	r1, [pc, #124]	; (80058a4 <SX1276Init+0xe8>)
 8005826:	4613      	mov	r3, r2
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	4413      	add	r3, r2
 800582c:	440b      	add	r3, r1
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	4618      	mov	r0, r3
 8005832:	f001 f8cd 	bl	80069d0 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8005836:	7bfa      	ldrb	r2, [r7, #15]
 8005838:	491a      	ldr	r1, [pc, #104]	; (80058a4 <SX1276Init+0xe8>)
 800583a:	4613      	mov	r3, r2
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	4413      	add	r3, r2
 8005840:	440b      	add	r3, r1
 8005842:	3301      	adds	r3, #1
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	7bfa      	ldrb	r2, [r7, #15]
 800584a:	4916      	ldr	r1, [pc, #88]	; (80058a4 <SX1276Init+0xe8>)
 800584c:	4613      	mov	r3, r2
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	4413      	add	r3, r2
 8005852:	440b      	add	r3, r1
 8005854:	3302      	adds	r3, #2
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	4619      	mov	r1, r3
 800585a:	f001 f911 	bl	8006a80 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	3301      	adds	r3, #1
 8005862:	73fb      	strb	r3, [r7, #15]
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	2b0f      	cmp	r3, #15
 8005868:	d9db      	bls.n	8005822 <SX1276Init+0x66>
    }

    SX1276SetModem( MODEM_FSK );
 800586a:	2000      	movs	r0, #0
 800586c:	f001 f8b0 	bl	80069d0 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 8005870:	4b03      	ldr	r3, [pc, #12]	; (8005880 <SX1276Init+0xc4>)
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8005878:	bf00      	nop
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	200013bc 	.word	0x200013bc
 8005884:	40020800 	.word	0x40020800
 8005888:	40020000 	.word	0x40020000
 800588c:	2000106c 	.word	0x2000106c
 8005890:	08006f09 	.word	0x08006f09
 8005894:	2000138c 	.word	0x2000138c
 8005898:	20001464 	.word	0x20001464
 800589c:	200013a4 	.word	0x200013a4
 80058a0:	20000010 	.word	0x20000010
 80058a4:	0800a058 	.word	0x0800a058

080058a8 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 80058ac:	4b03      	ldr	r3, [pc, #12]	; (80058bc <SX1276GetStatus+0x14>)
 80058ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bc80      	pop	{r7}
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	200013bc 	.word	0x200013bc

080058c0 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
    uint32_t freqInPllSteps = SX1276ConvertFreqInHzToPllStep( freq );
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f001 f9f5 	bl	8006cb8 <SX1276ConvertFreqInHzToPllStep>
 80058ce:	60f8      	str	r0, [r7, #12]

    SX1276.Settings.Channel = freq;
 80058d0:	4a0d      	ldr	r2, [pc, #52]	; (8005908 <SX1276SetChannel+0x48>)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6493      	str	r3, [r2, #72]	; 0x48

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	0c1b      	lsrs	r3, r3, #16
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	4619      	mov	r1, r3
 80058de:	2006      	movs	r0, #6
 80058e0:	f001 f8ce 	bl	8006a80 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	0a1b      	lsrs	r3, r3, #8
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	4619      	mov	r1, r3
 80058ec:	2007      	movs	r0, #7
 80058ee:	f001 f8c7 	bl	8006a80 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	4619      	mov	r1, r3
 80058f8:	2008      	movs	r0, #8
 80058fa:	f001 f8c1 	bl	8006a80 <SX1276Write>
}
 80058fe:	bf00      	nop
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	200013bc 	.word	0x200013bc

0800590c <SX1276IsChannelFree>:

bool SX1276IsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	603b      	str	r3, [r7, #0]
 8005918:	4613      	mov	r3, r2
 800591a:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800591c:	2301      	movs	r3, #1
 800591e:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	613b      	str	r3, [r7, #16]

    SX1276SetSleep( );
 8005928:	f000 fd34 	bl	8006394 <SX1276SetSleep>

    SX1276SetModem( MODEM_FSK );
 800592c:	2000      	movs	r0, #0
 800592e:	f001 f84f 	bl	80069d0 <SX1276SetModem>

    SX1276SetChannel( freq );
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f7ff ffc4 	bl	80058c0 <SX1276SetChannel>

    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8005938:	68b8      	ldr	r0, [r7, #8]
 800593a:	f001 f9e3 	bl	8006d04 <GetFskBandwidthRegValue>
 800593e:	4603      	mov	r3, r0
 8005940:	4619      	mov	r1, r3
 8005942:	2012      	movs	r0, #18
 8005944:	f001 f89c 	bl	8006a80 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8005948:	68b8      	ldr	r0, [r7, #8]
 800594a:	f001 f9db 	bl	8006d04 <GetFskBandwidthRegValue>
 800594e:	4603      	mov	r3, r0
 8005950:	4619      	mov	r1, r3
 8005952:	2013      	movs	r0, #19
 8005954:	f001 f894 	bl	8006a80 <SX1276Write>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8005958:	2005      	movs	r0, #5
 800595a:	f001 f80d 	bl	8006978 <SX1276SetOpMode>

    DelayMs( 1 );
 800595e:	2001      	movs	r0, #1
 8005960:	f001 fff6 	bl	8007950 <DelayMs>

    carrierSenseTime = TimerGetCurrentTime( );
 8005964:	f003 f913 	bl	8008b8e <TimerGetCurrentTime>
 8005968:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800596a:	e00d      	b.n	8005988 <SX1276IsChannelFree+0x7c>
    {
        rssi = SX1276ReadRssi( MODEM_FSK );
 800596c:	2000      	movs	r0, #0
 800596e:	f000 ffc5 	bl	80068fc <SX1276ReadRssi>
 8005972:	4603      	mov	r3, r0
 8005974:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8005976:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800597a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800597e:	429a      	cmp	r2, r3
 8005980:	dd02      	ble.n	8005988 <SX1276IsChannelFree+0x7c>
        {
            status = false;
 8005982:	2300      	movs	r3, #0
 8005984:	75fb      	strb	r3, [r7, #23]
            break;
 8005986:	e006      	b.n	8005996 <SX1276IsChannelFree+0x8a>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8005988:	6938      	ldr	r0, [r7, #16]
 800598a:	f003 f90e 	bl	8008baa <TimerGetElapsedTime>
 800598e:	4602      	mov	r2, r0
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	4293      	cmp	r3, r2
 8005994:	d8ea      	bhi.n	800596c <SX1276IsChannelFree+0x60>
        }
    }
    SX1276SetSleep( );
 8005996:	f000 fcfd 	bl	8006394 <SX1276SetSleep>
    return status;
 800599a:	7dfb      	ldrb	r3, [r7, #23]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <SX1276Random>:

uint32_t SX1276Random( void )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 80059ae:	2001      	movs	r0, #1
 80059b0:	f001 f80e 	bl	80069d0 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80059b4:	21ff      	movs	r1, #255	; 0xff
 80059b6:	2011      	movs	r0, #17
 80059b8:	f001 f862 	bl	8006a80 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80059bc:	2005      	movs	r0, #5
 80059be:	f000 ffdb 	bl	8006978 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 80059c2:	2300      	movs	r3, #0
 80059c4:	71fb      	strb	r3, [r7, #7]
 80059c6:	e011      	b.n	80059ec <SX1276Random+0x48>
    {
        DelayMs( 1 );
 80059c8:	2001      	movs	r0, #1
 80059ca:	f001 ffc1 	bl	8007950 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80059ce:	202c      	movs	r0, #44	; 0x2c
 80059d0:	f001 f866 	bl	8006aa0 <SX1276Read>
 80059d4:	4603      	mov	r3, r0
 80059d6:	f003 0201 	and.w	r2, r3, #1
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 80059e6:	79fb      	ldrb	r3, [r7, #7]
 80059e8:	3301      	adds	r3, #1
 80059ea:	71fb      	strb	r3, [r7, #7]
 80059ec:	79fb      	ldrb	r3, [r7, #7]
 80059ee:	2b1f      	cmp	r3, #31
 80059f0:	d9ea      	bls.n	80059c8 <SX1276Random+0x24>
    }

    SX1276SetSleep( );
 80059f2:	f000 fccf 	bl	8006394 <SX1276SetSleep>

    return rnd;
 80059f6:	683b      	ldr	r3, [r7, #0]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 8005a00:	b590      	push	{r4, r7, lr}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8005a06:	2009      	movs	r0, #9
 8005a08:	f001 f84a 	bl	8006aa0 <SX1276Read>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	71fb      	strb	r3, [r7, #7]

    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8005a10:	2006      	movs	r0, #6
 8005a12:	f001 f845 	bl	8006aa0 <SX1276Read>
 8005a16:	4603      	mov	r3, r0
 8005a18:	041c      	lsls	r4, r3, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8005a1a:	2007      	movs	r0, #7
 8005a1c:	f001 f840 	bl	8006aa0 <SX1276Read>
 8005a20:	4603      	mov	r3, r0
 8005a22:	021b      	lsls	r3, r3, #8
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8005a24:	431c      	orrs	r4, r3
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 8005a26:	2008      	movs	r0, #8
 8005a28:	f001 f83a 	bl	8006aa0 <SX1276Read>
 8005a2c:	4603      	mov	r3, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8005a2e:	4323      	orrs	r3, r4
 8005a30:	4618      	mov	r0, r3
 8005a32:	f001 f923 	bl	8006c7c <SX1276ConvertPllStepToFreqInHz>
 8005a36:	6038      	str	r0, [r7, #0]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8005a38:	2100      	movs	r1, #0
 8005a3a:	2009      	movs	r0, #9
 8005a3c:	f001 f820 	bl	8006a80 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8005a40:	203b      	movs	r0, #59	; 0x3b
 8005a42:	f001 f82d 	bl	8006aa0 <SX1276Read>
 8005a46:	4603      	mov	r3, r0
 8005a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	4619      	mov	r1, r3
 8005a50:	203b      	movs	r0, #59	; 0x3b
 8005a52:	f001 f815 	bl	8006a80 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8005a56:	bf00      	nop
 8005a58:	203b      	movs	r0, #59	; 0x3b
 8005a5a:	f001 f821 	bl	8006aa0 <SX1276Read>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	f003 0320 	and.w	r3, r3, #32
 8005a64:	2b20      	cmp	r3, #32
 8005a66:	d0f7      	beq.n	8005a58 <RxChainCalibration+0x58>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8005a68:	4811      	ldr	r0, [pc, #68]	; (8005ab0 <RxChainCalibration+0xb0>)
 8005a6a:	f7ff ff29 	bl	80058c0 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8005a6e:	203b      	movs	r0, #59	; 0x3b
 8005a70:	f001 f816 	bl	8006aa0 <SX1276Read>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	203b      	movs	r0, #59	; 0x3b
 8005a80:	f000 fffe 	bl	8006a80 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8005a84:	bf00      	nop
 8005a86:	203b      	movs	r0, #59	; 0x3b
 8005a88:	f001 f80a 	bl	8006aa0 <SX1276Read>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b20      	cmp	r3, #32
 8005a94:	d0f7      	beq.n	8005a86 <RxChainCalibration+0x86>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	2009      	movs	r0, #9
 8005a9c:	f000 fff0 	bl	8006a80 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8005aa0:	6838      	ldr	r0, [r7, #0]
 8005aa2:	f7ff ff0d 	bl	80058c0 <SX1276SetChannel>
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd90      	pop	{r4, r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	33bca100 	.word	0x33bca100

08005ab4 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	607a      	str	r2, [r7, #4]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	73fb      	strb	r3, [r7, #15]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 ff80 	bl	80069d0 <SX1276SetModem>

    switch( modem )
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <SX1276SetRxConfig+0x2a>
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	f000 8099 	beq.w	8005c0e <SX1276SetRxConfig+0x15a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8005adc:	e1c3      	b.n	8005e66 <SX1276SetRxConfig+0x3b2>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8005ade:	4a78      	ldr	r2, [pc, #480]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	6553      	str	r3, [r2, #84]	; 0x54
            SX1276.Settings.Fsk.Datarate = datarate;
 8005ae4:	4a76      	ldr	r2, [pc, #472]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	65d3      	str	r3, [r2, #92]	; 0x5c
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8005aea:	4a75      	ldr	r2, [pc, #468]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	6593      	str	r3, [r2, #88]	; 0x58
            SX1276.Settings.Fsk.FixLen = fixLen;
 8005af0:	4a73      	ldr	r2, [pc, #460]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005af2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005af6:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8005afa:	4a71      	ldr	r2, [pc, #452]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005afc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005b00:	f882 3063 	strb.w	r3, [r2, #99]	; 0x63
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8005b04:	4a6e      	ldr	r2, [pc, #440]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005b06:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005b0a:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8005b0e:	4a6c      	ldr	r2, [pc, #432]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005b10:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005b14:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8005b18:	4a69      	ldr	r2, [pc, #420]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005b1a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005b1e:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8005b22:	4a67      	ldr	r2, [pc, #412]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005b24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b26:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8005b2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b2c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005b30:	fb02 f203 	mul.w	r2, r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3a:	4a61      	ldr	r2, [pc, #388]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005b3c:	66d3      	str	r3, [r2, #108]	; 0x6c
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8005b3e:	4a61      	ldr	r2, [pc, #388]	; (8005cc4 <SX1276SetRxConfig+0x210>)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b46:	617b      	str	r3, [r7, #20]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	0a1b      	lsrs	r3, r3, #8
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	4619      	mov	r1, r3
 8005b50:	2002      	movs	r0, #2
 8005b52:	f000 ff95 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	2003      	movs	r0, #3
 8005b5e:	f000 ff8f 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8005b62:	68b8      	ldr	r0, [r7, #8]
 8005b64:	f001 f8ce 	bl	8006d04 <GetFskBandwidthRegValue>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	2012      	movs	r0, #18
 8005b6e:	f000 ff87 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8005b72:	6a38      	ldr	r0, [r7, #32]
 8005b74:	f001 f8c6 	bl	8006d04 <GetFskBandwidthRegValue>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	2013      	movs	r0, #19
 8005b7e:	f000 ff7f 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8005b82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b84:	0a1b      	lsrs	r3, r3, #8
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	2025      	movs	r0, #37	; 0x25
 8005b8e:	f000 ff77 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8005b92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	4619      	mov	r1, r3
 8005b98:	2026      	movs	r0, #38	; 0x26
 8005b9a:	f000 ff71 	bl	8006a80 <SX1276Write>
            if( fixLen == 1 )
 8005b9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d006      	beq.n	8005bb4 <SX1276SetRxConfig+0x100>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8005ba6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005baa:	4619      	mov	r1, r3
 8005bac:	2032      	movs	r0, #50	; 0x32
 8005bae:	f000 ff67 	bl	8006a80 <SX1276Write>
 8005bb2:	e003      	b.n	8005bbc <SX1276SetRxConfig+0x108>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8005bb4:	21ff      	movs	r1, #255	; 0xff
 8005bb6:	2032      	movs	r0, #50	; 0x32
 8005bb8:	f000 ff62 	bl	8006a80 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8005bbc:	2030      	movs	r0, #48	; 0x30
 8005bbe:	f000 ff6f 	bl	8006aa0 <SX1276Read>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8005bc6:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8005bca:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8005bcc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005bd0:	2a00      	cmp	r2, #0
 8005bd2:	d001      	beq.n	8005bd8 <SX1276SetRxConfig+0x124>
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	e001      	b.n	8005bdc <SX1276SetRxConfig+0x128>
 8005bd8:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8005be0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005be4:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8005be6:	b25b      	sxtb	r3, r3
 8005be8:	4313      	orrs	r3, r2
 8005bea:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	4619      	mov	r1, r3
 8005bf0:	2030      	movs	r0, #48	; 0x30
 8005bf2:	f000 ff45 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8005bf6:	2031      	movs	r0, #49	; 0x31
 8005bf8:	f000 ff52 	bl	8006aa0 <SX1276Read>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	4619      	mov	r1, r3
 8005c06:	2031      	movs	r0, #49	; 0x31
 8005c08:	f000 ff3a 	bl	8006a80 <SX1276Write>
        break;
 8005c0c:	e12b      	b.n	8005e66 <SX1276SetRxConfig+0x3b2>
            if( bandwidth > 2 )
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d900      	bls.n	8005c16 <SX1276SetRxConfig+0x162>
                while( 1 );
 8005c14:	e7fe      	b.n	8005c14 <SX1276SetRxConfig+0x160>
            bandwidth += 7;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	3307      	adds	r3, #7
 8005c1a:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8005c1c:	4a28      	ldr	r2, [pc, #160]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            SX1276.Settings.LoRa.Datarate = datarate;
 8005c24:	4a26      	ldr	r2, [pc, #152]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
            SX1276.Settings.LoRa.Coderate = coderate;
 8005c2c:	4a24      	ldr	r2, [pc, #144]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005c2e:	7bbb      	ldrb	r3, [r7, #14]
 8005c30:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8005c34:	4a22      	ldr	r2, [pc, #136]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005c36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c38:	f8a2 308e 	strh.w	r3, [r2, #142]	; 0x8e
            SX1276.Settings.LoRa.FixLen = fixLen;
 8005c3c:	4a20      	ldr	r2, [pc, #128]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005c3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c42:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8005c46:	4a1e      	ldr	r2, [pc, #120]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005c48:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005c4c:	f882 3091 	strb.w	r3, [r2, #145]	; 0x91
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8005c50:	4a1b      	ldr	r2, [pc, #108]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005c52:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005c56:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8005c5a:	4a19      	ldr	r2, [pc, #100]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005c5c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005c60:	f882 3093 	strb.w	r3, [r2, #147]	; 0x93
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8005c64:	4a16      	ldr	r2, [pc, #88]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005c66:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005c6a:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8005c6e:	4a14      	ldr	r2, [pc, #80]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005c70:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005c74:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8005c78:	4a11      	ldr	r2, [pc, #68]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005c7a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005c7e:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
            if( datarate > 12 )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b0c      	cmp	r3, #12
 8005c86:	d902      	bls.n	8005c8e <SX1276SetRxConfig+0x1da>
                datarate = 12;
 8005c88:	230c      	movs	r3, #12
 8005c8a:	607b      	str	r3, [r7, #4]
 8005c8c:	e004      	b.n	8005c98 <SX1276SetRxConfig+0x1e4>
            else if( datarate < 6 )
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b05      	cmp	r3, #5
 8005c92:	d801      	bhi.n	8005c98 <SX1276SetRxConfig+0x1e4>
                datarate = 6;
 8005c94:	2306      	movs	r3, #6
 8005c96:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2b07      	cmp	r3, #7
 8005c9c:	d105      	bne.n	8005caa <SX1276SetRxConfig+0x1f6>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b0b      	cmp	r3, #11
 8005ca2:	d008      	beq.n	8005cb6 <SX1276SetRxConfig+0x202>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b0c      	cmp	r3, #12
 8005ca8:	d005      	beq.n	8005cb6 <SX1276SetRxConfig+0x202>
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d10b      	bne.n	8005cc8 <SX1276SetRxConfig+0x214>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b0c      	cmp	r3, #12
 8005cb4:	d108      	bne.n	8005cc8 <SX1276SetRxConfig+0x214>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8005cb6:	4b02      	ldr	r3, [pc, #8]	; (8005cc0 <SX1276SetRxConfig+0x20c>)
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8005cbe:	e007      	b.n	8005cd0 <SX1276SetRxConfig+0x21c>
 8005cc0:	200013bc 	.word	0x200013bc
 8005cc4:	01e84800 	.word	0x01e84800
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8005cc8:	4b69      	ldr	r3, [pc, #420]	; (8005e70 <SX1276SetRxConfig+0x3bc>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8005cd0:	201d      	movs	r0, #29
 8005cd2:	f000 fee5 	bl	8006aa0 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	7bbb      	ldrb	r3, [r7, #14]
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8005ce8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8005cec:	4313      	orrs	r3, r2
 8005cee:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	201d      	movs	r0, #29
 8005cf4:	f000 fec4 	bl	8006a80 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8005cf8:	201e      	movs	r0, #30
 8005cfa:	f000 fed1 	bl	8006aa0 <SX1276Read>
 8005cfe:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8005d00:	f003 0308 	and.w	r3, r3, #8
 8005d04:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8005d12:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8005d1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d20:	0a1b      	lsrs	r3, r3, #8
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	4619      	mov	r1, r3
 8005d32:	201e      	movs	r0, #30
 8005d34:	f000 fea4 	bl	8006a80 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8005d38:	2026      	movs	r0, #38	; 0x26
 8005d3a:	f000 feb1 	bl	8006aa0 <SX1276Read>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	b25b      	sxtb	r3, r3
 8005d42:	f023 0308 	bic.w	r3, r3, #8
 8005d46:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8005d48:	4b49      	ldr	r3, [pc, #292]	; (8005e70 <SX1276SetRxConfig+0x3bc>)
 8005d4a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005d4e:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8005d50:	b25b      	sxtb	r3, r3
 8005d52:	4313      	orrs	r3, r2
 8005d54:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	4619      	mov	r1, r3
 8005d5a:	2026      	movs	r0, #38	; 0x26
 8005d5c:	f000 fe90 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8005d60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	4619      	mov	r1, r3
 8005d66:	201f      	movs	r0, #31
 8005d68:	f000 fe8a 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8005d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d6e:	0a1b      	lsrs	r3, r3, #8
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	4619      	mov	r1, r3
 8005d76:	2020      	movs	r0, #32
 8005d78:	f000 fe82 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8005d7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	4619      	mov	r1, r3
 8005d82:	2021      	movs	r0, #33	; 0x21
 8005d84:	f000 fe7c 	bl	8006a80 <SX1276Write>
            if( fixLen == 1 )
 8005d88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d005      	beq.n	8005d9c <SX1276SetRxConfig+0x2e8>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8005d90:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005d94:	4619      	mov	r1, r3
 8005d96:	2022      	movs	r0, #34	; 0x22
 8005d98:	f000 fe72 	bl	8006a80 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005d9c:	4b34      	ldr	r3, [pc, #208]	; (8005e70 <SX1276SetRxConfig+0x3bc>)
 8005d9e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d011      	beq.n	8005dca <SX1276SetRxConfig+0x316>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8005da6:	2044      	movs	r0, #68	; 0x44
 8005da8:	f000 fe7a 	bl	8006aa0 <SX1276Read>
 8005dac:	4603      	mov	r3, r0
 8005dae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	4619      	mov	r1, r3
 8005db6:	2044      	movs	r0, #68	; 0x44
 8005db8:	f000 fe62 	bl	8006a80 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8005dbc:	4b2c      	ldr	r3, [pc, #176]	; (8005e70 <SX1276SetRxConfig+0x3bc>)
 8005dbe:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	2024      	movs	r0, #36	; 0x24
 8005dc6:	f000 fe5b 	bl	8006a80 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2b09      	cmp	r3, #9
 8005dce:	d10d      	bne.n	8005dec <SX1276SetRxConfig+0x338>
 8005dd0:	4b27      	ldr	r3, [pc, #156]	; (8005e70 <SX1276SetRxConfig+0x3bc>)
 8005dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd4:	4a27      	ldr	r2, [pc, #156]	; (8005e74 <SX1276SetRxConfig+0x3c0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d908      	bls.n	8005dec <SX1276SetRxConfig+0x338>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8005dda:	2102      	movs	r1, #2
 8005ddc:	2036      	movs	r0, #54	; 0x36
 8005dde:	f000 fe4f 	bl	8006a80 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8005de2:	2164      	movs	r1, #100	; 0x64
 8005de4:	203a      	movs	r0, #58	; 0x3a
 8005de6:	f000 fe4b 	bl	8006a80 <SX1276Write>
 8005dea:	e00f      	b.n	8005e0c <SX1276SetRxConfig+0x358>
            else if( bandwidth == 9 )
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b09      	cmp	r3, #9
 8005df0:	d108      	bne.n	8005e04 <SX1276SetRxConfig+0x350>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8005df2:	2102      	movs	r1, #2
 8005df4:	2036      	movs	r0, #54	; 0x36
 8005df6:	f000 fe43 	bl	8006a80 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8005dfa:	217f      	movs	r1, #127	; 0x7f
 8005dfc:	203a      	movs	r0, #58	; 0x3a
 8005dfe:	f000 fe3f 	bl	8006a80 <SX1276Write>
 8005e02:	e003      	b.n	8005e0c <SX1276SetRxConfig+0x358>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8005e04:	2103      	movs	r1, #3
 8005e06:	2036      	movs	r0, #54	; 0x36
 8005e08:	f000 fe3a 	bl	8006a80 <SX1276Write>
            if( datarate == 6 )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b06      	cmp	r3, #6
 8005e10:	d114      	bne.n	8005e3c <SX1276SetRxConfig+0x388>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8005e12:	2031      	movs	r0, #49	; 0x31
 8005e14:	f000 fe44 	bl	8006aa0 <SX1276Read>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	b25b      	sxtb	r3, r3
 8005e1c:	f023 0307 	bic.w	r3, r3, #7
 8005e20:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8005e22:	f043 0305 	orr.w	r3, r3, #5
 8005e26:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	2031      	movs	r0, #49	; 0x31
 8005e2e:	f000 fe27 	bl	8006a80 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8005e32:	210c      	movs	r1, #12
 8005e34:	2037      	movs	r0, #55	; 0x37
 8005e36:	f000 fe23 	bl	8006a80 <SX1276Write>
        break;
 8005e3a:	e013      	b.n	8005e64 <SX1276SetRxConfig+0x3b0>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8005e3c:	2031      	movs	r0, #49	; 0x31
 8005e3e:	f000 fe2f 	bl	8006aa0 <SX1276Read>
 8005e42:	4603      	mov	r3, r0
 8005e44:	b25b      	sxtb	r3, r3
 8005e46:	f023 0307 	bic.w	r3, r3, #7
 8005e4a:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8005e4c:	f043 0303 	orr.w	r3, r3, #3
 8005e50:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	4619      	mov	r1, r3
 8005e56:	2031      	movs	r0, #49	; 0x31
 8005e58:	f000 fe12 	bl	8006a80 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8005e5c:	210a      	movs	r1, #10
 8005e5e:	2037      	movs	r0, #55	; 0x37
 8005e60:	f000 fe0e 	bl	8006a80 <SX1276Write>
        break;
 8005e64:	bf00      	nop
}
 8005e66:	bf00      	nop
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	200013bc 	.word	0x200013bc
 8005e74:	1f4add40 	.word	0x1f4add40

08005e78 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60ba      	str	r2, [r7, #8]
 8005e80:	607b      	str	r3, [r7, #4]
 8005e82:	4603      	mov	r3, r0
 8005e84:	73fb      	strb	r3, [r7, #15]
 8005e86:	460b      	mov	r3, r1
 8005e88:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 fd9f 	bl	80069d0 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 8005e92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f002 fb2e 	bl	80084f8 <SX1276SetRfTxPower>

    switch( modem )
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <SX1276SetTxConfig+0x30>
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d07d      	beq.n	8005fa2 <SX1276SetTxConfig+0x12a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8005ea6:	e16a      	b.n	800617e <SX1276SetTxConfig+0x306>
            SX1276.Settings.Fsk.Power = power;
 8005ea8:	4ab7      	ldr	r2, [pc, #732]	; (8006188 <SX1276SetTxConfig+0x310>)
 8005eaa:	7bbb      	ldrb	r3, [r7, #14]
 8005eac:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
            SX1276.Settings.Fsk.Fdev = fdev;
 8005eb0:	4ab5      	ldr	r2, [pc, #724]	; (8006188 <SX1276SetTxConfig+0x310>)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	6513      	str	r3, [r2, #80]	; 0x50
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8005eb6:	4ab4      	ldr	r2, [pc, #720]	; (8006188 <SX1276SetTxConfig+0x310>)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6553      	str	r3, [r2, #84]	; 0x54
            SX1276.Settings.Fsk.Datarate = datarate;
 8005ebc:	4ab2      	ldr	r2, [pc, #712]	; (8006188 <SX1276SetTxConfig+0x310>)
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	65d3      	str	r3, [r2, #92]	; 0x5c
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8005ec2:	4ab1      	ldr	r2, [pc, #708]	; (8006188 <SX1276SetTxConfig+0x310>)
 8005ec4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ec6:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
            SX1276.Settings.Fsk.FixLen = fixLen;
 8005eca:	4aaf      	ldr	r2, [pc, #700]	; (8006188 <SX1276SetTxConfig+0x310>)
 8005ecc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ed0:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8005ed4:	4aac      	ldr	r2, [pc, #688]	; (8006188 <SX1276SetTxConfig+0x310>)
 8005ed6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005eda:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8005ede:	4aaa      	ldr	r2, [pc, #680]	; (8006188 <SX1276SetTxConfig+0x310>)
 8005ee0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005ee4:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8005ee8:	4aa7      	ldr	r2, [pc, #668]	; (8006188 <SX1276SetTxConfig+0x310>)
 8005eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eec:	6693      	str	r3, [r2, #104]	; 0x68
            uint32_t fdevInPllSteps = SX1276ConvertFreqInHzToPllStep( fdev );
 8005eee:	68b8      	ldr	r0, [r7, #8]
 8005ef0:	f000 fee2 	bl	8006cb8 <SX1276ConvertFreqInHzToPllStep>
 8005ef4:	6178      	str	r0, [r7, #20]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	0a1b      	lsrs	r3, r3, #8
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	4619      	mov	r1, r3
 8005efe:	2004      	movs	r0, #4
 8005f00:	f000 fdbe 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	4619      	mov	r1, r3
 8005f0a:	2005      	movs	r0, #5
 8005f0c:	f000 fdb8 	bl	8006a80 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8005f10:	4a9e      	ldr	r2, [pc, #632]	; (800618c <SX1276SetTxConfig+0x314>)
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f18:	613b      	str	r3, [r7, #16]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	0a1b      	lsrs	r3, r3, #8
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	4619      	mov	r1, r3
 8005f22:	2002      	movs	r0, #2
 8005f24:	f000 fdac 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	2003      	movs	r0, #3
 8005f30:	f000 fda6 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8005f34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005f36:	0a1b      	lsrs	r3, r3, #8
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	2025      	movs	r0, #37	; 0x25
 8005f40:	f000 fd9e 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8005f44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	4619      	mov	r1, r3
 8005f4a:	2026      	movs	r0, #38	; 0x26
 8005f4c:	f000 fd98 	bl	8006a80 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8005f50:	2030      	movs	r0, #48	; 0x30
 8005f52:	f000 fda5 	bl	8006aa0 <SX1276Read>
 8005f56:	4603      	mov	r3, r0
 8005f58:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8005f5a:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8005f5e:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8005f60:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005f64:	2a00      	cmp	r2, #0
 8005f66:	d001      	beq.n	8005f6c <SX1276SetTxConfig+0xf4>
 8005f68:	2200      	movs	r2, #0
 8005f6a:	e001      	b.n	8005f70 <SX1276SetTxConfig+0xf8>
 8005f6c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8005f70:	4313      	orrs	r3, r2
 8005f72:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8005f74:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005f78:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8005f7a:	b25b      	sxtb	r3, r3
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	4619      	mov	r1, r3
 8005f84:	2030      	movs	r0, #48	; 0x30
 8005f86:	f000 fd7b 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8005f8a:	2031      	movs	r0, #49	; 0x31
 8005f8c:	f000 fd88 	bl	8006aa0 <SX1276Read>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	4619      	mov	r1, r3
 8005f9a:	2031      	movs	r0, #49	; 0x31
 8005f9c:	f000 fd70 	bl	8006a80 <SX1276Write>
        break;
 8005fa0:	e0ed      	b.n	800617e <SX1276SetTxConfig+0x306>
            SX1276.Settings.LoRa.Power = power;
 8005fa2:	4a79      	ldr	r2, [pc, #484]	; (8006188 <SX1276SetTxConfig+0x310>)
 8005fa4:	7bbb      	ldrb	r3, [r7, #14]
 8005fa6:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
            if( bandwidth > 2 )
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d900      	bls.n	8005fb2 <SX1276SetTxConfig+0x13a>
                while( 1 );
 8005fb0:	e7fe      	b.n	8005fb0 <SX1276SetTxConfig+0x138>
            bandwidth += 7;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3307      	adds	r3, #7
 8005fb6:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8005fb8:	4a73      	ldr	r2, [pc, #460]	; (8006188 <SX1276SetTxConfig+0x310>)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            SX1276.Settings.LoRa.Datarate = datarate;
 8005fc0:	4a71      	ldr	r2, [pc, #452]	; (8006188 <SX1276SetTxConfig+0x310>)
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
            SX1276.Settings.LoRa.Coderate = coderate;
 8005fc8:	4a6f      	ldr	r2, [pc, #444]	; (8006188 <SX1276SetTxConfig+0x310>)
 8005fca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005fce:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8005fd2:	4a6d      	ldr	r2, [pc, #436]	; (8006188 <SX1276SetTxConfig+0x310>)
 8005fd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005fd6:	f8a2 308e 	strh.w	r3, [r2, #142]	; 0x8e
            SX1276.Settings.LoRa.FixLen = fixLen;
 8005fda:	4a6b      	ldr	r2, [pc, #428]	; (8006188 <SX1276SetTxConfig+0x310>)
 8005fdc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fe0:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8005fe4:	4a68      	ldr	r2, [pc, #416]	; (8006188 <SX1276SetTxConfig+0x310>)
 8005fe6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005fea:	f882 3093 	strb.w	r3, [r2, #147]	; 0x93
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8005fee:	4a66      	ldr	r2, [pc, #408]	; (8006188 <SX1276SetTxConfig+0x310>)
 8005ff0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005ff4:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8005ff8:	4a63      	ldr	r2, [pc, #396]	; (8006188 <SX1276SetTxConfig+0x310>)
 8005ffa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005ffe:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8006002:	4a61      	ldr	r2, [pc, #388]	; (8006188 <SX1276SetTxConfig+0x310>)
 8006004:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006008:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800600c:	4a5e      	ldr	r2, [pc, #376]	; (8006188 <SX1276SetTxConfig+0x310>)
 800600e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006010:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
            if( datarate > 12 )
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	2b0c      	cmp	r3, #12
 8006018:	d902      	bls.n	8006020 <SX1276SetTxConfig+0x1a8>
                datarate = 12;
 800601a:	230c      	movs	r3, #12
 800601c:	623b      	str	r3, [r7, #32]
 800601e:	e004      	b.n	800602a <SX1276SetTxConfig+0x1b2>
            else if( datarate < 6 )
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	2b05      	cmp	r3, #5
 8006024:	d801      	bhi.n	800602a <SX1276SetTxConfig+0x1b2>
                datarate = 6;
 8006026:	2306      	movs	r3, #6
 8006028:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b07      	cmp	r3, #7
 800602e:	d105      	bne.n	800603c <SX1276SetTxConfig+0x1c4>
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	2b0b      	cmp	r3, #11
 8006034:	d008      	beq.n	8006048 <SX1276SetTxConfig+0x1d0>
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	2b0c      	cmp	r3, #12
 800603a:	d005      	beq.n	8006048 <SX1276SetTxConfig+0x1d0>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b08      	cmp	r3, #8
 8006040:	d107      	bne.n	8006052 <SX1276SetTxConfig+0x1da>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	2b0c      	cmp	r3, #12
 8006046:	d104      	bne.n	8006052 <SX1276SetTxConfig+0x1da>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8006048:	4b4f      	ldr	r3, [pc, #316]	; (8006188 <SX1276SetTxConfig+0x310>)
 800604a:	2201      	movs	r2, #1
 800604c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8006050:	e003      	b.n	800605a <SX1276SetTxConfig+0x1e2>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8006052:	4b4d      	ldr	r3, [pc, #308]	; (8006188 <SX1276SetTxConfig+0x310>)
 8006054:	2200      	movs	r2, #0
 8006056:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800605a:	4b4b      	ldr	r3, [pc, #300]	; (8006188 <SX1276SetTxConfig+0x310>)
 800605c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006060:	2b00      	cmp	r3, #0
 8006062:	d011      	beq.n	8006088 <SX1276SetTxConfig+0x210>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8006064:	2044      	movs	r0, #68	; 0x44
 8006066:	f000 fd1b 	bl	8006aa0 <SX1276Read>
 800606a:	4603      	mov	r3, r0
 800606c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006070:	b2db      	uxtb	r3, r3
 8006072:	4619      	mov	r1, r3
 8006074:	2044      	movs	r0, #68	; 0x44
 8006076:	f000 fd03 	bl	8006a80 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800607a:	4b43      	ldr	r3, [pc, #268]	; (8006188 <SX1276SetTxConfig+0x310>)
 800607c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8006080:	4619      	mov	r1, r3
 8006082:	2024      	movs	r0, #36	; 0x24
 8006084:	f000 fcfc 	bl	8006a80 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8006088:	201d      	movs	r0, #29
 800608a:	f000 fd09 	bl	8006aa0 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	011b      	lsls	r3, r3, #4
 8006094:	b2da      	uxtb	r2, r3
 8006096:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	b2db      	uxtb	r3, r3
 800609e:	4313      	orrs	r3, r2
 80060a0:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80060a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80060a6:	4313      	orrs	r3, r2
 80060a8:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80060aa:	4619      	mov	r1, r3
 80060ac:	201d      	movs	r0, #29
 80060ae:	f000 fce7 	bl	8006a80 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80060b2:	201e      	movs	r0, #30
 80060b4:	f000 fcf4 	bl	8006aa0 <SX1276Read>
 80060b8:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 80060ba:	f003 030b 	and.w	r3, r3, #11
 80060be:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 80060c8:	4313      	orrs	r3, r2
 80060ca:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80060cc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 80060d4:	4313      	orrs	r3, r2
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	4619      	mov	r1, r3
 80060da:	201e      	movs	r0, #30
 80060dc:	f000 fcd0 	bl	8006a80 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80060e0:	2026      	movs	r0, #38	; 0x26
 80060e2:	f000 fcdd 	bl	8006aa0 <SX1276Read>
 80060e6:	4603      	mov	r3, r0
 80060e8:	b25b      	sxtb	r3, r3
 80060ea:	f023 0308 	bic.w	r3, r3, #8
 80060ee:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80060f0:	4b25      	ldr	r3, [pc, #148]	; (8006188 <SX1276SetTxConfig+0x310>)
 80060f2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80060f6:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80060f8:	b25b      	sxtb	r3, r3
 80060fa:	4313      	orrs	r3, r2
 80060fc:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	4619      	mov	r1, r3
 8006102:	2026      	movs	r0, #38	; 0x26
 8006104:	f000 fcbc 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8006108:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800610a:	0a1b      	lsrs	r3, r3, #8
 800610c:	b29b      	uxth	r3, r3
 800610e:	b2db      	uxtb	r3, r3
 8006110:	4619      	mov	r1, r3
 8006112:	2020      	movs	r0, #32
 8006114:	f000 fcb4 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8006118:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800611a:	b2db      	uxtb	r3, r3
 800611c:	4619      	mov	r1, r3
 800611e:	2021      	movs	r0, #33	; 0x21
 8006120:	f000 fcae 	bl	8006a80 <SX1276Write>
            if( datarate == 6 )
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	2b06      	cmp	r3, #6
 8006128:	d114      	bne.n	8006154 <SX1276SetTxConfig+0x2dc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800612a:	2031      	movs	r0, #49	; 0x31
 800612c:	f000 fcb8 	bl	8006aa0 <SX1276Read>
 8006130:	4603      	mov	r3, r0
 8006132:	b25b      	sxtb	r3, r3
 8006134:	f023 0307 	bic.w	r3, r3, #7
 8006138:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800613a:	f043 0305 	orr.w	r3, r3, #5
 800613e:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8006140:	b2db      	uxtb	r3, r3
 8006142:	4619      	mov	r1, r3
 8006144:	2031      	movs	r0, #49	; 0x31
 8006146:	f000 fc9b 	bl	8006a80 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800614a:	210c      	movs	r1, #12
 800614c:	2037      	movs	r0, #55	; 0x37
 800614e:	f000 fc97 	bl	8006a80 <SX1276Write>
        break;
 8006152:	e013      	b.n	800617c <SX1276SetTxConfig+0x304>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006154:	2031      	movs	r0, #49	; 0x31
 8006156:	f000 fca3 	bl	8006aa0 <SX1276Read>
 800615a:	4603      	mov	r3, r0
 800615c:	b25b      	sxtb	r3, r3
 800615e:	f023 0307 	bic.w	r3, r3, #7
 8006162:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006164:	f043 0303 	orr.w	r3, r3, #3
 8006168:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800616a:	b2db      	uxtb	r3, r3
 800616c:	4619      	mov	r1, r3
 800616e:	2031      	movs	r0, #49	; 0x31
 8006170:	f000 fc86 	bl	8006a80 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006174:	210a      	movs	r1, #10
 8006176:	2037      	movs	r0, #55	; 0x37
 8006178:	f000 fc82 	bl	8006a80 <SX1276Write>
        break;
 800617c:	bf00      	nop
}
 800617e:	bf00      	nop
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	200013bc 	.word	0x200013bc
 800618c:	01e84800 	.word	0x01e84800

08006190 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08a      	sub	sp, #40	; 0x28
 8006194:	af04      	add	r7, sp, #16
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	607a      	str	r2, [r7, #4]
 800619a:	461a      	mov	r2, r3
 800619c:	4603      	mov	r3, r0
 800619e:	73fb      	strb	r3, [r7, #15]
 80061a0:	4613      	mov	r3, r2
 80061a2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80061a8:	2301      	movs	r3, #1
 80061aa:	613b      	str	r3, [r7, #16]

    switch( modem )
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <SX1276GetTimeOnAir+0x28>
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d012      	beq.n	80061dc <SX1276GetTimeOnAir+0x4c>
 80061b6:	e02c      	b.n	8006212 <SX1276GetTimeOnAir+0x82>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 80061b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80061c0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80061c4:	8c38      	ldrh	r0, [r7, #32]
 80061c6:	f000 fdef 	bl	8006da8 <SX1276GetGfskTimeOnAirNumerator>
 80061ca:	4603      	mov	r3, r0
 80061cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80061d0:	fb02 f303 	mul.w	r3, r2, r3
 80061d4:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	613b      	str	r3, [r7, #16]
        }
        break;
 80061da:	e01a      	b.n	8006212 <SX1276GetTimeOnAir+0x82>
    case MODEM_LORA:
        {
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 80061dc:	8c39      	ldrh	r1, [r7, #32]
 80061de:	7bba      	ldrb	r2, [r7, #14]
 80061e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061e4:	9302      	str	r3, [sp, #8]
 80061e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80061ea:	9301      	str	r3, [sp, #4]
 80061ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	460b      	mov	r3, r1
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	68b8      	ldr	r0, [r7, #8]
 80061f8:	f000 fe05 	bl	8006e06 <SX1276GetLoRaTimeOnAirNumerator>
 80061fc:	4603      	mov	r3, r0
 80061fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006202:	fb02 f303 	mul.w	r3, r2, r3
 8006206:	617b      	str	r3, [r7, #20]
                                                                   payloadLen, crcOn );
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 8006208:	68b8      	ldr	r0, [r7, #8]
 800620a:	f000 fda5 	bl	8006d58 <SX1276GetLoRaBandwidthInHz>
 800620e:	6138      	str	r0, [r7, #16]
        }
        break;
 8006210:	bf00      	nop
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	4413      	add	r3, r2
 8006218:	1e5a      	subs	r2, r3, #1
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8006220:	4618      	mov	r0, r3
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 8006234:	2300      	movs	r3, #0
 8006236:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 8006238:	4b54      	ldr	r3, [pc, #336]	; (800638c <SX1276Send+0x164>)
 800623a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <SX1276Send+0x20>
 8006242:	2b01      	cmp	r3, #1
 8006244:	d049      	beq.n	80062da <SX1276Send+0xb2>
 8006246:	e099      	b.n	800637c <SX1276Send+0x154>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006248:	4b50      	ldr	r3, [pc, #320]	; (800638c <SX1276Send+0x164>)
 800624a:	2200      	movs	r2, #0
 800624c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            SX1276.Settings.FskPacketHandler.Size = size;
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	b29a      	uxth	r2, r3
 8006254:	4b4d      	ldr	r3, [pc, #308]	; (800638c <SX1276Send+0x164>)
 8006256:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

            if( SX1276.Settings.Fsk.FixLen == false )
 800625a:	4b4c      	ldr	r3, [pc, #304]	; (800638c <SX1276Send+0x164>)
 800625c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006260:	f083 0301 	eor.w	r3, r3, #1
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <SX1276Send+0x4e>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 800626a:	1cfb      	adds	r3, r7, #3
 800626c:	2101      	movs	r1, #1
 800626e:	4618      	mov	r0, r3
 8006270:	f000 fc90 	bl	8006b94 <SX1276WriteFifo>
 8006274:	e004      	b.n	8006280 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 8006276:	78fb      	ldrb	r3, [r7, #3]
 8006278:	4619      	mov	r1, r3
 800627a:	2032      	movs	r0, #50	; 0x32
 800627c:	f000 fc00 	bl	8006a80 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8006280:	78fb      	ldrb	r3, [r7, #3]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d007      	beq.n	8006296 <SX1276Send+0x6e>
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	2b40      	cmp	r3, #64	; 0x40
 800628a:	d804      	bhi.n	8006296 <SX1276Send+0x6e>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800628c:	78fa      	ldrb	r2, [r7, #3]
 800628e:	4b3f      	ldr	r3, [pc, #252]	; (800638c <SX1276Send+0x164>)
 8006290:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8006294:	e00a      	b.n	80062ac <SX1276Send+0x84>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 8006296:	78fb      	ldrb	r3, [r7, #3]
 8006298:	b29b      	uxth	r3, r3
 800629a:	461a      	mov	r2, r3
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	483c      	ldr	r0, [pc, #240]	; (8006390 <SX1276Send+0x168>)
 80062a0:	f002 fcc2 	bl	8008c28 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 80062a4:	4b39      	ldr	r3, [pc, #228]	; (800638c <SX1276Send+0x164>)
 80062a6:	2220      	movs	r2, #32
 80062a8:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 80062ac:	4b37      	ldr	r3, [pc, #220]	; (800638c <SX1276Send+0x164>)
 80062ae:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fc6d 	bl	8006b94 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80062ba:	4b34      	ldr	r3, [pc, #208]	; (800638c <SX1276Send+0x164>)
 80062bc:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 80062c0:	4b32      	ldr	r3, [pc, #200]	; (800638c <SX1276Send+0x164>)
 80062c2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	4413      	add	r3, r2
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	4b2f      	ldr	r3, [pc, #188]	; (800638c <SX1276Send+0x164>)
 80062ce:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 80062d2:	4b2e      	ldr	r3, [pc, #184]	; (800638c <SX1276Send+0x164>)
 80062d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062d6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80062d8:	e050      	b.n	800637c <SX1276Send+0x154>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 80062da:	4b2c      	ldr	r3, [pc, #176]	; (800638c <SX1276Send+0x164>)
 80062dc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00f      	beq.n	8006304 <SX1276Send+0xdc>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80062e4:	2033      	movs	r0, #51	; 0x33
 80062e6:	f000 fbdb 	bl	8006aa0 <SX1276Read>
 80062ea:	4603      	mov	r3, r0
 80062ec:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	4619      	mov	r1, r3
 80062f4:	2033      	movs	r0, #51	; 0x33
 80062f6:	f000 fbc3 	bl	8006a80 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80062fa:	2119      	movs	r1, #25
 80062fc:	203b      	movs	r0, #59	; 0x3b
 80062fe:	f000 fbbf 	bl	8006a80 <SX1276Write>
 8006302:	e013      	b.n	800632c <SX1276Send+0x104>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8006304:	2033      	movs	r0, #51	; 0x33
 8006306:	f000 fbcb 	bl	8006aa0 <SX1276Read>
 800630a:	4603      	mov	r3, r0
 800630c:	b25b      	sxtb	r3, r3
 800630e:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8006312:	b25b      	sxtb	r3, r3
 8006314:	f043 0301 	orr.w	r3, r3, #1
 8006318:	b25b      	sxtb	r3, r3
 800631a:	b2db      	uxtb	r3, r3
 800631c:	4619      	mov	r1, r3
 800631e:	2033      	movs	r0, #51	; 0x33
 8006320:	f000 fbae 	bl	8006a80 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8006324:	211d      	movs	r1, #29
 8006326:	203b      	movs	r0, #59	; 0x3b
 8006328:	f000 fbaa 	bl	8006a80 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 800632c:	78fa      	ldrb	r2, [r7, #3]
 800632e:	4b17      	ldr	r3, [pc, #92]	; (800638c <SX1276Send+0x164>)
 8006330:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8006334:	78fb      	ldrb	r3, [r7, #3]
 8006336:	4619      	mov	r1, r3
 8006338:	2022      	movs	r0, #34	; 0x22
 800633a:	f000 fba1 	bl	8006a80 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800633e:	2100      	movs	r1, #0
 8006340:	200e      	movs	r0, #14
 8006342:	f000 fb9d 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8006346:	2100      	movs	r1, #0
 8006348:	200d      	movs	r0, #13
 800634a:	f000 fb99 	bl	8006a80 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800634e:	2001      	movs	r0, #1
 8006350:	f000 fba6 	bl	8006aa0 <SX1276Read>
 8006354:	4603      	mov	r3, r0
 8006356:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800635a:	2b00      	cmp	r3, #0
 800635c:	d104      	bne.n	8006368 <SX1276Send+0x140>
            {
                SX1276SetStby( );
 800635e:	f000 f839 	bl	80063d4 <SX1276SetStby>
                DelayMs( 1 );
 8006362:	2001      	movs	r0, #1
 8006364:	f001 faf4 	bl	8007950 <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	4619      	mov	r1, r3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fc11 	bl	8006b94 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8006372:	4b06      	ldr	r3, [pc, #24]	; (800638c <SX1276Send+0x164>)
 8006374:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006378:	60fb      	str	r3, [r7, #12]
        }
        break;
 800637a:	bf00      	nop
    }

    SX1276SetTx( txTimeout );
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 f9cb 	bl	8006718 <SX1276SetTx>
}
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	200013bc 	.word	0x200013bc
 8006390:	20001070 	.word	0x20001070

08006394 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8006398:	480a      	ldr	r0, [pc, #40]	; (80063c4 <SX1276SetSleep+0x30>)
 800639a:	f002 fb41 	bl	8008a20 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800639e:	480a      	ldr	r0, [pc, #40]	; (80063c8 <SX1276SetSleep+0x34>)
 80063a0:	f002 fb3e 	bl	8008a20 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80063a4:	4809      	ldr	r0, [pc, #36]	; (80063cc <SX1276SetSleep+0x38>)
 80063a6:	f002 fb3b 	bl	8008a20 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80063aa:	2000      	movs	r0, #0
 80063ac:	f000 fae4 	bl	8006978 <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    SX1276SetBoardTcxo( false );
 80063b0:	2000      	movs	r0, #0
 80063b2:	f002 f86f 	bl	8008494 <SX1276SetBoardTcxo>

    SX1276.Settings.State = RF_IDLE;
 80063b6:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <SX1276SetSleep+0x3c>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 80063be:	bf00      	nop
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20001464 	.word	0x20001464
 80063c8:	2000138c 	.word	0x2000138c
 80063cc:	200013a4 	.word	0x200013a4
 80063d0:	200013bc 	.word	0x200013bc

080063d4 <SX1276SetStby>:

void SX1276SetStby( void )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80063d8:	4808      	ldr	r0, [pc, #32]	; (80063fc <SX1276SetStby+0x28>)
 80063da:	f002 fb21 	bl	8008a20 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80063de:	4808      	ldr	r0, [pc, #32]	; (8006400 <SX1276SetStby+0x2c>)
 80063e0:	f002 fb1e 	bl	8008a20 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80063e4:	4807      	ldr	r0, [pc, #28]	; (8006404 <SX1276SetStby+0x30>)
 80063e6:	f002 fb1b 	bl	8008a20 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80063ea:	2001      	movs	r0, #1
 80063ec:	f000 fac4 	bl	8006978 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80063f0:	4b05      	ldr	r3, [pc, #20]	; (8006408 <SX1276SetStby+0x34>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 80063f8:	bf00      	nop
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20001464 	.word	0x20001464
 8006400:	2000138c 	.word	0x2000138c
 8006404:	200013a4 	.word	0x200013a4
 8006408:	200013bc 	.word	0x200013bc

0800640c <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 8006414:	2300      	movs	r3, #0
 8006416:	73fb      	strb	r3, [r7, #15]
    TimerStop( &TxTimeoutTimer );
 8006418:	48ba      	ldr	r0, [pc, #744]	; (8006704 <SX1276SetRx+0x2f8>)
 800641a:	f002 fb01 	bl	8008a20 <TimerStop>

    switch( SX1276.Settings.Modem )
 800641e:	4bba      	ldr	r3, [pc, #744]	; (8006708 <SX1276SetRx+0x2fc>)
 8006420:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <SX1276SetRx+0x22>
 8006428:	2b01      	cmp	r3, #1
 800642a:	d03e      	beq.n	80064aa <SX1276SetRx+0x9e>
 800642c:	e12f      	b.n	800668e <SX1276SetRx+0x282>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800642e:	4bb6      	ldr	r3, [pc, #728]	; (8006708 <SX1276SetRx+0x2fc>)
 8006430:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8006434:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006436:	2040      	movs	r0, #64	; 0x40
 8006438:	f000 fb32 	bl	8006aa0 <SX1276Read>
 800643c:	4603      	mov	r3, r0
 800643e:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8006440:	f003 0303 	and.w	r3, r3, #3
 8006444:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8006446:	f043 030c 	orr.w	r3, r3, #12
 800644a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800644c:	b2db      	uxtb	r3, r3
 800644e:	4619      	mov	r1, r3
 8006450:	2040      	movs	r0, #64	; 0x40
 8006452:	f000 fb15 	bl	8006a80 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8006456:	2041      	movs	r0, #65	; 0x41
 8006458:	f000 fb22 	bl	8006aa0 <SX1276Read>
 800645c:	4603      	mov	r3, r0
 800645e:	f063 033e 	orn	r3, r3, #62	; 0x3e
 8006462:	b2db      	uxtb	r3, r3
 8006464:	4619      	mov	r1, r3
 8006466:	2041      	movs	r0, #65	; 0x41
 8006468:	f000 fb0a 	bl	8006a80 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800646c:	2035      	movs	r0, #53	; 0x35
 800646e:	f000 fb17 	bl	8006aa0 <SX1276Read>
 8006472:	4603      	mov	r3, r0
 8006474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006478:	b2da      	uxtb	r2, r3
 800647a:	4ba3      	ldr	r3, [pc, #652]	; (8006708 <SX1276SetRx+0x2fc>)
 800647c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8006480:	211e      	movs	r1, #30
 8006482:	200d      	movs	r0, #13
 8006484:	f000 fafc 	bl	8006a80 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006488:	4b9f      	ldr	r3, [pc, #636]	; (8006708 <SX1276SetRx+0x2fc>)
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8006490:	4b9d      	ldr	r3, [pc, #628]	; (8006708 <SX1276SetRx+0x2fc>)
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006498:	4b9b      	ldr	r3, [pc, #620]	; (8006708 <SX1276SetRx+0x2fc>)
 800649a:	2200      	movs	r2, #0
 800649c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80064a0:	4b99      	ldr	r3, [pc, #612]	; (8006708 <SX1276SetRx+0x2fc>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
        }
        break;
 80064a8:	e0f1      	b.n	800668e <SX1276SetRx+0x282>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 80064aa:	4b97      	ldr	r3, [pc, #604]	; (8006708 <SX1276SetRx+0x2fc>)
 80064ac:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00f      	beq.n	80064d4 <SX1276SetRx+0xc8>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80064b4:	2033      	movs	r0, #51	; 0x33
 80064b6:	f000 faf3 	bl	8006aa0 <SX1276Read>
 80064ba:	4603      	mov	r3, r0
 80064bc:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	4619      	mov	r1, r3
 80064c4:	2033      	movs	r0, #51	; 0x33
 80064c6:	f000 fadb 	bl	8006a80 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80064ca:	2119      	movs	r1, #25
 80064cc:	203b      	movs	r0, #59	; 0x3b
 80064ce:	f000 fad7 	bl	8006a80 <SX1276Write>
 80064d2:	e013      	b.n	80064fc <SX1276SetRx+0xf0>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80064d4:	2033      	movs	r0, #51	; 0x33
 80064d6:	f000 fae3 	bl	8006aa0 <SX1276Read>
 80064da:	4603      	mov	r3, r0
 80064dc:	b25b      	sxtb	r3, r3
 80064de:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80064e2:	b25b      	sxtb	r3, r3
 80064e4:	f043 0301 	orr.w	r3, r3, #1
 80064e8:	b25b      	sxtb	r3, r3
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	4619      	mov	r1, r3
 80064ee:	2033      	movs	r0, #51	; 0x33
 80064f0:	f000 fac6 	bl	8006a80 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80064f4:	211d      	movs	r1, #29
 80064f6:	203b      	movs	r0, #59	; 0x3b
 80064f8:	f000 fac2 	bl	8006a80 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80064fc:	4b82      	ldr	r3, [pc, #520]	; (8006708 <SX1276SetRx+0x2fc>)
 80064fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006502:	2b08      	cmp	r3, #8
 8006504:	f200 8087 	bhi.w	8006616 <SX1276SetRx+0x20a>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8006508:	2031      	movs	r0, #49	; 0x31
 800650a:	f000 fac9 	bl	8006aa0 <SX1276Read>
 800650e:	4603      	mov	r3, r0
 8006510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006514:	b2db      	uxtb	r3, r3
 8006516:	4619      	mov	r1, r3
 8006518:	2031      	movs	r0, #49	; 0x31
 800651a:	f000 fab1 	bl	8006a80 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 800651e:	2100      	movs	r1, #0
 8006520:	2030      	movs	r0, #48	; 0x30
 8006522:	f000 faad 	bl	8006a80 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8006526:	4b78      	ldr	r3, [pc, #480]	; (8006708 <SX1276SetRx+0x2fc>)
 8006528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800652c:	2b08      	cmp	r3, #8
 800652e:	d87d      	bhi.n	800662c <SX1276SetRx+0x220>
 8006530:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <SX1276SetRx+0x12c>)
 8006532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006536:	bf00      	nop
 8006538:	0800655d 	.word	0x0800655d
 800653c:	08006577 	.word	0x08006577
 8006540:	08006591 	.word	0x08006591
 8006544:	080065ab 	.word	0x080065ab
 8006548:	080065c5 	.word	0x080065c5
 800654c:	080065df 	.word	0x080065df
 8006550:	080065f9 	.word	0x080065f9
 8006554:	08006603 	.word	0x08006603
 8006558:	0800660d 	.word	0x0800660d
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 800655c:	2148      	movs	r1, #72	; 0x48
 800655e:	202f      	movs	r0, #47	; 0x2f
 8006560:	f000 fa8e 	bl	8006a80 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8006564:	4b68      	ldr	r3, [pc, #416]	; (8006708 <SX1276SetRx+0x2fc>)
 8006566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006568:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 800656c:	3302      	adds	r3, #2
 800656e:	4618      	mov	r0, r3
 8006570:	f7ff f9a6 	bl	80058c0 <SX1276SetChannel>
                    break;
 8006574:	e05a      	b.n	800662c <SX1276SetRx+0x220>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006576:	2144      	movs	r1, #68	; 0x44
 8006578:	202f      	movs	r0, #47	; 0x2f
 800657a:	f000 fa81 	bl	8006a80 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800657e:	4b62      	ldr	r3, [pc, #392]	; (8006708 <SX1276SetRx+0x2fc>)
 8006580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006582:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8006586:	3334      	adds	r3, #52	; 0x34
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff f999 	bl	80058c0 <SX1276SetChannel>
                    break;
 800658e:	e04d      	b.n	800662c <SX1276SetRx+0x220>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006590:	2144      	movs	r1, #68	; 0x44
 8006592:	202f      	movs	r0, #47	; 0x2f
 8006594:	f000 fa74 	bl	8006a80 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8006598:	4b5b      	ldr	r3, [pc, #364]	; (8006708 <SX1276SetRx+0x2fc>)
 800659a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800659c:	f503 5374 	add.w	r3, r3, #15616	; 0x3d00
 80065a0:	3304      	adds	r3, #4
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7ff f98c 	bl	80058c0 <SX1276SetChannel>
                    break;
 80065a8:	e040      	b.n	800662c <SX1276SetRx+0x220>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80065aa:	2144      	movs	r1, #68	; 0x44
 80065ac:	202f      	movs	r0, #47	; 0x2f
 80065ae:	f000 fa67 	bl	8006a80 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 80065b2:	4b55      	ldr	r3, [pc, #340]	; (8006708 <SX1276SetRx+0x2fc>)
 80065b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065b6:	f503 43a2 	add.w	r3, r3, #20736	; 0x5100
 80065ba:	335e      	adds	r3, #94	; 0x5e
 80065bc:	4618      	mov	r0, r3
 80065be:	f7ff f97f 	bl	80058c0 <SX1276SetChannel>
                    break;
 80065c2:	e033      	b.n	800662c <SX1276SetRx+0x220>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80065c4:	2144      	movs	r1, #68	; 0x44
 80065c6:	202f      	movs	r0, #47	; 0x2f
 80065c8:	f000 fa5a 	bl	8006a80 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 80065cc:	4b4e      	ldr	r3, [pc, #312]	; (8006708 <SX1276SetRx+0x2fc>)
 80065ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d0:	f503 43f4 	add.w	r3, r3, #31232	; 0x7a00
 80065d4:	3312      	adds	r3, #18
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff f972 	bl	80058c0 <SX1276SetChannel>
                    break;
 80065dc:	e026      	b.n	800662c <SX1276SetRx+0x220>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80065de:	2144      	movs	r1, #68	; 0x44
 80065e0:	202f      	movs	r0, #47	; 0x2f
 80065e2:	f000 fa4d 	bl	8006a80 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 80065e6:	4b48      	ldr	r3, [pc, #288]	; (8006708 <SX1276SetRx+0x2fc>)
 80065e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ea:	f503 4322 	add.w	r3, r3, #41472	; 0xa200
 80065ee:	33c6      	adds	r3, #198	; 0xc6
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7ff f965 	bl	80058c0 <SX1276SetChannel>
                    break;
 80065f6:	e019      	b.n	800662c <SX1276SetRx+0x220>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80065f8:	2140      	movs	r1, #64	; 0x40
 80065fa:	202f      	movs	r0, #47	; 0x2f
 80065fc:	f000 fa40 	bl	8006a80 <SX1276Write>
                    break;
 8006600:	e014      	b.n	800662c <SX1276SetRx+0x220>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8006602:	2140      	movs	r1, #64	; 0x40
 8006604:	202f      	movs	r0, #47	; 0x2f
 8006606:	f000 fa3b 	bl	8006a80 <SX1276Write>
                    break;
 800660a:	e00f      	b.n	800662c <SX1276SetRx+0x220>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 800660c:	2140      	movs	r1, #64	; 0x40
 800660e:	202f      	movs	r0, #47	; 0x2f
 8006610:	f000 fa36 	bl	8006a80 <SX1276Write>
                    break;
 8006614:	e00a      	b.n	800662c <SX1276SetRx+0x220>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8006616:	2031      	movs	r0, #49	; 0x31
 8006618:	f000 fa42 	bl	8006aa0 <SX1276Read>
 800661c:	4603      	mov	r3, r0
 800661e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006622:	b2db      	uxtb	r3, r3
 8006624:	4619      	mov	r1, r3
 8006626:	2031      	movs	r0, #49	; 0x31
 8006628:	f000 fa2a 	bl	8006a80 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800662c:	4b36      	ldr	r3, [pc, #216]	; (8006708 <SX1276SetRx+0x2fc>)
 800662e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8006632:	73fb      	strb	r3, [r7, #15]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006634:	4b34      	ldr	r3, [pc, #208]	; (8006708 <SX1276SetRx+0x2fc>)
 8006636:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00f      	beq.n	800665e <SX1276SetRx+0x252>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800663e:	211d      	movs	r1, #29
 8006640:	2011      	movs	r0, #17
 8006642:	f000 fa1d 	bl	8006a80 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8006646:	2040      	movs	r0, #64	; 0x40
 8006648:	f000 fa2a 	bl	8006aa0 <SX1276Read>
 800664c:	4603      	mov	r3, r0
 800664e:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8006652:	b2db      	uxtb	r3, r3
 8006654:	4619      	mov	r1, r3
 8006656:	2040      	movs	r0, #64	; 0x40
 8006658:	f000 fa12 	bl	8006a80 <SX1276Write>
 800665c:	e00e      	b.n	800667c <SX1276SetRx+0x270>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800665e:	211f      	movs	r1, #31
 8006660:	2011      	movs	r0, #17
 8006662:	f000 fa0d 	bl	8006a80 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8006666:	2040      	movs	r0, #64	; 0x40
 8006668:	f000 fa1a 	bl	8006aa0 <SX1276Read>
 800666c:	4603      	mov	r3, r0
 800666e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006672:	b2db      	uxtb	r3, r3
 8006674:	4619      	mov	r1, r3
 8006676:	2040      	movs	r0, #64	; 0x40
 8006678:	f000 fa02 	bl	8006a80 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800667c:	2100      	movs	r1, #0
 800667e:	200f      	movs	r0, #15
 8006680:	f000 f9fe 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8006684:	2100      	movs	r1, #0
 8006686:	200d      	movs	r0, #13
 8006688:	f000 f9fa 	bl	8006a80 <SX1276Write>
        }
        break;
 800668c:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 800668e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006692:	2100      	movs	r1, #0
 8006694:	481d      	ldr	r0, [pc, #116]	; (800670c <SX1276SetRx+0x300>)
 8006696:	f002 fb1b 	bl	8008cd0 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 800669a:	4b1b      	ldr	r3, [pc, #108]	; (8006708 <SX1276SetRx+0x2fc>)
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if( timeout != 0 )
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d006      	beq.n	80066b6 <SX1276SetRx+0x2aa>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80066a8:	6879      	ldr	r1, [r7, #4]
 80066aa:	4819      	ldr	r0, [pc, #100]	; (8006710 <SX1276SetRx+0x304>)
 80066ac:	f002 fa4e 	bl	8008b4c <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 80066b0:	4817      	ldr	r0, [pc, #92]	; (8006710 <SX1276SetRx+0x304>)
 80066b2:	f002 f895 	bl	80087e0 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 80066b6:	4b14      	ldr	r3, [pc, #80]	; (8006708 <SX1276SetRx+0x2fc>)
 80066b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d112      	bne.n	80066e6 <SX1276SetRx+0x2da>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80066c0:	2005      	movs	r0, #5
 80066c2:	f000 f959 	bl	8006978 <SX1276SetOpMode>

        if( rxContinuous == false )
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	f083 0301 	eor.w	r3, r3, #1
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d013      	beq.n	80066fa <SX1276SetRx+0x2ee>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 80066d2:	4b0d      	ldr	r3, [pc, #52]	; (8006708 <SX1276SetRx+0x2fc>)
 80066d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066d6:	4619      	mov	r1, r3
 80066d8:	480e      	ldr	r0, [pc, #56]	; (8006714 <SX1276SetRx+0x308>)
 80066da:	f002 fa37 	bl	8008b4c <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 80066de:	480d      	ldr	r0, [pc, #52]	; (8006714 <SX1276SetRx+0x308>)
 80066e0:	f002 f87e 	bl	80087e0 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 80066e4:	e009      	b.n	80066fa <SX1276SetRx+0x2ee>
        if( rxContinuous == true )
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <SX1276SetRx+0x2e8>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80066ec:	2005      	movs	r0, #5
 80066ee:	f000 f943 	bl	8006978 <SX1276SetOpMode>
}
 80066f2:	e002      	b.n	80066fa <SX1276SetRx+0x2ee>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 80066f4:	2006      	movs	r0, #6
 80066f6:	f000 f93f 	bl	8006978 <SX1276SetOpMode>
}
 80066fa:	bf00      	nop
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	2000138c 	.word	0x2000138c
 8006708:	200013bc 	.word	0x200013bc
 800670c:	20001070 	.word	0x20001070
 8006710:	20001464 	.word	0x20001464
 8006714:	200013a4 	.word	0x200013a4

08006718 <SX1276SetTx>:

static void SX1276SetTx( uint32_t timeout )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 8006720:	4836      	ldr	r0, [pc, #216]	; (80067fc <SX1276SetTx+0xe4>)
 8006722:	f002 f97d 	bl	8008a20 <TimerStop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8006726:	6879      	ldr	r1, [r7, #4]
 8006728:	4835      	ldr	r0, [pc, #212]	; (8006800 <SX1276SetTx+0xe8>)
 800672a:	f002 fa0f 	bl	8008b4c <TimerSetValue>

    switch( SX1276.Settings.Modem )
 800672e:	4b35      	ldr	r3, [pc, #212]	; (8006804 <SX1276SetTx+0xec>)
 8006730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <SX1276SetTx+0x26>
 8006738:	2b01      	cmp	r3, #1
 800673a:	d021      	beq.n	8006780 <SX1276SetTx+0x68>
 800673c:	e04f      	b.n	80067de <SX1276SetTx+0xc6>
            // DIO1=FifoLevel
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800673e:	2040      	movs	r0, #64	; 0x40
 8006740:	f000 f9ae 	bl	8006aa0 <SX1276Read>
 8006744:	4603      	mov	r3, r0
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	b2db      	uxtb	r3, r3
 800674c:	4619      	mov	r1, r3
 800674e:	2040      	movs	r0, #64	; 0x40
 8006750:	f000 f996 	bl	8006a80 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8006754:	2041      	movs	r0, #65	; 0x41
 8006756:	f000 f9a3 	bl	8006aa0 <SX1276Read>
 800675a:	4603      	mov	r3, r0
 800675c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8006760:	b2db      	uxtb	r3, r3
 8006762:	4619      	mov	r1, r3
 8006764:	2041      	movs	r0, #65	; 0x41
 8006766:	f000 f98b 	bl	8006a80 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800676a:	2035      	movs	r0, #53	; 0x35
 800676c:	f000 f998 	bl	8006aa0 <SX1276Read>
 8006770:	4603      	mov	r3, r0
 8006772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006776:	b2da      	uxtb	r2, r3
 8006778:	4b22      	ldr	r3, [pc, #136]	; (8006804 <SX1276SetTx+0xec>)
 800677a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        }
        break;
 800677e:	e02e      	b.n	80067de <SX1276SetTx+0xc6>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006780:	4b20      	ldr	r3, [pc, #128]	; (8006804 <SX1276SetTx+0xec>)
 8006782:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006786:	2b00      	cmp	r3, #0
 8006788:	d014      	beq.n	80067b4 <SX1276SetTx+0x9c>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800678a:	21f5      	movs	r1, #245	; 0xf5
 800678c:	2011      	movs	r0, #17
 800678e:	f000 f977 	bl	8006a80 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8006792:	2040      	movs	r0, #64	; 0x40
 8006794:	f000 f984 	bl	8006aa0 <SX1276Read>
 8006798:	4603      	mov	r3, r0
 800679a:	b25b      	sxtb	r3, r3
 800679c:	f003 0333 	and.w	r3, r3, #51	; 0x33
 80067a0:	b25b      	sxtb	r3, r3
 80067a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067a6:	b25b      	sxtb	r3, r3
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	4619      	mov	r1, r3
 80067ac:	2040      	movs	r0, #64	; 0x40
 80067ae:	f000 f967 	bl	8006a80 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 80067b2:	e013      	b.n	80067dc <SX1276SetTx+0xc4>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80067b4:	21f7      	movs	r1, #247	; 0xf7
 80067b6:	2011      	movs	r0, #17
 80067b8:	f000 f962 	bl	8006a80 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 80067bc:	2040      	movs	r0, #64	; 0x40
 80067be:	f000 f96f 	bl	8006aa0 <SX1276Read>
 80067c2:	4603      	mov	r3, r0
 80067c4:	b25b      	sxtb	r3, r3
 80067c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067ca:	b25b      	sxtb	r3, r3
 80067cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067d0:	b25b      	sxtb	r3, r3
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	4619      	mov	r1, r3
 80067d6:	2040      	movs	r0, #64	; 0x40
 80067d8:	f000 f952 	bl	8006a80 <SX1276Write>
        break;
 80067dc:	bf00      	nop
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 80067de:	4b09      	ldr	r3, [pc, #36]	; (8006804 <SX1276SetTx+0xec>)
 80067e0:	2202      	movs	r2, #2
 80067e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TimerStart( &TxTimeoutTimer );
 80067e6:	4806      	ldr	r0, [pc, #24]	; (8006800 <SX1276SetTx+0xe8>)
 80067e8:	f001 fffa 	bl	80087e0 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80067ec:	2003      	movs	r0, #3
 80067ee:	f000 f8c3 	bl	8006978 <SX1276SetOpMode>
}
 80067f2:	bf00      	nop
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20001464 	.word	0x20001464
 8006800:	2000138c 	.word	0x2000138c
 8006804:	200013bc 	.word	0x200013bc

08006808 <SX1276StartCad>:

void SX1276StartCad( void )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800680c:	4b10      	ldr	r3, [pc, #64]	; (8006850 <SX1276StartCad+0x48>)
 800680e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006812:	2b00      	cmp	r3, #0
 8006814:	d019      	beq.n	800684a <SX1276StartCad+0x42>
 8006816:	2b01      	cmp	r3, #1
 8006818:	d000      	beq.n	800681c <SX1276StartCad+0x14>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 800681a:	e017      	b.n	800684c <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800681c:	21fa      	movs	r1, #250	; 0xfa
 800681e:	2011      	movs	r0, #17
 8006820:	f000 f92e 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8006824:	2040      	movs	r0, #64	; 0x40
 8006826:	f000 f93b 	bl	8006aa0 <SX1276Read>
 800682a:	4603      	mov	r3, r0
 800682c:	f023 0303 	bic.w	r3, r3, #3
 8006830:	b2db      	uxtb	r3, r3
 8006832:	4619      	mov	r1, r3
 8006834:	2040      	movs	r0, #64	; 0x40
 8006836:	f000 f923 	bl	8006a80 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 800683a:	4b05      	ldr	r3, [pc, #20]	; (8006850 <SX1276StartCad+0x48>)
 800683c:	2203      	movs	r2, #3
 800683e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8006842:	2007      	movs	r0, #7
 8006844:	f000 f898 	bl	8006978 <SX1276SetOpMode>
        break;
 8006848:	e000      	b.n	800684c <SX1276StartCad+0x44>
        break;
 800684a:	bf00      	nop
    }
}
 800684c:	bf00      	nop
 800684e:	bd80      	pop	{r7, pc}
 8006850:	200013bc 	.word	0x200013bc

08006854 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b08e      	sub	sp, #56	; 0x38
 8006858:	af0a      	add	r7, sp, #40	; 0x28
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	70fb      	strb	r3, [r7, #3]
 8006860:	4613      	mov	r3, r2
 8006862:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8006864:	883b      	ldrh	r3, [r7, #0]
 8006866:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800686a:	fb02 f303 	mul.w	r3, r2, r3
 800686e:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7ff f825 	bl	80058c0 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8006876:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	9308      	str	r3, [sp, #32]
 800687e:	2300      	movs	r3, #0
 8006880:	9307      	str	r3, [sp, #28]
 8006882:	2300      	movs	r3, #0
 8006884:	9306      	str	r3, [sp, #24]
 8006886:	2300      	movs	r3, #0
 8006888:	9305      	str	r3, [sp, #20]
 800688a:	2300      	movs	r3, #0
 800688c:	9304      	str	r3, [sp, #16]
 800688e:	2300      	movs	r3, #0
 8006890:	9303      	str	r3, [sp, #12]
 8006892:	2305      	movs	r3, #5
 8006894:	9302      	str	r3, [sp, #8]
 8006896:	2300      	movs	r3, #0
 8006898:	9301      	str	r3, [sp, #4]
 800689a:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	2300      	movs	r3, #0
 80068a2:	2200      	movs	r2, #0
 80068a4:	2000      	movs	r0, #0
 80068a6:	f7ff fae7 	bl	8005e78 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 80068aa:	2031      	movs	r0, #49	; 0x31
 80068ac:	f000 f8f8 	bl	8006aa0 <SX1276Read>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	4619      	mov	r1, r3
 80068ba:	2031      	movs	r0, #49	; 0x31
 80068bc:	f000 f8e0 	bl	8006a80 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 80068c0:	21f0      	movs	r1, #240	; 0xf0
 80068c2:	2040      	movs	r0, #64	; 0x40
 80068c4:	f000 f8dc 	bl	8006a80 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 80068c8:	21a0      	movs	r1, #160	; 0xa0
 80068ca:	2041      	movs	r0, #65	; 0x41
 80068cc:	f000 f8d8 	bl	8006a80 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80068d0:	68f9      	ldr	r1, [r7, #12]
 80068d2:	4808      	ldr	r0, [pc, #32]	; (80068f4 <SX1276SetTxContinuousWave+0xa0>)
 80068d4:	f002 f93a 	bl	8008b4c <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING; //??
 80068d8:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <SX1276SetTxContinuousWave+0xa4>)
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TimerStart( &TxTimeoutTimer );
 80068e0:	4804      	ldr	r0, [pc, #16]	; (80068f4 <SX1276SetTxContinuousWave+0xa0>)
 80068e2:	f001 ff7d 	bl	80087e0 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80068e6:	2003      	movs	r0, #3
 80068e8:	f000 f846 	bl	8006978 <SX1276SetOpMode>
}
 80068ec:	bf00      	nop
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	2000138c 	.word	0x2000138c
 80068f8:	200013bc 	.word	0x200013bc

080068fc <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	4603      	mov	r3, r0
 8006904:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 8006906:	2300      	movs	r3, #0
 8006908:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 800690a:	79fb      	ldrb	r3, [r7, #7]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <SX1276ReadRssi+0x1a>
 8006910:	2b01      	cmp	r3, #1
 8006912:	d00b      	beq.n	800692c <SX1276ReadRssi+0x30>
 8006914:	e021      	b.n	800695a <SX1276ReadRssi+0x5e>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8006916:	2011      	movs	r0, #17
 8006918:	f000 f8c2 	bl	8006aa0 <SX1276Read>
 800691c:	4603      	mov	r3, r0
 800691e:	085b      	lsrs	r3, r3, #1
 8006920:	b2db      	uxtb	r3, r3
 8006922:	b29b      	uxth	r3, r3
 8006924:	425b      	negs	r3, r3
 8006926:	b29b      	uxth	r3, r3
 8006928:	81fb      	strh	r3, [r7, #14]
        break;
 800692a:	e01a      	b.n	8006962 <SX1276ReadRssi+0x66>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800692c:	4b10      	ldr	r3, [pc, #64]	; (8006970 <SX1276ReadRssi+0x74>)
 800692e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006930:	4a10      	ldr	r2, [pc, #64]	; (8006974 <SX1276ReadRssi+0x78>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d908      	bls.n	8006948 <SX1276ReadRssi+0x4c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8006936:	201b      	movs	r0, #27
 8006938:	f000 f8b2 	bl	8006aa0 <SX1276Read>
 800693c:	4603      	mov	r3, r0
 800693e:	b29b      	uxth	r3, r3
 8006940:	3b9d      	subs	r3, #157	; 0x9d
 8006942:	b29b      	uxth	r3, r3
 8006944:	81fb      	strh	r3, [r7, #14]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 8006946:	e00c      	b.n	8006962 <SX1276ReadRssi+0x66>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8006948:	201b      	movs	r0, #27
 800694a:	f000 f8a9 	bl	8006aa0 <SX1276Read>
 800694e:	4603      	mov	r3, r0
 8006950:	b29b      	uxth	r3, r3
 8006952:	3ba4      	subs	r3, #164	; 0xa4
 8006954:	b29b      	uxth	r3, r3
 8006956:	81fb      	strh	r3, [r7, #14]
        break;
 8006958:	e003      	b.n	8006962 <SX1276ReadRssi+0x66>
    default:
        rssi = -1;
 800695a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800695e:	81fb      	strh	r3, [r7, #14]
        break;
 8006960:	bf00      	nop
    }
    return rssi;
 8006962:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	200013bc 	.word	0x200013bc
 8006974:	1f4add40 	.word	0x1f4add40

08006978 <SX1276SetOpMode>:

static void SX1276SetOpMode( uint8_t opMode )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	4603      	mov	r3, r0
 8006980:	71fb      	strb	r3, [r7, #7]
            SX1276DbgPinTxWrite( 0 );
            SX1276DbgPinRxWrite( 0 );
            break;
    }
#endif
    if( opMode == RF_OPMODE_SLEEP )
 8006982:	79fb      	ldrb	r3, [r7, #7]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d103      	bne.n	8006990 <SX1276SetOpMode+0x18>
    {
        SX1276SetAntSwLowPower( true );
 8006988:	2001      	movs	r0, #1
 800698a:	f001 fe77 	bl	800867c <SX1276SetAntSwLowPower>
 800698e:	e009      	b.n	80069a4 <SX1276SetOpMode+0x2c>
    }
    else
    {
        // Enable TCXO if operating mode different from SLEEP.
        SX1276SetBoardTcxo( true );
 8006990:	2001      	movs	r0, #1
 8006992:	f001 fd7f 	bl	8008494 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 8006996:	2000      	movs	r0, #0
 8006998:	f001 fe70 	bl	800867c <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 800699c:	79fb      	ldrb	r3, [r7, #7]
 800699e:	4618      	mov	r0, r3
 80069a0:	f001 fe96 	bl	80086d0 <SX1276SetAntSw>
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80069a4:	2001      	movs	r0, #1
 80069a6:	f000 f87b 	bl	8006aa0 <SX1276Read>
 80069aa:	4603      	mov	r3, r0
 80069ac:	b25b      	sxtb	r3, r3
 80069ae:	f023 0307 	bic.w	r3, r3, #7
 80069b2:	b25a      	sxtb	r2, r3
 80069b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	b25b      	sxtb	r3, r3
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	4619      	mov	r1, r3
 80069c0:	2001      	movs	r0, #1
 80069c2:	f000 f85d 	bl	8006a80 <SX1276Write>
}
 80069c6:	bf00      	nop
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4603      	mov	r3, r0
 80069d8:	71fb      	strb	r3, [r7, #7]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 80069da:	2001      	movs	r0, #1
 80069dc:	f000 f860 	bl	8006aa0 <SX1276Read>
 80069e0:	4603      	mov	r3, r0
 80069e2:	b25b      	sxtb	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	da04      	bge.n	80069f2 <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 80069e8:	4b24      	ldr	r3, [pc, #144]	; (8006a7c <SX1276SetModem+0xac>)
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069f0:	e003      	b.n	80069fa <SX1276SetModem+0x2a>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 80069f2:	4b22      	ldr	r3, [pc, #136]	; (8006a7c <SX1276SetModem+0xac>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }

    if( SX1276.Settings.Modem == modem )
 80069fa:	4b20      	ldr	r3, [pc, #128]	; (8006a7c <SX1276SetModem+0xac>)
 80069fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a00:	79fa      	ldrb	r2, [r7, #7]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d036      	beq.n	8006a74 <SX1276SetModem+0xa4>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8006a06:	4a1d      	ldr	r2, [pc, #116]	; (8006a7c <SX1276SetModem+0xac>)
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    switch( SX1276.Settings.Modem )
 8006a0e:	4b1b      	ldr	r3, [pc, #108]	; (8006a7c <SX1276SetModem+0xac>)
 8006a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d016      	beq.n	8006a46 <SX1276SetModem+0x76>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006a18:	2000      	movs	r0, #0
 8006a1a:	f7ff ffad 	bl	8006978 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8006a1e:	2001      	movs	r0, #1
 8006a20:	f000 f83e 	bl	8006aa0 <SX1276Read>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	2001      	movs	r0, #1
 8006a30:	f000 f826 	bl	8006a80 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8006a34:	2100      	movs	r1, #0
 8006a36:	2040      	movs	r0, #64	; 0x40
 8006a38:	f000 f822 	bl	8006a80 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8006a3c:	2130      	movs	r1, #48	; 0x30
 8006a3e:	2041      	movs	r0, #65	; 0x41
 8006a40:	f000 f81e 	bl	8006a80 <SX1276Write>
        break;
 8006a44:	e017      	b.n	8006a76 <SX1276SetModem+0xa6>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006a46:	2000      	movs	r0, #0
 8006a48:	f7ff ff96 	bl	8006978 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8006a4c:	2001      	movs	r0, #1
 8006a4e:	f000 f827 	bl	8006aa0 <SX1276Read>
 8006a52:	4603      	mov	r3, r0
 8006a54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	2001      	movs	r0, #1
 8006a5e:	f000 f80f 	bl	8006a80 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8006a62:	2100      	movs	r1, #0
 8006a64:	2040      	movs	r0, #64	; 0x40
 8006a66:	f000 f80b 	bl	8006a80 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	2041      	movs	r0, #65	; 0x41
 8006a6e:	f000 f807 	bl	8006a80 <SX1276Write>
        break;
 8006a72:	e000      	b.n	8006a76 <SX1276SetModem+0xa6>
        return;
 8006a74:	bf00      	nop
    }
}
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	200013bc 	.word	0x200013bc

08006a80 <SX1276Write>:

void SX1276Write( uint32_t addr, uint8_t data )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( addr, &data, 1 );
 8006a8c:	1cfb      	adds	r3, r7, #3
 8006a8e:	2201      	movs	r2, #1
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f814 	bl	8006ac0 <SX1276WriteBuffer>
}
 8006a98:	bf00      	nop
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <SX1276Read>:

uint8_t SX1276Read( uint32_t addr )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 8006aa8:	f107 030f 	add.w	r3, r7, #15
 8006aac:	2201      	movs	r2, #1
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f839 	bl	8006b28 <SX1276ReadBuffer>
    return data;
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	4613      	mov	r3, r2
 8006acc:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 8006ace:	2100      	movs	r1, #0
 8006ad0:	4813      	ldr	r0, [pc, #76]	; (8006b20 <SX1276WriteBuffer+0x60>)
 8006ad2:	f7f9 fe07 	bl	80006e4 <GpioWrite>

    SpiInOut( &SX1276.Spi, addr | 0x80 );
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4810      	ldr	r0, [pc, #64]	; (8006b24 <SX1276WriteBuffer+0x64>)
 8006ae4:	f7f9 ffe8 	bl	8000ab8 <SpiInOut>
    for( i = 0; i < size; i++ )
 8006ae8:	2300      	movs	r3, #0
 8006aea:	75fb      	strb	r3, [r7, #23]
 8006aec:	e00b      	b.n	8006b06 <SX1276WriteBuffer+0x46>
    {
        SpiInOut( &SX1276.Spi, buffer[i] );
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	4413      	add	r3, r2
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	4619      	mov	r1, r3
 8006afa:	480a      	ldr	r0, [pc, #40]	; (8006b24 <SX1276WriteBuffer+0x64>)
 8006afc:	f7f9 ffdc 	bl	8000ab8 <SpiInOut>
    for( i = 0; i < size; i++ )
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
 8006b02:	3301      	adds	r3, #1
 8006b04:	75fb      	strb	r3, [r7, #23]
 8006b06:	7dfa      	ldrb	r2, [r7, #23]
 8006b08:	79fb      	ldrb	r3, [r7, #7]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d3ef      	bcc.n	8006aee <SX1276WriteBuffer+0x2e>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 8006b0e:	2101      	movs	r1, #1
 8006b10:	4803      	ldr	r0, [pc, #12]	; (8006b20 <SX1276WriteBuffer+0x60>)
 8006b12:	f7f9 fde7 	bl	80006e4 <GpioWrite>
}
 8006b16:	bf00      	nop
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	200013f8 	.word	0x200013f8
 8006b24:	200013f4 	.word	0x200013f4

08006b28 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	4613      	mov	r3, r2
 8006b34:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 8006b36:	2100      	movs	r1, #0
 8006b38:	4814      	ldr	r0, [pc, #80]	; (8006b8c <SX1276ReadBuffer+0x64>)
 8006b3a:	f7f9 fdd3 	bl	80006e4 <GpioWrite>

    SpiInOut( &SX1276.Spi, addr & 0x7F );
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4811      	ldr	r0, [pc, #68]	; (8006b90 <SX1276ReadBuffer+0x68>)
 8006b4c:	f7f9 ffb4 	bl	8000ab8 <SpiInOut>

    for( i = 0; i < size; i++ )
 8006b50:	2300      	movs	r3, #0
 8006b52:	75fb      	strb	r3, [r7, #23]
 8006b54:	e00d      	b.n	8006b72 <SX1276ReadBuffer+0x4a>
    {
        buffer[i] = SpiInOut( &SX1276.Spi, 0 );
 8006b56:	2100      	movs	r1, #0
 8006b58:	480d      	ldr	r0, [pc, #52]	; (8006b90 <SX1276ReadBuffer+0x68>)
 8006b5a:	f7f9 ffad 	bl	8000ab8 <SpiInOut>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	4619      	mov	r1, r3
 8006b62:	7dfb      	ldrb	r3, [r7, #23]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	4413      	add	r3, r2
 8006b68:	b2ca      	uxtb	r2, r1
 8006b6a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	75fb      	strb	r3, [r7, #23]
 8006b72:	7dfa      	ldrb	r2, [r7, #23]
 8006b74:	79fb      	ldrb	r3, [r7, #7]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d3ed      	bcc.n	8006b56 <SX1276ReadBuffer+0x2e>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	4803      	ldr	r0, [pc, #12]	; (8006b8c <SX1276ReadBuffer+0x64>)
 8006b7e:	f7f9 fdb1 	bl	80006e4 <GpioWrite>
}
 8006b82:	bf00      	nop
 8006b84:	3718      	adds	r7, #24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	200013f8 	.word	0x200013f8
 8006b90:	200013f4 	.word	0x200013f4

08006b94 <SX1276WriteFifo>:

static void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 8006ba0:	78fb      	ldrb	r3, [r7, #3]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	6879      	ldr	r1, [r7, #4]
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	f7ff ff8a 	bl	8006ac0 <SX1276WriteBuffer>
}
 8006bac:	bf00      	nop
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <SX1276ReadFifo>:

static void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	70fb      	strb	r3, [r7, #3]
    SX1276ReadBuffer( 0, buffer, size );
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	f7ff ffae 	bl	8006b28 <SX1276ReadBuffer>
}
 8006bcc:	bf00      	nop
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	4603      	mov	r3, r0
 8006bdc:	460a      	mov	r2, r1
 8006bde:	71fb      	strb	r3, [r7, #7]
 8006be0:	4613      	mov	r3, r2
 8006be2:	71bb      	strb	r3, [r7, #6]
    SX1276SetModem( modem );
 8006be4:	79fb      	ldrb	r3, [r7, #7]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff fef2 	bl	80069d0 <SX1276SetModem>

    switch( modem )
 8006bec:	79fb      	ldrb	r3, [r7, #7]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d002      	beq.n	8006bf8 <SX1276SetMaxPayloadLength+0x24>
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d00e      	beq.n	8006c14 <SX1276SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8006bf6:	e014      	b.n	8006c22 <SX1276SetMaxPayloadLength+0x4e>
        if( SX1276.Settings.Fsk.FixLen == false )
 8006bf8:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <SX1276SetMaxPayloadLength+0x58>)
 8006bfa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006bfe:	f083 0301 	eor.w	r3, r3, #1
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00b      	beq.n	8006c20 <SX1276SetMaxPayloadLength+0x4c>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8006c08:	79bb      	ldrb	r3, [r7, #6]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	2032      	movs	r0, #50	; 0x32
 8006c0e:	f7ff ff37 	bl	8006a80 <SX1276Write>
        break;
 8006c12:	e005      	b.n	8006c20 <SX1276SetMaxPayloadLength+0x4c>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8006c14:	79bb      	ldrb	r3, [r7, #6]
 8006c16:	4619      	mov	r1, r3
 8006c18:	2023      	movs	r0, #35	; 0x23
 8006c1a:	f7ff ff31 	bl	8006a80 <SX1276Write>
        break;
 8006c1e:	e000      	b.n	8006c22 <SX1276SetMaxPayloadLength+0x4e>
        break;
 8006c20:	bf00      	nop
}
 8006c22:	bf00      	nop
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	200013bc 	.word	0x200013bc

08006c30 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	71fb      	strb	r3, [r7, #7]
    SX1276SetModem( MODEM_LORA );
 8006c3a:	2001      	movs	r0, #1
 8006c3c:	f7ff fec8 	bl	80069d0 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8006c40:	4a09      	ldr	r2, [pc, #36]	; (8006c68 <SX1276SetPublicNetwork+0x38>)
 8006c42:	79fb      	ldrb	r3, [r7, #7]
 8006c44:	f882 309c 	strb.w	r3, [r2, #156]	; 0x9c
    if( enable == true )
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d004      	beq.n	8006c58 <SX1276SetPublicNetwork+0x28>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8006c4e:	2134      	movs	r1, #52	; 0x34
 8006c50:	2039      	movs	r0, #57	; 0x39
 8006c52:	f7ff ff15 	bl	8006a80 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 8006c56:	e003      	b.n	8006c60 <SX1276SetPublicNetwork+0x30>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8006c58:	2112      	movs	r1, #18
 8006c5a:	2039      	movs	r0, #57	; 0x39
 8006c5c:	f7ff ff10 	bl	8006a80 <SX1276Write>
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	200013bc 	.word	0x200013bc

08006c6c <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	af00      	add	r7, sp, #0
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 8006c70:	f001 fc1a 	bl	80084a8 <SX1276GetBoardTcxoWakeupTime>
 8006c74:	4603      	mov	r3, r0
 8006c76:	3301      	adds	r3, #1
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <SX1276ConvertPllStepToFreqInHz>:

static uint32_t SX1276ConvertPllStepToFreqInHz( uint32_t pllSteps )
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
    uint32_t freqInHzInt;
    uint32_t freqInHzFrac;
    
    // freqInHz = pllSteps * ( SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	0a1b      	lsrs	r3, r3, #8
 8006c88:	60fb      	str	r3, [r7, #12]
    freqInHzFrac = pllSteps - ( freqInHzInt << SX1276_PLL_STEP_SHIFT_AMOUNT );
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	021b      	lsls	r3, r3, #8
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	60bb      	str	r3, [r7, #8]
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f643 5209 	movw	r2, #15625	; 0x3d09
 8006c9a:	fb02 f203 	mul.w	r2, r2, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	f643 5109 	movw	r1, #15625	; 0x3d09
 8006ca4:	fb01 f303 	mul.w	r3, r1, r3
 8006ca8:	3380      	adds	r3, #128	; 0x80
 8006caa:	0a1b      	lsrs	r3, r3, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8006cac:	4413      	add	r3, r2
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr

08006cb8 <SX1276ConvertFreqInHzToPllStep>:

static uint32_t SX1276ConvertFreqInHzToPllStep( uint32_t freqInHz )
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
    uint32_t stepsInt;
    uint32_t stepsFrac;

    // pllSteps = freqInHz / (SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a0f      	ldr	r2, [pc, #60]	; (8006d00 <SX1276ConvertFreqInHzToPllStep+0x48>)
 8006cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc8:	0b1b      	lsrs	r3, r3, #12
 8006cca:	60fb      	str	r3, [r7, #12]
    stepsFrac = freqInHz - ( stepsInt * SX1276_PLL_STEP_SCALED );
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f643 5209 	movw	r2, #15625	; 0x3d09
 8006cd2:	fb02 f303 	mul.w	r3, r2, r3
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	60bb      	str	r3, [r7, #8]
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	021a      	lsls	r2, r3, #8
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	021b      	lsls	r3, r3, #8
 8006ce4:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8006ce8:	3304      	adds	r3, #4
 8006cea:	4905      	ldr	r1, [pc, #20]	; (8006d00 <SX1276ConvertFreqInHzToPllStep+0x48>)
 8006cec:	fba1 1303 	umull	r1, r3, r1, r3
 8006cf0:	0b1b      	lsrs	r3, r3, #12
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8006cf2:	4413      	add	r3, r2
             SX1276_PLL_STEP_SCALED );
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	431bde83 	.word	0x431bde83

08006d04 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	73fb      	strb	r3, [r7, #15]
 8006d10:	e017      	b.n	8006d42 <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	4a0f      	ldr	r2, [pc, #60]	; (8006d54 <GetFskBandwidthRegValue+0x50>)
 8006d16:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d30d      	bcc.n	8006d3c <GetFskBandwidthRegValue+0x38>
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	3301      	adds	r3, #1
 8006d24:	4a0b      	ldr	r2, [pc, #44]	; (8006d54 <GetFskBandwidthRegValue+0x50>)
 8006d26:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d205      	bcs.n	8006d3c <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
 8006d32:	4a08      	ldr	r2, [pc, #32]	; (8006d54 <GetFskBandwidthRegValue+0x50>)
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	4413      	add	r3, r2
 8006d38:	791b      	ldrb	r3, [r3, #4]
 8006d3a:	e006      	b.n	8006d4a <GetFskBandwidthRegValue+0x46>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	73fb      	strb	r3, [r7, #15]
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	2b14      	cmp	r3, #20
 8006d46:	d9e4      	bls.n	8006d12 <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8006d48:	e7fe      	b.n	8006d48 <GetFskBandwidthRegValue+0x44>
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bc80      	pop	{r7}
 8006d52:	4770      	bx	lr
 8006d54:	0800a088 	.word	0x0800a088

08006d58 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
    uint32_t bandwidthInHz = 0;
 8006d60:	2300      	movs	r3, #0
 8006d62:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d00f      	beq.n	8006d8a <SX1276GetLoRaBandwidthInHz+0x32>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d80f      	bhi.n	8006d90 <SX1276GetLoRaBandwidthInHz+0x38>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <SX1276GetLoRaBandwidthInHz+0x26>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d003      	beq.n	8006d84 <SX1276GetLoRaBandwidthInHz+0x2c>
 8006d7c:	e008      	b.n	8006d90 <SX1276GetLoRaBandwidthInHz+0x38>
    {
    case 0: // 125 kHz
        bandwidthInHz = 125000UL;
 8006d7e:	4b07      	ldr	r3, [pc, #28]	; (8006d9c <SX1276GetLoRaBandwidthInHz+0x44>)
 8006d80:	60fb      	str	r3, [r7, #12]
        break;
 8006d82:	e005      	b.n	8006d90 <SX1276GetLoRaBandwidthInHz+0x38>
    case 1: // 250 kHz
        bandwidthInHz = 250000UL;
 8006d84:	4b06      	ldr	r3, [pc, #24]	; (8006da0 <SX1276GetLoRaBandwidthInHz+0x48>)
 8006d86:	60fb      	str	r3, [r7, #12]
        break;
 8006d88:	e002      	b.n	8006d90 <SX1276GetLoRaBandwidthInHz+0x38>
    case 2: // 500 kHz
        bandwidthInHz = 500000UL;
 8006d8a:	4b06      	ldr	r3, [pc, #24]	; (8006da4 <SX1276GetLoRaBandwidthInHz+0x4c>)
 8006d8c:	60fb      	str	r3, [r7, #12]
        break;
 8006d8e:	bf00      	nop
    }

    return bandwidthInHz;
 8006d90:	68fb      	ldr	r3, [r7, #12]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bc80      	pop	{r7}
 8006d9a:	4770      	bx	lr
 8006d9c:	0001e848 	.word	0x0001e848
 8006da0:	0003d090 	.word	0x0003d090
 8006da4:	0007a120 	.word	0x0007a120

08006da8 <SX1276GetGfskTimeOnAirNumerator>:

static uint32_t SX1276GetGfskTimeOnAirNumerator( uint16_t preambleLen, bool fixLen,
                                                 uint8_t payloadLen, bool crcOn )
{
 8006da8:	b490      	push	{r4, r7}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	4604      	mov	r4, r0
 8006db0:	4608      	mov	r0, r1
 8006db2:	4611      	mov	r1, r2
 8006db4:	461a      	mov	r2, r3
 8006db6:	4623      	mov	r3, r4
 8006db8:	80fb      	strh	r3, [r7, #6]
 8006dba:	4603      	mov	r3, r0
 8006dbc:	717b      	strb	r3, [r7, #5]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	713b      	strb	r3, [r7, #4]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	70fb      	strb	r3, [r7, #3]
    const uint8_t syncWordLength = 3;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	73fb      	strb	r3, [r7, #15]

    return ( preambleLen << 3 ) +
 8006dca:	88fb      	ldrh	r3, [r7, #6]
 8006dcc:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8006dce:	797a      	ldrb	r2, [r7, #5]
 8006dd0:	f082 0201 	eor.w	r2, r2, #1
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	2a00      	cmp	r2, #0
 8006dd8:	d001      	beq.n	8006dde <SX1276GetGfskTimeOnAirNumerator+0x36>
 8006dda:	2208      	movs	r2, #8
 8006ddc:	e000      	b.n	8006de0 <SX1276GetGfskTimeOnAirNumerator+0x38>
 8006dde:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8006de0:	441a      	add	r2, r3
             ( syncWordLength << 3 ) +
 8006de2:	7bfb      	ldrb	r3, [r7, #15]
 8006de4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8006de6:	441a      	add	r2, r3
             ( ( payloadLen +
 8006de8:	793b      	ldrb	r3, [r7, #4]
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 8006dea:	78f9      	ldrb	r1, [r7, #3]
 8006dec:	2900      	cmp	r1, #0
 8006dee:	d001      	beq.n	8006df4 <SX1276GetGfskTimeOnAirNumerator+0x4c>
 8006df0:	2102      	movs	r1, #2
 8006df2:	e000      	b.n	8006df6 <SX1276GetGfskTimeOnAirNumerator+0x4e>
 8006df4:	2100      	movs	r1, #0
               ( 0 ) + // Address filter size
 8006df6:	440b      	add	r3, r1
               ) << 3 
 8006df8:	00db      	lsls	r3, r3, #3
             ( syncWordLength << 3 ) +
 8006dfa:	4413      	add	r3, r2
             );
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bc90      	pop	{r4, r7}
 8006e04:	4770      	bx	lr

08006e06 <SX1276GetLoRaTimeOnAirNumerator>:

static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 8006e06:	b480      	push	{r7}
 8006e08:	b08b      	sub	sp, #44	; 0x2c
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	60f8      	str	r0, [r7, #12]
 8006e0e:	60b9      	str	r1, [r7, #8]
 8006e10:	4611      	mov	r1, r2
 8006e12:	461a      	mov	r2, r3
 8006e14:	460b      	mov	r3, r1
 8006e16:	71fb      	strb	r3, [r7, #7]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8006e1c:	79fb      	ldrb	r3, [r7, #7]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8006e22:	2300      	movs	r3, #0
 8006e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2b05      	cmp	r3, #5
 8006e2c:	d002      	beq.n	8006e34 <SX1276GetLoRaTimeOnAirNumerator+0x2e>
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	2b06      	cmp	r3, #6
 8006e32:	d104      	bne.n	8006e3e <SX1276GetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8006e34:	88bb      	ldrh	r3, [r7, #4]
 8006e36:	2b0b      	cmp	r3, #11
 8006e38:	d801      	bhi.n	8006e3e <SX1276GetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8006e3a:	230c      	movs	r3, #12
 8006e3c:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d105      	bne.n	8006e50 <SX1276GetLoRaTimeOnAirNumerator+0x4a>
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2b0b      	cmp	r3, #11
 8006e48:	d008      	beq.n	8006e5c <SX1276GetLoRaTimeOnAirNumerator+0x56>
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2b0c      	cmp	r3, #12
 8006e4e:	d005      	beq.n	8006e5c <SX1276GetLoRaTimeOnAirNumerator+0x56>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d105      	bne.n	8006e62 <SX1276GetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b0c      	cmp	r3, #12
 8006e5a:	d102      	bne.n	8006e62 <SX1276GetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006e62:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006e66:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8006e68:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006e6c:	2a00      	cmp	r2, #0
 8006e6e:	d001      	beq.n	8006e74 <SX1276GetLoRaTimeOnAirNumerator+0x6e>
 8006e70:	2210      	movs	r2, #16
 8006e72:	e000      	b.n	8006e76 <SX1276GetLoRaTimeOnAirNumerator+0x70>
 8006e74:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006e76:	4413      	add	r3, r2
 8006e78:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8006e7e:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8006e80:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8006e84:	2a00      	cmp	r2, #0
 8006e86:	d001      	beq.n	8006e8c <SX1276GetLoRaTimeOnAirNumerator+0x86>
 8006e88:	2200      	movs	r2, #0
 8006e8a:	e000      	b.n	8006e8e <SX1276GetLoRaTimeOnAirNumerator+0x88>
 8006e8c:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8006e8e:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006e90:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b06      	cmp	r3, #6
 8006e96:	d803      	bhi.n	8006ea0 <SX1276GetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	623b      	str	r3, [r7, #32]
 8006e9e:	e00e      	b.n	8006ebe <SX1276GetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	3308      	adds	r3, #8
 8006ea4:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8006ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d004      	beq.n	8006eb8 <SX1276GetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	3b02      	subs	r3, #2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	623b      	str	r3, [r7, #32]
 8006eb6:	e002      	b.n	8006ebe <SX1276GetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	da01      	bge.n	8006ec8 <SX1276GetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8006ec8:	69fa      	ldr	r2, [r7, #28]
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	4413      	add	r3, r2
 8006ece:	1e5a      	subs	r2, r3, #1
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	fb92 f3f3 	sdiv	r3, r2, r3
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	fb02 f203 	mul.w	r2, r2, r3
 8006edc:	88bb      	ldrh	r3, [r7, #4]
 8006ede:	4413      	add	r3, r2
    int32_t intermediate =
 8006ee0:	330c      	adds	r3, #12
 8006ee2:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2b06      	cmp	r3, #6
 8006ee8:	d802      	bhi.n	8006ef0 <SX1276GetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	3302      	adds	r3, #2
 8006eee:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	1c5a      	adds	r2, r3, #1
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	3b02      	subs	r3, #2
 8006efa:	fa02 f303 	lsl.w	r3, r2, r3
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	372c      	adds	r7, #44	; 0x2c
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bc80      	pop	{r7}
 8006f06:	4770      	bx	lr

08006f08 <SX1276OnTimeoutIrq>:

static void SX1276OnTimeoutIrq( void* context )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 8006f10:	4b4d      	ldr	r3, [pc, #308]	; (8007048 <SX1276OnTimeoutIrq+0x140>)
 8006f12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d002      	beq.n	8006f20 <SX1276OnTimeoutIrq+0x18>
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d043      	beq.n	8006fa6 <SX1276OnTimeoutIrq+0x9e>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8006f1e:	e08e      	b.n	800703e <SX1276OnTimeoutIrq+0x136>
        if( SX1276.Settings.Modem == MODEM_FSK )
 8006f20:	4b49      	ldr	r3, [pc, #292]	; (8007048 <SX1276OnTimeoutIrq+0x140>)
 8006f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d12f      	bne.n	8006f8a <SX1276OnTimeoutIrq+0x82>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006f2a:	4b47      	ldr	r3, [pc, #284]	; (8007048 <SX1276OnTimeoutIrq+0x140>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8006f32:	4b45      	ldr	r3, [pc, #276]	; (8007048 <SX1276OnTimeoutIrq+0x140>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006f3a:	4b43      	ldr	r3, [pc, #268]	; (8007048 <SX1276OnTimeoutIrq+0x140>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8006f42:	4b41      	ldr	r3, [pc, #260]	; (8007048 <SX1276OnTimeoutIrq+0x140>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8006f4a:	210b      	movs	r1, #11
 8006f4c:	203e      	movs	r0, #62	; 0x3e
 8006f4e:	f7ff fd97 	bl	8006a80 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8006f52:	2110      	movs	r1, #16
 8006f54:	203f      	movs	r0, #63	; 0x3f
 8006f56:	f7ff fd93 	bl	8006a80 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8006f5a:	4b3b      	ldr	r3, [pc, #236]	; (8007048 <SX1276OnTimeoutIrq+0x140>)
 8006f5c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00b      	beq.n	8006f7c <SX1276OnTimeoutIrq+0x74>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006f64:	200d      	movs	r0, #13
 8006f66:	f7ff fd9b 	bl	8006aa0 <SX1276Read>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	4619      	mov	r1, r3
 8006f74:	200d      	movs	r0, #13
 8006f76:	f7ff fd83 	bl	8006a80 <SX1276Write>
 8006f7a:	e006      	b.n	8006f8a <SX1276OnTimeoutIrq+0x82>
                SX1276.Settings.State = RF_IDLE;
 8006f7c:	4b32      	ldr	r3, [pc, #200]	; (8007048 <SX1276OnTimeoutIrq+0x140>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                TimerStop( &RxTimeoutSyncWord );
 8006f84:	4831      	ldr	r0, [pc, #196]	; (800704c <SX1276OnTimeoutIrq+0x144>)
 8006f86:	f001 fd4b 	bl	8008a20 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006f8a:	4b31      	ldr	r3, [pc, #196]	; (8007050 <SX1276OnTimeoutIrq+0x148>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d052      	beq.n	8007038 <SX1276OnTimeoutIrq+0x130>
 8006f92:	4b2f      	ldr	r3, [pc, #188]	; (8007050 <SX1276OnTimeoutIrq+0x148>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d04d      	beq.n	8007038 <SX1276OnTimeoutIrq+0x130>
            RadioEvents->RxTimeout( );
 8006f9c:	4b2c      	ldr	r3, [pc, #176]	; (8007050 <SX1276OnTimeoutIrq+0x148>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	4798      	blx	r3
        break;
 8006fa4:	e048      	b.n	8007038 <SX1276OnTimeoutIrq+0x130>
        SX1276Reset( );
 8006fa6:	f001 fa87 	bl	80084b8 <SX1276Reset>
        RxChainCalibration( );
 8006faa:	f7fe fd29 	bl	8005a00 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006fae:	2000      	movs	r0, #0
 8006fb0:	f7ff fce2 	bl	8006978 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	73fb      	strb	r3, [r7, #15]
 8006fb8:	e020      	b.n	8006ffc <SX1276OnTimeoutIrq+0xf4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8006fba:	7bfa      	ldrb	r2, [r7, #15]
 8006fbc:	4925      	ldr	r1, [pc, #148]	; (8007054 <SX1276OnTimeoutIrq+0x14c>)
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	005b      	lsls	r3, r3, #1
 8006fc2:	4413      	add	r3, r2
 8006fc4:	440b      	add	r3, r1
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7ff fd01 	bl	80069d0 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8006fce:	7bfa      	ldrb	r2, [r7, #15]
 8006fd0:	4920      	ldr	r1, [pc, #128]	; (8007054 <SX1276OnTimeoutIrq+0x14c>)
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	4413      	add	r3, r2
 8006fd8:	440b      	add	r3, r1
 8006fda:	3301      	adds	r3, #1
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	7bfa      	ldrb	r2, [r7, #15]
 8006fe2:	491c      	ldr	r1, [pc, #112]	; (8007054 <SX1276OnTimeoutIrq+0x14c>)
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	4413      	add	r3, r2
 8006fea:	440b      	add	r3, r1
 8006fec:	3302      	adds	r3, #2
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	f7ff fd45 	bl	8006a80 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	73fb      	strb	r3, [r7, #15]
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	2b0f      	cmp	r3, #15
 8007000:	d9db      	bls.n	8006fba <SX1276OnTimeoutIrq+0xb2>
        SX1276SetModem( MODEM_FSK );
 8007002:	2000      	movs	r0, #0
 8007004:	f7ff fce4 	bl	80069d0 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8007008:	4b0f      	ldr	r3, [pc, #60]	; (8007048 <SX1276OnTimeoutIrq+0x140>)
 800700a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800700e:	4618      	mov	r0, r3
 8007010:	f7ff fe0e 	bl	8006c30 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8007014:	4b0c      	ldr	r3, [pc, #48]	; (8007048 <SX1276OnTimeoutIrq+0x140>)
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800701c:	4b0c      	ldr	r3, [pc, #48]	; (8007050 <SX1276OnTimeoutIrq+0x148>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00b      	beq.n	800703c <SX1276OnTimeoutIrq+0x134>
 8007024:	4b0a      	ldr	r3, [pc, #40]	; (8007050 <SX1276OnTimeoutIrq+0x148>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d006      	beq.n	800703c <SX1276OnTimeoutIrq+0x134>
            RadioEvents->TxTimeout( );
 800702e:	4b08      	ldr	r3, [pc, #32]	; (8007050 <SX1276OnTimeoutIrq+0x148>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	4798      	blx	r3
        break;
 8007036:	e001      	b.n	800703c <SX1276OnTimeoutIrq+0x134>
        break;
 8007038:	bf00      	nop
 800703a:	e000      	b.n	800703e <SX1276OnTimeoutIrq+0x136>
        break;
 800703c:	bf00      	nop
    }
}
 800703e:	bf00      	nop
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	200013bc 	.word	0x200013bc
 800704c:	200013a4 	.word	0x200013a4
 8007050:	2000106c 	.word	0x2000106c
 8007054:	0800a058 	.word	0x0800a058

08007058 <SX1276OnDio0Irq>:

static void SX1276OnDio0Irq( void* context )
{
 8007058:	b590      	push	{r4, r7, lr}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
    volatile uint8_t irqFlags = 0;
 8007060:	2300      	movs	r3, #0
 8007062:	737b      	strb	r3, [r7, #13]

    switch( SX1276.Settings.State )
 8007064:	4bae      	ldr	r3, [pc, #696]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 8007066:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800706a:	2b01      	cmp	r3, #1
 800706c:	d003      	beq.n	8007076 <SX1276OnDio0Irq+0x1e>
 800706e:	2b02      	cmp	r3, #2
 8007070:	f000 81de 	beq.w	8007430 <SX1276OnDio0Irq+0x3d8>
                }
                break;
            }
            break;
        default:
            break;
 8007074:	e1fb      	b.n	800746e <SX1276OnDio0Irq+0x416>
            switch( SX1276.Settings.Modem )
 8007076:	4baa      	ldr	r3, [pc, #680]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 8007078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <SX1276OnDio0Irq+0x30>
 8007080:	2b01      	cmp	r3, #1
 8007082:	f000 80ec 	beq.w	800725e <SX1276OnDio0Irq+0x206>
                break;
 8007086:	e1d2      	b.n	800742e <SX1276OnDio0Irq+0x3d6>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8007088:	4ba5      	ldr	r3, [pc, #660]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 800708a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800708e:	2b00      	cmp	r3, #0
 8007090:	d04e      	beq.n	8007130 <SX1276OnDio0Irq+0xd8>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8007092:	203f      	movs	r0, #63	; 0x3f
 8007094:	f7ff fd04 	bl	8006aa0 <SX1276Read>
 8007098:	4603      	mov	r3, r0
 800709a:	737b      	strb	r3, [r7, #13]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800709c:	7b7b      	ldrb	r3, [r7, #13]
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d043      	beq.n	8007130 <SX1276OnDio0Irq+0xd8>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80070a8:	210b      	movs	r1, #11
 80070aa:	203e      	movs	r0, #62	; 0x3e
 80070ac:	f7ff fce8 	bl	8006a80 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80070b0:	2110      	movs	r1, #16
 80070b2:	203f      	movs	r0, #63	; 0x3f
 80070b4:	f7ff fce4 	bl	8006a80 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80070b8:	489a      	ldr	r0, [pc, #616]	; (8007324 <SX1276OnDio0Irq+0x2cc>)
 80070ba:	f001 fcb1 	bl	8008a20 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 80070be:	4b98      	ldr	r3, [pc, #608]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 80070c0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80070c4:	f083 0301 	eor.w	r3, r3, #1
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d007      	beq.n	80070de <SX1276OnDio0Irq+0x86>
                            TimerStop( &RxTimeoutSyncWord );
 80070ce:	4896      	ldr	r0, [pc, #600]	; (8007328 <SX1276OnDio0Irq+0x2d0>)
 80070d0:	f001 fca6 	bl	8008a20 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 80070d4:	4b92      	ldr	r3, [pc, #584]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070dc:	e00a      	b.n	80070f4 <SX1276OnDio0Irq+0x9c>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80070de:	200d      	movs	r0, #13
 80070e0:	f7ff fcde 	bl	8006aa0 <SX1276Read>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	4619      	mov	r1, r3
 80070ee:	200d      	movs	r0, #13
 80070f0:	f7ff fcc6 	bl	8006a80 <SX1276Write>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80070f4:	4b8d      	ldr	r3, [pc, #564]	; (800732c <SX1276OnDio0Irq+0x2d4>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d008      	beq.n	800710e <SX1276OnDio0Irq+0xb6>
 80070fc:	4b8b      	ldr	r3, [pc, #556]	; (800732c <SX1276OnDio0Irq+0x2d4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <SX1276OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 8007106:	4b89      	ldr	r3, [pc, #548]	; (800732c <SX1276OnDio0Irq+0x2d4>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800710e:	4b84      	ldr	r3, [pc, #528]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8007116:	4b82      	ldr	r3, [pc, #520]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800711e:	4b80      	ldr	r3, [pc, #512]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 8007120:	2200      	movs	r2, #0
 8007122:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8007126:	4b7e      	ldr	r3, [pc, #504]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 8007128:	2200      	movs	r2, #0
 800712a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                        break;
 800712e:	e17e      	b.n	800742e <SX1276OnDio0Irq+0x3d6>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8007130:	4b7b      	ldr	r3, [pc, #492]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 8007132:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8007136:	2b00      	cmp	r3, #0
 8007138:	d133      	bne.n	80071a2 <SX1276OnDio0Irq+0x14a>
 800713a:	4b79      	ldr	r3, [pc, #484]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 800713c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007140:	2b00      	cmp	r3, #0
 8007142:	d12e      	bne.n	80071a2 <SX1276OnDio0Irq+0x14a>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8007144:	4b76      	ldr	r3, [pc, #472]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 8007146:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800714a:	f083 0301 	eor.w	r3, r3, #1
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d004      	beq.n	800715e <SX1276OnDio0Irq+0x106>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8007154:	2101      	movs	r1, #1
 8007156:	4876      	ldr	r0, [pc, #472]	; (8007330 <SX1276OnDio0Irq+0x2d8>)
 8007158:	f7ff fd2c 	bl	8006bb4 <SX1276ReadFifo>
 800715c:	e007      	b.n	800716e <SX1276OnDio0Irq+0x116>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800715e:	2032      	movs	r0, #50	; 0x32
 8007160:	f7ff fc9e 	bl	8006aa0 <SX1276Read>
 8007164:	4603      	mov	r3, r0
 8007166:	b29a      	uxth	r2, r3
 8007168:	4b6d      	ldr	r3, [pc, #436]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 800716a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800716e:	4b6c      	ldr	r3, [pc, #432]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 8007170:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007174:	461a      	mov	r2, r3
 8007176:	4b6f      	ldr	r3, [pc, #444]	; (8007334 <SX1276OnDio0Irq+0x2dc>)
 8007178:	18d0      	adds	r0, r2, r3
 800717a:	4b69      	ldr	r3, [pc, #420]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 800717c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8007180:	b2da      	uxtb	r2, r3
 8007182:	4b67      	ldr	r3, [pc, #412]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 8007184:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007188:	b2db      	uxtb	r3, r3
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	b2db      	uxtb	r3, r3
 800718e:	4619      	mov	r1, r3
 8007190:	f7ff fd10 	bl	8006bb4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8007194:	4b62      	ldr	r3, [pc, #392]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 8007196:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 800719a:	4b61      	ldr	r3, [pc, #388]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 800719c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 80071a0:	e018      	b.n	80071d4 <SX1276OnDio0Irq+0x17c>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80071a2:	4b5f      	ldr	r3, [pc, #380]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 80071a4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80071a8:	461a      	mov	r2, r3
 80071aa:	4b62      	ldr	r3, [pc, #392]	; (8007334 <SX1276OnDio0Irq+0x2dc>)
 80071ac:	18d0      	adds	r0, r2, r3
 80071ae:	4b5c      	ldr	r3, [pc, #368]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 80071b0:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	4b5a      	ldr	r3, [pc, #360]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 80071b8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	4619      	mov	r1, r3
 80071c4:	f7ff fcf6 	bl	8006bb4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80071c8:	4b55      	ldr	r3, [pc, #340]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 80071ca:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 80071ce:	4b54      	ldr	r3, [pc, #336]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 80071d0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                TimerStop( &RxTimeoutTimer );
 80071d4:	4853      	ldr	r0, [pc, #332]	; (8007324 <SX1276OnDio0Irq+0x2cc>)
 80071d6:	f001 fc23 	bl	8008a20 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 80071da:	4b51      	ldr	r3, [pc, #324]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 80071dc:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80071e0:	f083 0301 	eor.w	r3, r3, #1
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d007      	beq.n	80071fa <SX1276OnDio0Irq+0x1a2>
                    SX1276.Settings.State = RF_IDLE;
 80071ea:	4b4d      	ldr	r3, [pc, #308]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                    TimerStop( &RxTimeoutSyncWord );
 80071f2:	484d      	ldr	r0, [pc, #308]	; (8007328 <SX1276OnDio0Irq+0x2d0>)
 80071f4:	f001 fc14 	bl	8008a20 <TimerStop>
 80071f8:	e00a      	b.n	8007210 <SX1276OnDio0Irq+0x1b8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80071fa:	200d      	movs	r0, #13
 80071fc:	f7ff fc50 	bl	8006aa0 <SX1276Read>
 8007200:	4603      	mov	r3, r0
 8007202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007206:	b2db      	uxtb	r3, r3
 8007208:	4619      	mov	r1, r3
 800720a:	200d      	movs	r0, #13
 800720c:	f7ff fc38 	bl	8006a80 <SX1276Write>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8007210:	4b46      	ldr	r3, [pc, #280]	; (800732c <SX1276OnDio0Irq+0x2d4>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d011      	beq.n	800723c <SX1276OnDio0Irq+0x1e4>
 8007218:	4b44      	ldr	r3, [pc, #272]	; (800732c <SX1276OnDio0Irq+0x2d4>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00c      	beq.n	800723c <SX1276OnDio0Irq+0x1e4>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8007222:	4b42      	ldr	r3, [pc, #264]	; (800732c <SX1276OnDio0Irq+0x2d4>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689c      	ldr	r4, [r3, #8]
 8007228:	4b3d      	ldr	r3, [pc, #244]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 800722a:	f8b3 107a 	ldrh.w	r1, [r3, #122]	; 0x7a
 800722e:	4b3c      	ldr	r3, [pc, #240]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 8007230:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8007234:	b21a      	sxth	r2, r3
 8007236:	2300      	movs	r3, #0
 8007238:	483e      	ldr	r0, [pc, #248]	; (8007334 <SX1276OnDio0Irq+0x2dc>)
 800723a:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800723c:	4b38      	ldr	r3, [pc, #224]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8007244:	4b36      	ldr	r3, [pc, #216]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800724c:	4b34      	ldr	r3, [pc, #208]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 800724e:	2200      	movs	r2, #0
 8007250:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                SX1276.Settings.FskPacketHandler.Size = 0;
 8007254:	4b32      	ldr	r3, [pc, #200]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 8007256:	2200      	movs	r2, #0
 8007258:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                break;
 800725c:	e0e7      	b.n	800742e <SX1276OnDio0Irq+0x3d6>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800725e:	2140      	movs	r1, #64	; 0x40
 8007260:	2012      	movs	r0, #18
 8007262:	f7ff fc0d 	bl	8006a80 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8007266:	2012      	movs	r0, #18
 8007268:	f7ff fc1a 	bl	8006aa0 <SX1276Read>
 800726c:	4603      	mov	r3, r0
 800726e:	737b      	strb	r3, [r7, #13]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8007270:	7b7b      	ldrb	r3, [r7, #13]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	f003 0320 	and.w	r3, r3, #32
 8007278:	2b20      	cmp	r3, #32
 800727a:	d122      	bne.n	80072c2 <SX1276OnDio0Irq+0x26a>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800727c:	2120      	movs	r1, #32
 800727e:	2012      	movs	r0, #18
 8007280:	f7ff fbfe 	bl	8006a80 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8007284:	4b26      	ldr	r3, [pc, #152]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 8007286:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800728a:	f083 0301 	eor.w	r3, r3, #1
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <SX1276OnDio0Irq+0x244>
                            SX1276.Settings.State = RF_IDLE;
 8007294:	4b22      	ldr	r3, [pc, #136]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                        TimerStop( &RxTimeoutTimer );
 800729c:	4821      	ldr	r0, [pc, #132]	; (8007324 <SX1276OnDio0Irq+0x2cc>)
 800729e:	f001 fbbf 	bl	8008a20 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80072a2:	4b22      	ldr	r3, [pc, #136]	; (800732c <SX1276OnDio0Irq+0x2d4>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 80be 	beq.w	8007428 <SX1276OnDio0Irq+0x3d0>
 80072ac:	4b1f      	ldr	r3, [pc, #124]	; (800732c <SX1276OnDio0Irq+0x2d4>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 80b8 	beq.w	8007428 <SX1276OnDio0Irq+0x3d0>
                            RadioEvents->RxError( );
 80072b8:	4b1c      	ldr	r3, [pc, #112]	; (800732c <SX1276OnDio0Irq+0x2d4>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	4798      	blx	r3
                        break;
 80072c0:	e0b2      	b.n	8007428 <SX1276OnDio0Irq+0x3d0>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 80072c2:	2019      	movs	r0, #25
 80072c4:	f7ff fbec 	bl	8006aa0 <SX1276Read>
 80072c8:	4603      	mov	r3, r0
 80072ca:	b25b      	sxtb	r3, r3
 80072cc:	3302      	adds	r3, #2
 80072ce:	109b      	asrs	r3, r3, #2
 80072d0:	b25a      	sxtb	r2, r3
 80072d2:	4b13      	ldr	r3, [pc, #76]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 80072d4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 80072d8:	201a      	movs	r0, #26
 80072da:	f7ff fbe1 	bl	8006aa0 <SX1276Read>
 80072de:	4603      	mov	r3, r0
 80072e0:	81fb      	strh	r3, [r7, #14]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80072e2:	4b0f      	ldr	r3, [pc, #60]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 80072e4:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	da3c      	bge.n	8007366 <SX1276OnDio0Irq+0x30e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80072ec:	4b0c      	ldr	r3, [pc, #48]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 80072ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072f0:	4a11      	ldr	r2, [pc, #68]	; (8007338 <SX1276OnDio0Irq+0x2e0>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d922      	bls.n	800733c <SX1276OnDio0Irq+0x2e4>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80072f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80072fa:	111b      	asrs	r3, r3, #4
 80072fc:	b21b      	sxth	r3, r3
 80072fe:	b29a      	uxth	r2, r3
 8007300:	89fb      	ldrh	r3, [r7, #14]
 8007302:	4413      	add	r3, r2
 8007304:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8007306:	4b06      	ldr	r3, [pc, #24]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 8007308:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 800730c:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800730e:	4413      	add	r3, r2
 8007310:	b29b      	uxth	r3, r3
 8007312:	3b9d      	subs	r3, #157	; 0x9d
 8007314:	b29b      	uxth	r3, r3
 8007316:	b21a      	sxth	r2, r3
 8007318:	4b01      	ldr	r3, [pc, #4]	; (8007320 <SX1276OnDio0Irq+0x2c8>)
 800731a:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 800731e:	e044      	b.n	80073aa <SX1276OnDio0Irq+0x352>
 8007320:	200013bc 	.word	0x200013bc
 8007324:	20001464 	.word	0x20001464
 8007328:	200013a4 	.word	0x200013a4
 800732c:	2000106c 	.word	0x2000106c
 8007330:	20001436 	.word	0x20001436
 8007334:	20001070 	.word	0x20001070
 8007338:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800733c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007340:	111b      	asrs	r3, r3, #4
 8007342:	b21b      	sxth	r3, r3
 8007344:	b29a      	uxth	r2, r3
 8007346:	89fb      	ldrh	r3, [r7, #14]
 8007348:	4413      	add	r3, r2
 800734a:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 800734c:	4b4a      	ldr	r3, [pc, #296]	; (8007478 <SX1276OnDio0Irq+0x420>)
 800734e:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8007352:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8007354:	4413      	add	r3, r2
 8007356:	b29b      	uxth	r3, r3
 8007358:	3ba4      	subs	r3, #164	; 0xa4
 800735a:	b29b      	uxth	r3, r3
 800735c:	b21a      	sxth	r2, r3
 800735e:	4b46      	ldr	r3, [pc, #280]	; (8007478 <SX1276OnDio0Irq+0x420>)
 8007360:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8007364:	e021      	b.n	80073aa <SX1276OnDio0Irq+0x352>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8007366:	4b44      	ldr	r3, [pc, #272]	; (8007478 <SX1276OnDio0Irq+0x420>)
 8007368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800736a:	4a44      	ldr	r2, [pc, #272]	; (800747c <SX1276OnDio0Irq+0x424>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d90e      	bls.n	800738e <SX1276OnDio0Irq+0x336>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8007370:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007374:	111b      	asrs	r3, r3, #4
 8007376:	b21b      	sxth	r3, r3
 8007378:	b29a      	uxth	r2, r3
 800737a:	89fb      	ldrh	r3, [r7, #14]
 800737c:	4413      	add	r3, r2
 800737e:	b29b      	uxth	r3, r3
 8007380:	3b9d      	subs	r3, #157	; 0x9d
 8007382:	b29b      	uxth	r3, r3
 8007384:	b21a      	sxth	r2, r3
 8007386:	4b3c      	ldr	r3, [pc, #240]	; (8007478 <SX1276OnDio0Irq+0x420>)
 8007388:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 800738c:	e00d      	b.n	80073aa <SX1276OnDio0Irq+0x352>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800738e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007392:	111b      	asrs	r3, r3, #4
 8007394:	b21b      	sxth	r3, r3
 8007396:	b29a      	uxth	r2, r3
 8007398:	89fb      	ldrh	r3, [r7, #14]
 800739a:	4413      	add	r3, r2
 800739c:	b29b      	uxth	r3, r3
 800739e:	3ba4      	subs	r3, #164	; 0xa4
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	b21a      	sxth	r2, r3
 80073a4:	4b34      	ldr	r3, [pc, #208]	; (8007478 <SX1276OnDio0Irq+0x420>)
 80073a6:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80073aa:	2013      	movs	r0, #19
 80073ac:	f7ff fb78 	bl	8006aa0 <SX1276Read>
 80073b0:	4603      	mov	r3, r0
 80073b2:	461a      	mov	r2, r3
 80073b4:	4b30      	ldr	r3, [pc, #192]	; (8007478 <SX1276OnDio0Irq+0x420>)
 80073b6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 80073ba:	2010      	movs	r0, #16
 80073bc:	f7ff fb70 	bl	8006aa0 <SX1276Read>
 80073c0:	4603      	mov	r3, r0
 80073c2:	4619      	mov	r1, r3
 80073c4:	200d      	movs	r0, #13
 80073c6:	f7ff fb5b 	bl	8006a80 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80073ca:	4b2b      	ldr	r3, [pc, #172]	; (8007478 <SX1276OnDio0Irq+0x420>)
 80073cc:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80073d0:	4619      	mov	r1, r3
 80073d2:	482b      	ldr	r0, [pc, #172]	; (8007480 <SX1276OnDio0Irq+0x428>)
 80073d4:	f7ff fbee 	bl	8006bb4 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80073d8:	4b27      	ldr	r3, [pc, #156]	; (8007478 <SX1276OnDio0Irq+0x420>)
 80073da:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80073de:	f083 0301 	eor.w	r3, r3, #1
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d003      	beq.n	80073f0 <SX1276OnDio0Irq+0x398>
                        SX1276.Settings.State = RF_IDLE;
 80073e8:	4b23      	ldr	r3, [pc, #140]	; (8007478 <SX1276OnDio0Irq+0x420>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                    TimerStop( &RxTimeoutTimer );
 80073f0:	4824      	ldr	r0, [pc, #144]	; (8007484 <SX1276OnDio0Irq+0x42c>)
 80073f2:	f001 fb15 	bl	8008a20 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80073f6:	4b24      	ldr	r3, [pc, #144]	; (8007488 <SX1276OnDio0Irq+0x430>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d016      	beq.n	800742c <SX1276OnDio0Irq+0x3d4>
 80073fe:	4b22      	ldr	r3, [pc, #136]	; (8007488 <SX1276OnDio0Irq+0x430>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d011      	beq.n	800742c <SX1276OnDio0Irq+0x3d4>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8007408:	4b1f      	ldr	r3, [pc, #124]	; (8007488 <SX1276OnDio0Irq+0x430>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689c      	ldr	r4, [r3, #8]
 800740e:	4b1a      	ldr	r3, [pc, #104]	; (8007478 <SX1276OnDio0Irq+0x420>)
 8007410:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8007414:	b299      	uxth	r1, r3
 8007416:	4b18      	ldr	r3, [pc, #96]	; (8007478 <SX1276OnDio0Irq+0x420>)
 8007418:	f9b3 20a2 	ldrsh.w	r2, [r3, #162]	; 0xa2
 800741c:	4b16      	ldr	r3, [pc, #88]	; (8007478 <SX1276OnDio0Irq+0x420>)
 800741e:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8007422:	4817      	ldr	r0, [pc, #92]	; (8007480 <SX1276OnDio0Irq+0x428>)
 8007424:	47a0      	blx	r4
                break;
 8007426:	e001      	b.n	800742c <SX1276OnDio0Irq+0x3d4>
                        break;
 8007428:	bf00      	nop
 800742a:	e020      	b.n	800746e <SX1276OnDio0Irq+0x416>
                break;
 800742c:	bf00      	nop
            break;
 800742e:	e01e      	b.n	800746e <SX1276OnDio0Irq+0x416>
            TimerStop( &TxTimeoutTimer );
 8007430:	4816      	ldr	r0, [pc, #88]	; (800748c <SX1276OnDio0Irq+0x434>)
 8007432:	f001 faf5 	bl	8008a20 <TimerStop>
            switch( SX1276.Settings.Modem )
 8007436:	4b10      	ldr	r3, [pc, #64]	; (8007478 <SX1276OnDio0Irq+0x420>)
 8007438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800743c:	2b01      	cmp	r3, #1
 800743e:	d103      	bne.n	8007448 <SX1276OnDio0Irq+0x3f0>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8007440:	2108      	movs	r1, #8
 8007442:	2012      	movs	r0, #18
 8007444:	f7ff fb1c 	bl	8006a80 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8007448:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <SX1276OnDio0Irq+0x420>)
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8007450:	4b0d      	ldr	r3, [pc, #52]	; (8007488 <SX1276OnDio0Irq+0x430>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d008      	beq.n	800746a <SX1276OnDio0Irq+0x412>
 8007458:	4b0b      	ldr	r3, [pc, #44]	; (8007488 <SX1276OnDio0Irq+0x430>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <SX1276OnDio0Irq+0x412>
                    RadioEvents->TxDone( );
 8007462:	4b09      	ldr	r3, [pc, #36]	; (8007488 <SX1276OnDio0Irq+0x430>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4798      	blx	r3
                break;
 800746a:	bf00      	nop
            break;
 800746c:	bf00      	nop
    }
}
 800746e:	bf00      	nop
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	bd90      	pop	{r4, r7, pc}
 8007476:	bf00      	nop
 8007478:	200013bc 	.word	0x200013bc
 800747c:	1f4add40 	.word	0x1f4add40
 8007480:	20001070 	.word	0x20001070
 8007484:	20001464 	.word	0x20001464
 8007488:	2000106c 	.word	0x2000106c
 800748c:	2000138c 	.word	0x2000138c

08007490 <SX1276OnDio1Irq>:

static void SX1276OnDio1Irq( void* context )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 8007498:	4b7a      	ldr	r3, [pc, #488]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 800749a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d003      	beq.n	80074aa <SX1276OnDio1Irq+0x1a>
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	f000 809a 	beq.w	80075dc <SX1276OnDio1Irq+0x14c>
            default:
                break;
            }
            break;
        default:
            break;
 80074a8:	e0e7      	b.n	800767a <SX1276OnDio1Irq+0x1ea>
            switch( SX1276.Settings.Modem )
 80074aa:	4b76      	ldr	r3, [pc, #472]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 80074ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d002      	beq.n	80074ba <SX1276OnDio1Irq+0x2a>
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d06d      	beq.n	8007594 <SX1276OnDio1Irq+0x104>
                break;
 80074b8:	e08f      	b.n	80075da <SX1276OnDio1Irq+0x14a>
                if( SX1276GetDio1PinState( ) == 0 )
 80074ba:	f001 f91d 	bl	80086f8 <SX1276GetDio1PinState>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 8085 	beq.w	80075d0 <SX1276OnDio1Irq+0x140>
                TimerStop( &RxTimeoutSyncWord );
 80074c6:	4870      	ldr	r0, [pc, #448]	; (8007688 <SX1276OnDio1Irq+0x1f8>)
 80074c8:	f001 faaa 	bl	8008a20 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80074cc:	4b6d      	ldr	r3, [pc, #436]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 80074ce:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d119      	bne.n	800750a <SX1276OnDio1Irq+0x7a>
 80074d6:	4b6b      	ldr	r3, [pc, #428]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 80074d8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d114      	bne.n	800750a <SX1276OnDio1Irq+0x7a>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80074e0:	4b68      	ldr	r3, [pc, #416]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 80074e2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80074e6:	f083 0301 	eor.w	r3, r3, #1
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d004      	beq.n	80074fa <SX1276OnDio1Irq+0x6a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80074f0:	2101      	movs	r1, #1
 80074f2:	4866      	ldr	r0, [pc, #408]	; (800768c <SX1276OnDio1Irq+0x1fc>)
 80074f4:	f7ff fb5e 	bl	8006bb4 <SX1276ReadFifo>
 80074f8:	e007      	b.n	800750a <SX1276OnDio1Irq+0x7a>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80074fa:	2032      	movs	r0, #50	; 0x32
 80074fc:	f7ff fad0 	bl	8006aa0 <SX1276Read>
 8007500:	4603      	mov	r3, r0
 8007502:	b29a      	uxth	r2, r3
 8007504:	4b5f      	ldr	r3, [pc, #380]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 8007506:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800750a:	4b5e      	ldr	r3, [pc, #376]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 800750c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8007510:	461a      	mov	r2, r3
 8007512:	4b5c      	ldr	r3, [pc, #368]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 8007514:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	4a5a      	ldr	r2, [pc, #360]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 800751c:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 8007520:	4293      	cmp	r3, r2
 8007522:	db1d      	blt.n	8007560 <SX1276OnDio1Irq+0xd0>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8007524:	4b57      	ldr	r3, [pc, #348]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 8007526:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800752a:	461a      	mov	r2, r3
 800752c:	4b58      	ldr	r3, [pc, #352]	; (8007690 <SX1276OnDio1Irq+0x200>)
 800752e:	441a      	add	r2, r3
 8007530:	4b54      	ldr	r3, [pc, #336]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 8007532:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8007536:	3b01      	subs	r3, #1
 8007538:	b2db      	uxtb	r3, r3
 800753a:	4619      	mov	r1, r3
 800753c:	4610      	mov	r0, r2
 800753e:	f7ff fb39 	bl	8006bb4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8007542:	4b50      	ldr	r3, [pc, #320]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 8007544:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 8007548:	4b4e      	ldr	r3, [pc, #312]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 800754a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800754e:	b29b      	uxth	r3, r3
 8007550:	4413      	add	r3, r2
 8007552:	b29b      	uxth	r3, r3
 8007554:	3b01      	subs	r3, #1
 8007556:	b29a      	uxth	r2, r3
 8007558:	4b4a      	ldr	r3, [pc, #296]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 800755a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 800755e:	e03c      	b.n	80075da <SX1276OnDio1Irq+0x14a>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8007560:	4b48      	ldr	r3, [pc, #288]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 8007562:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007566:	461a      	mov	r2, r3
 8007568:	4b49      	ldr	r3, [pc, #292]	; (8007690 <SX1276OnDio1Irq+0x200>)
 800756a:	18d0      	adds	r0, r2, r3
 800756c:	4b45      	ldr	r3, [pc, #276]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 800756e:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8007572:	b2da      	uxtb	r2, r3
 8007574:	4b43      	ldr	r3, [pc, #268]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 8007576:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800757a:	b2db      	uxtb	r3, r3
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	b2db      	uxtb	r3, r3
 8007580:	4619      	mov	r1, r3
 8007582:	f7ff fb17 	bl	8006bb4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8007586:	4b3f      	ldr	r3, [pc, #252]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 8007588:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 800758c:	4b3d      	ldr	r3, [pc, #244]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 800758e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 8007592:	e022      	b.n	80075da <SX1276OnDio1Irq+0x14a>
                if( SX1276GetDio1PinState( ) == 0 )
 8007594:	f001 f8b0 	bl	80086f8 <SX1276GetDio1PinState>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d01a      	beq.n	80075d4 <SX1276OnDio1Irq+0x144>
                TimerStop( &RxTimeoutTimer );
 800759e:	483d      	ldr	r0, [pc, #244]	; (8007694 <SX1276OnDio1Irq+0x204>)
 80075a0:	f001 fa3e 	bl	8008a20 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 80075a4:	2180      	movs	r1, #128	; 0x80
 80075a6:	2012      	movs	r0, #18
 80075a8:	f7ff fa6a 	bl	8006a80 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80075ac:	4b35      	ldr	r3, [pc, #212]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80075b4:	4b38      	ldr	r3, [pc, #224]	; (8007698 <SX1276OnDio1Irq+0x208>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00d      	beq.n	80075d8 <SX1276OnDio1Irq+0x148>
 80075bc:	4b36      	ldr	r3, [pc, #216]	; (8007698 <SX1276OnDio1Irq+0x208>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d008      	beq.n	80075d8 <SX1276OnDio1Irq+0x148>
                    RadioEvents->RxTimeout( );
 80075c6:	4b34      	ldr	r3, [pc, #208]	; (8007698 <SX1276OnDio1Irq+0x208>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	4798      	blx	r3
                break;
 80075ce:	e003      	b.n	80075d8 <SX1276OnDio1Irq+0x148>
                    break;
 80075d0:	bf00      	nop
 80075d2:	e052      	b.n	800767a <SX1276OnDio1Irq+0x1ea>
                    break;
 80075d4:	bf00      	nop
 80075d6:	e050      	b.n	800767a <SX1276OnDio1Irq+0x1ea>
                break;
 80075d8:	bf00      	nop
            break;
 80075da:	e04e      	b.n	800767a <SX1276OnDio1Irq+0x1ea>
            switch( SX1276.Settings.Modem )
 80075dc:	4b29      	ldr	r3, [pc, #164]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 80075de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <SX1276OnDio1Irq+0x15a>
 80075e6:	2b01      	cmp	r3, #1
                break;
 80075e8:	e046      	b.n	8007678 <SX1276OnDio1Irq+0x1e8>
                if( SX1276GetDio1PinState( ) == 1 )
 80075ea:	f001 f885 	bl	80086f8 <SX1276GetDio1PinState>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d040      	beq.n	8007676 <SX1276OnDio1Irq+0x1e6>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80075f4:	4b23      	ldr	r3, [pc, #140]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 80075f6:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80075fa:	461a      	mov	r2, r3
 80075fc:	4b21      	ldr	r3, [pc, #132]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 80075fe:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	4a1f      	ldr	r2, [pc, #124]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 8007606:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 800760a:	4293      	cmp	r3, r2
 800760c:	dd19      	ble.n	8007642 <SX1276OnDio1Irq+0x1b2>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800760e:	4b1d      	ldr	r3, [pc, #116]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 8007610:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007614:	461a      	mov	r2, r3
 8007616:	4b1e      	ldr	r3, [pc, #120]	; (8007690 <SX1276OnDio1Irq+0x200>)
 8007618:	4413      	add	r3, r2
 800761a:	4a1a      	ldr	r2, [pc, #104]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 800761c:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 8007620:	4611      	mov	r1, r2
 8007622:	4618      	mov	r0, r3
 8007624:	f7ff fab6 	bl	8006b94 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8007628:	4b16      	ldr	r3, [pc, #88]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 800762a:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 800762e:	4b15      	ldr	r3, [pc, #84]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 8007630:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8007634:	b29b      	uxth	r3, r3
 8007636:	4413      	add	r3, r2
 8007638:	b29a      	uxth	r2, r3
 800763a:	4b12      	ldr	r3, [pc, #72]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 800763c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 8007640:	e01a      	b.n	8007678 <SX1276OnDio1Irq+0x1e8>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8007642:	4b10      	ldr	r3, [pc, #64]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 8007644:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007648:	461a      	mov	r2, r3
 800764a:	4b11      	ldr	r3, [pc, #68]	; (8007690 <SX1276OnDio1Irq+0x200>)
 800764c:	18d0      	adds	r0, r2, r3
 800764e:	4b0d      	ldr	r3, [pc, #52]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 8007650:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8007654:	b2da      	uxtb	r2, r3
 8007656:	4b0b      	ldr	r3, [pc, #44]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 8007658:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800765c:	b2db      	uxtb	r3, r3
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	b2db      	uxtb	r3, r3
 8007662:	4619      	mov	r1, r3
 8007664:	f7ff fa96 	bl	8006b94 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8007668:	4b06      	ldr	r3, [pc, #24]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 800766a:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 800766e:	4b05      	ldr	r3, [pc, #20]	; (8007684 <SX1276OnDio1Irq+0x1f4>)
 8007670:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 8007674:	e000      	b.n	8007678 <SX1276OnDio1Irq+0x1e8>
                    break;
 8007676:	bf00      	nop
            break;
 8007678:	bf00      	nop
    }
}
 800767a:	bf00      	nop
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	200013bc 	.word	0x200013bc
 8007688:	200013a4 	.word	0x200013a4
 800768c:	20001436 	.word	0x20001436
 8007690:	20001070 	.word	0x20001070
 8007694:	20001464 	.word	0x20001464
 8007698:	2000106c 	.word	0x2000106c

0800769c <SX1276OnDio2Irq>:

static void SX1276OnDio2Irq( void* context )
{
 800769c:	b590      	push	{r4, r7, lr}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 80076a4:	4b52      	ldr	r3, [pc, #328]	; (80077f0 <SX1276OnDio2Irq+0x154>)
 80076a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d002      	beq.n	80076b4 <SX1276OnDio2Irq+0x18>
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d06e      	beq.n	8007790 <SX1276OnDio2Irq+0xf4>
            default:
                break;
            }
            break;
        default:
            break;
 80076b2:	e099      	b.n	80077e8 <SX1276OnDio2Irq+0x14c>
            switch( SX1276.Settings.Modem )
 80076b4:	4b4e      	ldr	r3, [pc, #312]	; (80077f0 <SX1276OnDio2Irq+0x154>)
 80076b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d002      	beq.n	80076c4 <SX1276OnDio2Irq+0x28>
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d043      	beq.n	800774a <SX1276OnDio2Irq+0xae>
                break;
 80076c2:	e064      	b.n	800778e <SX1276OnDio2Irq+0xf2>
                if( SX1276.DIO4.port == NULL )
 80076c4:	4b4a      	ldr	r3, [pc, #296]	; (80077f0 <SX1276OnDio2Irq+0x154>)
 80076c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d103      	bne.n	80076d4 <SX1276OnDio2Irq+0x38>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 80076cc:	4b48      	ldr	r3, [pc, #288]	; (80077f0 <SX1276OnDio2Irq+0x154>)
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 80076d4:	4b46      	ldr	r3, [pc, #280]	; (80077f0 <SX1276OnDio2Irq+0x154>)
 80076d6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d054      	beq.n	8007788 <SX1276OnDio2Irq+0xec>
 80076de:	4b44      	ldr	r3, [pc, #272]	; (80077f0 <SX1276OnDio2Irq+0x154>)
 80076e0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d14f      	bne.n	8007788 <SX1276OnDio2Irq+0xec>
                    TimerStop( &RxTimeoutSyncWord );
 80076e8:	4842      	ldr	r0, [pc, #264]	; (80077f4 <SX1276OnDio2Irq+0x158>)
 80076ea:	f001 f999 	bl	8008a20 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 80076ee:	4b40      	ldr	r3, [pc, #256]	; (80077f0 <SX1276OnDio2Irq+0x154>)
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80076f6:	2011      	movs	r0, #17
 80076f8:	f7ff f9d2 	bl	8006aa0 <SX1276Read>
 80076fc:	4603      	mov	r3, r0
 80076fe:	085b      	lsrs	r3, r3, #1
 8007700:	b2db      	uxtb	r3, r3
 8007702:	425b      	negs	r3, r3
 8007704:	b2db      	uxtb	r3, r3
 8007706:	b25a      	sxtb	r2, r3
 8007708:	4b39      	ldr	r3, [pc, #228]	; (80077f0 <SX1276OnDio2Irq+0x154>)
 800770a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800770e:	201b      	movs	r0, #27
 8007710:	f7ff f9c6 	bl	8006aa0 <SX1276Read>
 8007714:	4603      	mov	r3, r0
 8007716:	021c      	lsls	r4, r3, #8
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8007718:	201c      	movs	r0, #28
 800771a:	f7ff f9c1 	bl	8006aa0 <SX1276Read>
 800771e:	4603      	mov	r3, r0
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8007720:	4323      	orrs	r3, r4
 8007722:	4618      	mov	r0, r3
 8007724:	f7ff faaa 	bl	8006c7c <SX1276ConvertPllStepToFreqInHz>
 8007728:	4603      	mov	r3, r0
 800772a:	461a      	mov	r2, r3
 800772c:	4b30      	ldr	r3, [pc, #192]	; (80077f0 <SX1276OnDio2Irq+0x154>)
 800772e:	675a      	str	r2, [r3, #116]	; 0x74
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8007730:	200c      	movs	r0, #12
 8007732:	f7ff f9b5 	bl	8006aa0 <SX1276Read>
 8007736:	4603      	mov	r3, r0
 8007738:	095b      	lsrs	r3, r3, #5
 800773a:	b2db      	uxtb	r3, r3
 800773c:	f003 0307 	and.w	r3, r3, #7
 8007740:	b2da      	uxtb	r2, r3
 8007742:	4b2b      	ldr	r3, [pc, #172]	; (80077f0 <SX1276OnDio2Irq+0x154>)
 8007744:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                break;
 8007748:	e01e      	b.n	8007788 <SX1276OnDio2Irq+0xec>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800774a:	4b29      	ldr	r3, [pc, #164]	; (80077f0 <SX1276OnDio2Irq+0x154>)
 800774c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007750:	2b00      	cmp	r3, #0
 8007752:	d01b      	beq.n	800778c <SX1276OnDio2Irq+0xf0>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8007754:	2102      	movs	r1, #2
 8007756:	2012      	movs	r0, #18
 8007758:	f7ff f992 	bl	8006a80 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800775c:	4b26      	ldr	r3, [pc, #152]	; (80077f8 <SX1276OnDio2Irq+0x15c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d013      	beq.n	800778c <SX1276OnDio2Irq+0xf0>
 8007764:	4b24      	ldr	r3, [pc, #144]	; (80077f8 <SX1276OnDio2Irq+0x15c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00e      	beq.n	800778c <SX1276OnDio2Irq+0xf0>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800776e:	4b22      	ldr	r3, [pc, #136]	; (80077f8 <SX1276OnDio2Irq+0x15c>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	695c      	ldr	r4, [r3, #20]
 8007774:	201c      	movs	r0, #28
 8007776:	f7ff f993 	bl	8006aa0 <SX1276Read>
 800777a:	4603      	mov	r3, r0
 800777c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007780:	b2db      	uxtb	r3, r3
 8007782:	4618      	mov	r0, r3
 8007784:	47a0      	blx	r4
                break;
 8007786:	e001      	b.n	800778c <SX1276OnDio2Irq+0xf0>
                break;
 8007788:	bf00      	nop
 800778a:	e02d      	b.n	80077e8 <SX1276OnDio2Irq+0x14c>
                break;
 800778c:	bf00      	nop
            break;
 800778e:	e02b      	b.n	80077e8 <SX1276OnDio2Irq+0x14c>
            switch( SX1276.Settings.Modem )
 8007790:	4b17      	ldr	r3, [pc, #92]	; (80077f0 <SX1276OnDio2Irq+0x154>)
 8007792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007796:	2b00      	cmp	r3, #0
 8007798:	d020      	beq.n	80077dc <SX1276OnDio2Irq+0x140>
 800779a:	2b01      	cmp	r3, #1
 800779c:	d120      	bne.n	80077e0 <SX1276OnDio2Irq+0x144>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800779e:	4b14      	ldr	r3, [pc, #80]	; (80077f0 <SX1276OnDio2Irq+0x154>)
 80077a0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d01d      	beq.n	80077e4 <SX1276OnDio2Irq+0x148>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80077a8:	2102      	movs	r1, #2
 80077aa:	2012      	movs	r0, #18
 80077ac:	f7ff f968 	bl	8006a80 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80077b0:	4b11      	ldr	r3, [pc, #68]	; (80077f8 <SX1276OnDio2Irq+0x15c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d015      	beq.n	80077e4 <SX1276OnDio2Irq+0x148>
 80077b8:	4b0f      	ldr	r3, [pc, #60]	; (80077f8 <SX1276OnDio2Irq+0x15c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d010      	beq.n	80077e4 <SX1276OnDio2Irq+0x148>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80077c2:	4b0d      	ldr	r3, [pc, #52]	; (80077f8 <SX1276OnDio2Irq+0x15c>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	695c      	ldr	r4, [r3, #20]
 80077c8:	201c      	movs	r0, #28
 80077ca:	f7ff f969 	bl	8006aa0 <SX1276Read>
 80077ce:	4603      	mov	r3, r0
 80077d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	4618      	mov	r0, r3
 80077d8:	47a0      	blx	r4
                break;
 80077da:	e003      	b.n	80077e4 <SX1276OnDio2Irq+0x148>
                break;
 80077dc:	bf00      	nop
 80077de:	e002      	b.n	80077e6 <SX1276OnDio2Irq+0x14a>
                break;
 80077e0:	bf00      	nop
 80077e2:	e000      	b.n	80077e6 <SX1276OnDio2Irq+0x14a>
                break;
 80077e4:	bf00      	nop
            break;
 80077e6:	bf00      	nop
    }
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd90      	pop	{r4, r7, pc}
 80077f0:	200013bc 	.word	0x200013bc
 80077f4:	200013a4 	.word	0x200013a4
 80077f8:	2000106c 	.word	0x2000106c

080077fc <SX1276OnDio3Irq>:

static void SX1276OnDio3Irq( void* context )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8007804:	4b1e      	ldr	r3, [pc, #120]	; (8007880 <SX1276OnDio3Irq+0x84>)
 8007806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800780a:	2b00      	cmp	r3, #0
 800780c:	d030      	beq.n	8007870 <SX1276OnDio3Irq+0x74>
 800780e:	2b01      	cmp	r3, #1
 8007810:	d000      	beq.n	8007814 <SX1276OnDio3Irq+0x18>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 8007812:	e030      	b.n	8007876 <SX1276OnDio3Irq+0x7a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8007814:	2012      	movs	r0, #18
 8007816:	f7ff f943 	bl	8006aa0 <SX1276Read>
 800781a:	4603      	mov	r3, r0
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	2b01      	cmp	r3, #1
 8007822:	d112      	bne.n	800784a <SX1276OnDio3Irq+0x4e>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8007824:	2105      	movs	r1, #5
 8007826:	2012      	movs	r0, #18
 8007828:	f7ff f92a 	bl	8006a80 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800782c:	4b15      	ldr	r3, [pc, #84]	; (8007884 <SX1276OnDio3Irq+0x88>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d01f      	beq.n	8007874 <SX1276OnDio3Irq+0x78>
 8007834:	4b13      	ldr	r3, [pc, #76]	; (8007884 <SX1276OnDio3Irq+0x88>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d01a      	beq.n	8007874 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( true );
 800783e:	4b11      	ldr	r3, [pc, #68]	; (8007884 <SX1276OnDio3Irq+0x88>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	2001      	movs	r0, #1
 8007846:	4798      	blx	r3
        break;
 8007848:	e014      	b.n	8007874 <SX1276OnDio3Irq+0x78>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800784a:	2104      	movs	r1, #4
 800784c:	2012      	movs	r0, #18
 800784e:	f7ff f917 	bl	8006a80 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007852:	4b0c      	ldr	r3, [pc, #48]	; (8007884 <SX1276OnDio3Irq+0x88>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00c      	beq.n	8007874 <SX1276OnDio3Irq+0x78>
 800785a:	4b0a      	ldr	r3, [pc, #40]	; (8007884 <SX1276OnDio3Irq+0x88>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d007      	beq.n	8007874 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( false );
 8007864:	4b07      	ldr	r3, [pc, #28]	; (8007884 <SX1276OnDio3Irq+0x88>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	2000      	movs	r0, #0
 800786c:	4798      	blx	r3
        break;
 800786e:	e001      	b.n	8007874 <SX1276OnDio3Irq+0x78>
        break;
 8007870:	bf00      	nop
 8007872:	e000      	b.n	8007876 <SX1276OnDio3Irq+0x7a>
        break;
 8007874:	bf00      	nop
    }
}
 8007876:	bf00      	nop
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	200013bc 	.word	0x200013bc
 8007884:	2000106c 	.word	0x2000106c

08007888 <SX1276OnDio4Irq>:

static void SX1276OnDio4Irq( void* context )
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8007890:	4b0c      	ldr	r3, [pc, #48]	; (80078c4 <SX1276OnDio4Irq+0x3c>)
 8007892:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <SX1276OnDio4Irq+0x18>
 800789a:	2b01      	cmp	r3, #1
 800789c:	d00a      	beq.n	80078b4 <SX1276OnDio4Irq+0x2c>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 800789e:	e00c      	b.n	80078ba <SX1276OnDio4Irq+0x32>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 80078a0:	4b08      	ldr	r3, [pc, #32]	; (80078c4 <SX1276OnDio4Irq+0x3c>)
 80078a2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d106      	bne.n	80078b8 <SX1276OnDio4Irq+0x30>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 80078aa:	4b06      	ldr	r3, [pc, #24]	; (80078c4 <SX1276OnDio4Irq+0x3c>)
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        break;
 80078b2:	e001      	b.n	80078b8 <SX1276OnDio4Irq+0x30>
        break;
 80078b4:	bf00      	nop
 80078b6:	e000      	b.n	80078ba <SX1276OnDio4Irq+0x32>
        break;
 80078b8:	bf00      	nop
    }
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	bc80      	pop	{r7}
 80078c2:	4770      	bx	lr
 80078c4:	200013bc 	.word	0x200013bc

080078c8 <BoardCriticalSectionBegin>:

uint8_t Uart2TxBuffer[UART2_FIFO_TX_SIZE];
uint8_t Uart2RxBuffer[UART2_FIFO_RX_SIZE];

void BoardCriticalSectionBegin( uint32_t *mask )
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078d0:	f3ef 8310 	mrs	r3, PRIMASK
 80078d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80078d6:	68fa      	ldr	r2, [r7, #12]
    *mask = __get_PRIMASK( );
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80078dc:	b672      	cpsid	i
}
 80078de:	bf00      	nop
    __disable_irq( );
}
 80078e0:	bf00      	nop
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bc80      	pop	{r7}
 80078e8:	4770      	bx	lr

080078ea <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd( uint32_t *mask )
{
 80078ea:	b480      	push	{r7}
 80078ec:	b085      	sub	sp, #20
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( *mask );
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f383 8810 	msr	PRIMASK, r3
}
 80078fe:	bf00      	nop
}
 8007900:	bf00      	nop
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	bc80      	pop	{r7}
 8007908:	4770      	bx	lr

0800790a <BoardInitPeriph>:

void BoardInitPeriph( void )
{
 800790a:	b480      	push	{r7}
 800790c:	af00      	add	r7, sp, #0

}
 800790e:	bf00      	nop
 8007910:	46bd      	mov	sp, r7
 8007912:	bc80      	pop	{r7}
 8007914:	4770      	bx	lr
	...

08007918 <BoardInitMcu>:

void BoardInitMcu( void )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	af00      	add	r7, sp, #0
    if( McuInitialized == false )
 800791c:	4b06      	ldr	r3, [pc, #24]	; (8007938 <BoardInitMcu+0x20>)
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	f083 0301 	eor.w	r3, r3, #1
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <BoardInitMcu+0x1a>
    {
        RtcInit( );
 800792a:	f000 faa7 	bl	8007e7c <RtcInit>
        BoardUnusedIoInit( );
 800792e:	f000 f805 	bl	800793c <BoardUnusedIoInit>
//        LpmSetOffMode( LPM_APPLI_ID, LPM_DISABLE );

    }
}
 8007932:	bf00      	nop
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	20001170 	.word	0x20001170

0800793c <BoardUnusedIoInit>:
//    // Compute and return the temperature in degree celcius * 256
//    return ( int16_t ) COMPUTE_TEMPERATURE( tempRaw, BatteryVoltage );
//}

static void BoardUnusedIoInit( void )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	af00      	add	r7, sp, #0
    HAL_DBGMCU_EnableDBGSleepMode( );
 8007940:	f7f9 fb76 	bl	8001030 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode( );
 8007944:	f7f9 fb82 	bl	800104c <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode( );
 8007948:	f7f9 fb8e 	bl	8001068 <HAL_DBGMCU_EnableDBGStandbyMode>
}
 800794c:	bf00      	nop
 800794e:	bd80      	pop	{r7, pc}

08007950 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7f9 fb47 	bl	8000fec <HAL_Delay>
}
 800795e:	bf00      	nop
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
	...

08007968 <InitRf>:
extern Gpio_t Led1;
extern Gpio_t Led2;
extern UART_HandleTypeDef huart2;

static void InitRf (bool crcOn)
{
 8007968:	b590      	push	{r4, r7, lr}
 800796a:	b08d      	sub	sp, #52	; 0x34
 800796c:	af0a      	add	r7, sp, #40	; 0x28
 800796e:	4603      	mov	r3, r0
 8007970:	71fb      	strb	r3, [r7, #7]
  // Target board initialization
  BoardInitMcu( );
 8007972:	f7ff ffd1 	bl	8007918 <BoardInitMcu>
  BoardInitPeriph( );
 8007976:	f7ff ffc8 	bl	800790a <BoardInitPeriph>

  // Radio initialization
  RadioEvents.TxDone = OnTxDone;
 800797a:	4b2c      	ldr	r3, [pc, #176]	; (8007a2c <InitRf+0xc4>)
 800797c:	4a2c      	ldr	r2, [pc, #176]	; (8007a30 <InitRf+0xc8>)
 800797e:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8007980:	4b2a      	ldr	r3, [pc, #168]	; (8007a2c <InitRf+0xc4>)
 8007982:	4a2c      	ldr	r2, [pc, #176]	; (8007a34 <InitRf+0xcc>)
 8007984:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8007986:	4b29      	ldr	r3, [pc, #164]	; (8007a2c <InitRf+0xc4>)
 8007988:	4a2b      	ldr	r2, [pc, #172]	; (8007a38 <InitRf+0xd0>)
 800798a:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800798c:	4b27      	ldr	r3, [pc, #156]	; (8007a2c <InitRf+0xc4>)
 800798e:	4a2b      	ldr	r2, [pc, #172]	; (8007a3c <InitRf+0xd4>)
 8007990:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8007992:	4b26      	ldr	r3, [pc, #152]	; (8007a2c <InitRf+0xc4>)
 8007994:	4a2a      	ldr	r2, [pc, #168]	; (8007a40 <InitRf+0xd8>)
 8007996:	611a      	str	r2, [r3, #16]

  Radio.Init( &RadioEvents );
 8007998:	4b2a      	ldr	r3, [pc, #168]	; (8007a44 <InitRf+0xdc>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4823      	ldr	r0, [pc, #140]	; (8007a2c <InitRf+0xc4>)
 800799e:	4798      	blx	r3

  Radio.SetChannel( RF_FREQUENCY );
 80079a0:	4b28      	ldr	r3, [pc, #160]	; (8007a44 <InitRf+0xdc>)
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	4828      	ldr	r0, [pc, #160]	; (8007a48 <InitRf+0xe0>)
 80079a6:	4798      	blx	r3

  Radio.SetMaxPayloadLength( MODEM_LORA, BUFFER_SIZE );

#elif defined( USE_MODEM_FSK )

  Radio.SetTxConfig( MODEM_FSK, TX_OUTPUT_POWER, FSK_FDEV, 0,
 80079a8:	4b26      	ldr	r3, [pc, #152]	; (8007a44 <InitRf+0xdc>)
 80079aa:	69dc      	ldr	r4, [r3, #28]
 80079ac:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80079b0:	9308      	str	r3, [sp, #32]
 80079b2:	2300      	movs	r3, #0
 80079b4:	9307      	str	r3, [sp, #28]
 80079b6:	2300      	movs	r3, #0
 80079b8:	9306      	str	r3, [sp, #24]
 80079ba:	2300      	movs	r3, #0
 80079bc:	9305      	str	r3, [sp, #20]
 80079be:	79fb      	ldrb	r3, [r7, #7]
 80079c0:	9304      	str	r3, [sp, #16]
 80079c2:	2300      	movs	r3, #0
 80079c4:	9303      	str	r3, [sp, #12]
 80079c6:	2305      	movs	r3, #5
 80079c8:	9302      	str	r3, [sp, #8]
 80079ca:	2300      	movs	r3, #0
 80079cc:	9301      	str	r3, [sp, #4]
 80079ce:	f24c 3350 	movw	r3, #50000	; 0xc350
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	2300      	movs	r3, #0
 80079d6:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80079da:	210e      	movs	r1, #14
 80079dc:	2000      	movs	r0, #0
 80079de:	47a0      	blx	r4
                                FSK_DATARATE, 0,
                                FSK_PREAMBLE_LENGTH, FSK_FIX_LENGTH_PAYLOAD_ON,
								crcOn, 0, 0, 0, 3000 );

  Radio.SetRxConfig( MODEM_FSK, FSK_BANDWIDTH, FSK_DATARATE,
 80079e0:	4b18      	ldr	r3, [pc, #96]	; (8007a44 <InitRf+0xdc>)
 80079e2:	699c      	ldr	r4, [r3, #24]
 80079e4:	2301      	movs	r3, #1
 80079e6:	9309      	str	r3, [sp, #36]	; 0x24
 80079e8:	2300      	movs	r3, #0
 80079ea:	9308      	str	r3, [sp, #32]
 80079ec:	2300      	movs	r3, #0
 80079ee:	9307      	str	r3, [sp, #28]
 80079f0:	2300      	movs	r3, #0
 80079f2:	9306      	str	r3, [sp, #24]
 80079f4:	79fb      	ldrb	r3, [r7, #7]
 80079f6:	9305      	str	r3, [sp, #20]
 80079f8:	2300      	movs	r3, #0
 80079fa:	9304      	str	r3, [sp, #16]
 80079fc:	2300      	movs	r3, #0
 80079fe:	9303      	str	r3, [sp, #12]
 8007a00:	2300      	movs	r3, #0
 8007a02:	9302      	str	r3, [sp, #8]
 8007a04:	2305      	movs	r3, #5
 8007a06:	9301      	str	r3, [sp, #4]
 8007a08:	4b10      	ldr	r3, [pc, #64]	; (8007a4c <InitRf+0xe4>)
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007a12:	f24c 3150 	movw	r1, #50000	; 0xc350
 8007a16:	2000      	movs	r0, #0
 8007a18:	47a0      	blx	r4
                                0, FSK_AFC_BANDWIDTH, FSK_PREAMBLE_LENGTH,
                                0, FSK_FIX_LENGTH_PAYLOAD_ON, 0, crcOn,
                                0, 0, false, true );

  Radio.SetMaxPayloadLength( MODEM_FSK, BUFFER_SIZE );
 8007a1a:	4b0a      	ldr	r3, [pc, #40]	; (8007a44 <InitRf+0xdc>)
 8007a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1e:	2140      	movs	r1, #64	; 0x40
 8007a20:	2000      	movs	r0, #0
 8007a22:	4798      	blx	r3
#endif

}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd90      	pop	{r4, r7, pc}
 8007a2c:	2000120c 	.word	0x2000120c
 8007a30:	08007a51 	.word	0x08007a51
 8007a34:	08007a6d 	.word	0x08007a6d
 8007a38:	08007c75 	.word	0x08007c75
 8007a3c:	08007c91 	.word	0x08007c91
 8007a40:	08007cad 	.word	0x08007cad
 8007a44:	0800a150 	.word	0x0800a150
 8007a48:	1ad02a90 	.word	0x1ad02a90
 8007a4c:	00014585 	.word	0x00014585

08007a50 <OnTxDone>:

     }
}

void OnTxDone( void )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8007a54:	4b03      	ldr	r3, [pc, #12]	; (8007a64 <OnTxDone+0x14>)
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	4798      	blx	r3
    State = TX;
 8007a5a:	4b03      	ldr	r3, [pc, #12]	; (8007a68 <OnTxDone+0x18>)
 8007a5c:	2204      	movs	r2, #4
 8007a5e:	701a      	strb	r2, [r3, #0]
}
 8007a60:	bf00      	nop
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	0800a150 	.word	0x0800a150
 8007a68:	20001208 	.word	0x20001208

08007a6c <OnRxDone>:

void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b08a      	sub	sp, #40	; 0x28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	4608      	mov	r0, r1
 8007a76:	4611      	mov	r1, r2
 8007a78:	461a      	mov	r2, r3
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	817b      	strh	r3, [r7, #10]
 8007a7e:	460b      	mov	r3, r1
 8007a80:	813b      	strh	r3, [r7, #8]
 8007a82:	4613      	mov	r3, r2
 8007a84:	71fb      	strb	r3, [r7, #7]
	uint32_t Tick = HAL_GetTick();
 8007a86:	f7f9 faa7 	bl	8000fd8 <HAL_GetTick>
 8007a8a:	61f8      	str	r0, [r7, #28]
	uint32_t dTick = 0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_TogglePin(LED_EXT_GPIO_Port, LED_EXT_Pin);
 8007a90:	2108      	movs	r1, #8
 8007a92:	4868      	ldr	r0, [pc, #416]	; (8007c34 <OnRxDone+0x1c8>)
 8007a94:	f7f9 fdd5 	bl	8001642 <HAL_GPIO_TogglePin>
	Radio.Sleep( );
 8007a98:	4b67      	ldr	r3, [pc, #412]	; (8007c38 <OnRxDone+0x1cc>)
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9c:	4798      	blx	r3
    BufferSize = size;
 8007a9e:	4a67      	ldr	r2, [pc, #412]	; (8007c3c <OnRxDone+0x1d0>)
 8007aa0:	897b      	ldrh	r3, [r7, #10]
 8007aa2:	8013      	strh	r3, [r2, #0]
    memcpy( Buffer, payload, BufferSize );
 8007aa4:	4b65      	ldr	r3, [pc, #404]	; (8007c3c <OnRxDone+0x1d0>)
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	68f9      	ldr	r1, [r7, #12]
 8007aac:	4864      	ldr	r0, [pc, #400]	; (8007c40 <OnRxDone+0x1d4>)
 8007aae:	f001 f901 	bl	8008cb4 <memcpy>
    RssiValue = rssi;
 8007ab2:	893b      	ldrh	r3, [r7, #8]
 8007ab4:	b25a      	sxtb	r2, r3
 8007ab6:	4b63      	ldr	r3, [pc, #396]	; (8007c44 <OnRxDone+0x1d8>)
 8007ab8:	701a      	strb	r2, [r3, #0]
    SnrValue = snr;
 8007aba:	4a63      	ldr	r2, [pc, #396]	; (8007c48 <OnRxDone+0x1dc>)
 8007abc:	79fb      	ldrb	r3, [r7, #7]
 8007abe:	7013      	strb	r3, [r2, #0]
    State = RX;
 8007ac0:	4b62      	ldr	r3, [pc, #392]	; (8007c4c <OnRxDone+0x1e0>)
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	701a      	strb	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	461a      	mov	r2, r3
    memcpy( data_UART, payload, sizeof(data_UART) );
    if ( xQueueSendToBackFromISR( xQueueUartData,  &data_UART, pdFALSE ) != pdPASS) {
    	printf( "Failed to post the message" );
    }
#endif
    memcpy( data_UART, payload, sizeof(data_UART) );
 8007acc:	4b60      	ldr	r3, [pc, #384]	; (8007c50 <OnRxDone+0x1e4>)
 8007ace:	601a      	str	r2, [r3, #0]
if( iparamCopy.mode == PER ) {
 8007ad0:	4b60      	ldr	r3, [pc, #384]	; (8007c54 <OnRxDone+0x1e8>)
 8007ad2:	7a1b      	ldrb	r3, [r3, #8]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d15d      	bne.n	8007b94 <OnRxDone+0x128>
    if ( !prevTick ) {
 8007ad8:	4b5f      	ldr	r3, [pc, #380]	; (8007c58 <OnRxDone+0x1ec>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d103      	bne.n	8007ae8 <OnRxDone+0x7c>
    	prevTick = Tick;  /* фиксируем время начала приёма */
 8007ae0:	4a5d      	ldr	r2, [pc, #372]	; (8007c58 <OnRxDone+0x1ec>)
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	6013      	str	r3, [r2, #0]
 8007ae6:	e007      	b.n	8007af8 <OnRxDone+0x8c>
    }
    else {
    	dTick = Tick - prevTick; // находим разницу времени между двумя принятыми посылками
 8007ae8:	4b5b      	ldr	r3, [pc, #364]	; (8007c58 <OnRxDone+0x1ec>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	627b      	str	r3, [r7, #36]	; 0x24
    	prevTick = Tick;
 8007af2:	4a59      	ldr	r2, [pc, #356]	; (8007c58 <OnRxDone+0x1ec>)
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	6013      	str	r3, [r2, #0]
    }
    if ( dTick > iparamCopy.pPER->AverageTime ) {
 8007af8:	4b56      	ldr	r3, [pc, #344]	; (8007c54 <OnRxDone+0x1e8>)
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	461a      	mov	r2, r3
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d936      	bls.n	8007b74 <OnRxDone+0x108>
    	if ( *( uint32_t* )data_UART < prevSend ) {
 8007b06:	4b52      	ldr	r3, [pc, #328]	; (8007c50 <OnRxDone+0x1e4>)
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	4b54      	ldr	r3, [pc, #336]	; (8007c5c <OnRxDone+0x1f0>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d218      	bcs.n	8007b44 <OnRxDone+0xd8>
    		if ( !( ( *( uint32_t* )data_UART == 0 ) && ( prevSend == ( iparamCopy.pPER->NumberOfPacketSent - 1 ) ) ) ) {
 8007b12:	4b4f      	ldr	r3, [pc, #316]	; (8007c50 <OnRxDone+0x1e4>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d107      	bne.n	8007b2a <OnRxDone+0xbe>
 8007b1a:	4b4e      	ldr	r3, [pc, #312]	; (8007c54 <OnRxDone+0x1e8>)
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	3b01      	subs	r3, #1
 8007b22:	4a4e      	ldr	r2, [pc, #312]	; (8007c5c <OnRxDone+0x1f0>)
 8007b24:	6812      	ldr	r2, [r2, #0]
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d00c      	beq.n	8007b44 <OnRxDone+0xd8>
        		Error += ( iparamCopy.pPER->NumberOfPacketSent - prevSend ) - 1;	/* если произошла потеря и начался следующий период передачи
 8007b2a:	4b4a      	ldr	r3, [pc, #296]	; (8007c54 <OnRxDone+0x1e8>)
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	461a      	mov	r2, r3
 8007b32:	4b4a      	ldr	r3, [pc, #296]	; (8007c5c <OnRxDone+0x1f0>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	1ad2      	subs	r2, r2, r3
 8007b38:	4b49      	ldr	r3, [pc, #292]	; (8007c60 <OnRxDone+0x1f4>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	4a47      	ldr	r2, [pc, #284]	; (8007c60 <OnRxDone+0x1f4>)
 8007b42:	6013      	str	r3, [r2, #0]
        		Отнимаем один потому что считаем от 0
        	 */
    		}
    	}
    	/* Отправляем итоговую ошибку в очередь для вывода в терминал*/
        if ( xQueueSendToBackFromISR( xQueueUartData,  &Error, pdFALSE ) != pdPASS) {
 8007b44:	4b47      	ldr	r3, [pc, #284]	; (8007c64 <OnRxDone+0x1f8>)
 8007b46:	6818      	ldr	r0, [r3, #0]
 8007b48:	2300      	movs	r3, #0
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	4944      	ldr	r1, [pc, #272]	; (8007c60 <OnRxDone+0x1f4>)
 8007b4e:	f7fc faa0 	bl	8004092 <xQueueGenericSendFromISR>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d002      	beq.n	8007b5e <OnRxDone+0xf2>
        	printf( "Failed to post the message" );
 8007b58:	4843      	ldr	r0, [pc, #268]	; (8007c68 <OnRxDone+0x1fc>)
 8007b5a:	f001 f8c1 	bl	8008ce0 <iprintf>
        }

        if ( *( uint32_t* )data_UART < prevSend ) {
 8007b5e:	4b3c      	ldr	r3, [pc, #240]	; (8007c50 <OnRxDone+0x1e4>)
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	4b3e      	ldr	r3, [pc, #248]	; (8007c5c <OnRxDone+0x1f0>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d20f      	bcs.n	8007b8a <OnRxDone+0x11e>
        	Error = *( uint32_t* )data_UART; /* если с начала приёма следующего периода были потеряны
 8007b6a:	4b39      	ldr	r3, [pc, #228]	; (8007c50 <OnRxDone+0x1e4>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a3c      	ldr	r2, [pc, #240]	; (8007c60 <OnRxDone+0x1f4>)
 8007b70:	6013      	str	r3, [r2, #0]
 8007b72:	e00a      	b.n	8007b8a <OnRxDone+0x11e>
        	пакеты то находим их количество ( тут происходит обнуление )*/
        }
    }
    else {
    	Error += *( uint32_t* )data_UART - prevSend - 1; /* если время текущего периода ещё не вышло то
 8007b74:	4b36      	ldr	r3, [pc, #216]	; (8007c50 <OnRxDone+0x1e4>)
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	4b38      	ldr	r3, [pc, #224]	; (8007c5c <OnRxDone+0x1f0>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	1ad2      	subs	r2, r2, r3
 8007b7e:	4b38      	ldr	r3, [pc, #224]	; (8007c60 <OnRxDone+0x1f4>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4413      	add	r3, r2
 8007b84:	3b01      	subs	r3, #1
 8007b86:	4a36      	ldr	r2, [pc, #216]	; (8007c60 <OnRxDone+0x1f4>)
 8007b88:	6013      	str	r3, [r2, #0]
    	находим число потерянных пакетов, если такие есть*/
    }
    prevSend = *( uint32_t* )data_UART;
 8007b8a:	4b31      	ldr	r3, [pc, #196]	; (8007c50 <OnRxDone+0x1e4>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a33      	ldr	r2, [pc, #204]	; (8007c5c <OnRxDone+0x1f0>)
 8007b90:	6013      	str	r3, [r2, #0]
// передаём в очередь для вывод на экран
        if ( xQueueSendToBackFromISR( xQueueUartData,  &Error, pdFALSE ) != pdPASS) {
        	printf( "Failed to post the message" );
        }
}
}
 8007b92:	e04a      	b.n	8007c2a <OnRxDone+0x1be>
else if( iparamCopy.mode == BER ) {
 8007b94:	4b2f      	ldr	r3, [pc, #188]	; (8007c54 <OnRxDone+0x1e8>)
 8007b96:	7a1b      	ldrb	r3, [r3, #8]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d146      	bne.n	8007c2a <OnRxDone+0x1be>
    count++;
 8007b9c:	4b33      	ldr	r3, [pc, #204]	; (8007c6c <OnRxDone+0x200>)
 8007b9e:	881b      	ldrh	r3, [r3, #0]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	4b31      	ldr	r3, [pc, #196]	; (8007c6c <OnRxDone+0x200>)
 8007ba6:	801a      	strh	r2, [r3, #0]
    uint16_t rxSeq = *( uint16_t* )data_UART;
 8007ba8:	4b29      	ldr	r3, [pc, #164]	; (8007c50 <OnRxDone+0x1e4>)
 8007baa:	881b      	ldrh	r3, [r3, #0]
 8007bac:	837b      	strh	r3, [r7, #26]
    int i = 0;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	623b      	str	r3, [r7, #32]
    while( ( ( StandartSeq = &BarkerSeq[i++] )->SequenceSize ) != iparamCopy.pBER->len ); /* ищем нужную эталонную последовательность */
 8007bb2:	bf00      	nop
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	1c5a      	adds	r2, r3, #1
 8007bb8:	623a      	str	r2, [r7, #32]
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4a2c      	ldr	r2, [pc, #176]	; (8007c70 <OnRxDone+0x204>)
 8007bbe:	4413      	add	r3, r2
 8007bc0:	617b      	str	r3, [r7, #20]
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	781a      	ldrb	r2, [r3, #0]
 8007bc6:	4b23      	ldr	r3, [pc, #140]	; (8007c54 <OnRxDone+0x1e8>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d1f1      	bne.n	8007bb4 <OnRxDone+0x148>
    i = 0;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	623b      	str	r3, [r7, #32]
    while( i < iparamCopy.pBER->len ){
 8007bd4:	e015      	b.n	8007c02 <OnRxDone+0x196>
    	Error += ( ( rxSeq & ( 0x0001 << i ) ) ^ ( ( StandartSeq->Sequence ) & ( 0x0001 << i ) ) ) >> i; /* считаем количество несоответствующих битов*/
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	fa02 f303 	lsl.w	r3, r2, r3
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	8851      	ldrh	r1, [r2, #2]
 8007be2:	8b7a      	ldrh	r2, [r7, #26]
 8007be4:	404a      	eors	r2, r1
 8007be6:	b292      	uxth	r2, r2
 8007be8:	401a      	ands	r2, r3
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	fa42 f303 	asr.w	r3, r2, r3
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	4b1b      	ldr	r3, [pc, #108]	; (8007c60 <OnRxDone+0x1f4>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	4a19      	ldr	r2, [pc, #100]	; (8007c60 <OnRxDone+0x1f4>)
 8007bfa:	6013      	str	r3, [r2, #0]
    	i++;
 8007bfc:	6a3b      	ldr	r3, [r7, #32]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	623b      	str	r3, [r7, #32]
    while( i < iparamCopy.pBER->len ){
 8007c02:	4b14      	ldr	r3, [pc, #80]	; (8007c54 <OnRxDone+0x1e8>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	6a3b      	ldr	r3, [r7, #32]
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	dbe2      	blt.n	8007bd6 <OnRxDone+0x16a>
        if ( xQueueSendToBackFromISR( xQueueUartData,  &Error, pdFALSE ) != pdPASS) {
 8007c10:	4b14      	ldr	r3, [pc, #80]	; (8007c64 <OnRxDone+0x1f8>)
 8007c12:	6818      	ldr	r0, [r3, #0]
 8007c14:	2300      	movs	r3, #0
 8007c16:	2200      	movs	r2, #0
 8007c18:	4911      	ldr	r1, [pc, #68]	; (8007c60 <OnRxDone+0x1f4>)
 8007c1a:	f7fc fa3a 	bl	8004092 <xQueueGenericSendFromISR>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d002      	beq.n	8007c2a <OnRxDone+0x1be>
        	printf( "Failed to post the message" );
 8007c24:	4810      	ldr	r0, [pc, #64]	; (8007c68 <OnRxDone+0x1fc>)
 8007c26:	f001 f85b 	bl	8008ce0 <iprintf>
}
 8007c2a:	bf00      	nop
 8007c2c:	3728      	adds	r7, #40	; 0x28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	40020800 	.word	0x40020800
 8007c38:	0800a150 	.word	0x0800a150
 8007c3c:	20000044 	.word	0x20000044
 8007c40:	20001480 	.word	0x20001480
 8007c44:	20001209 	.word	0x20001209
 8007c48:	2000120a 	.word	0x2000120a
 8007c4c:	20001208 	.word	0x20001208
 8007c50:	20001204 	.word	0x20001204
 8007c54:	200014c8 	.word	0x200014c8
 8007c58:	200011f8 	.word	0x200011f8
 8007c5c:	200011f4 	.word	0x200011f4
 8007c60:	200011fc 	.word	0x200011fc
 8007c64:	2000128c 	.word	0x2000128c
 8007c68:	08009fcc 	.word	0x08009fcc
 8007c6c:	20001200 	.word	0x20001200
 8007c70:	20000028 	.word	0x20000028

08007c74 <OnTxTimeout>:

void OnTxTimeout( void )
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8007c78:	4b03      	ldr	r3, [pc, #12]	; (8007c88 <OnTxTimeout+0x14>)
 8007c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7c:	4798      	blx	r3
    State = TX_TIMEOUT;
 8007c7e:	4b03      	ldr	r3, [pc, #12]	; (8007c8c <OnTxTimeout+0x18>)
 8007c80:	2205      	movs	r2, #5
 8007c82:	701a      	strb	r2, [r3, #0]
}
 8007c84:	bf00      	nop
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	0800a150 	.word	0x0800a150
 8007c8c:	20001208 	.word	0x20001208

08007c90 <OnRxTimeout>:

void OnRxTimeout( void )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8007c94:	4b03      	ldr	r3, [pc, #12]	; (8007ca4 <OnRxTimeout+0x14>)
 8007c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c98:	4798      	blx	r3
    State = RX_TIMEOUT;
 8007c9a:	4b03      	ldr	r3, [pc, #12]	; (8007ca8 <OnRxTimeout+0x18>)
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	701a      	strb	r2, [r3, #0]
}
 8007ca0:	bf00      	nop
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	0800a150 	.word	0x0800a150
 8007ca8:	20001208 	.word	0x20001208

08007cac <OnRxError>:

void OnRxError( void )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
	char *str_to_tx =  "RX failed\n\r";
 8007cb2:	4b0b      	ldr	r3, [pc, #44]	; (8007ce0 <OnRxError+0x34>)
 8007cb4:	607b      	str	r3, [r7, #4]
    Radio.Sleep( );
 8007cb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ce4 <OnRxError+0x38>)
 8007cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cba:	4798      	blx	r3
    State = RX_ERROR;
 8007cbc:	4b0a      	ldr	r3, [pc, #40]	; (8007ce8 <OnRxError+0x3c>)
 8007cbe:	2203      	movs	r2, #3
 8007cc0:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)str_to_tx, strlen(str_to_tx), 10);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7f8 fa5c 	bl	8000180 <strlen>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	230a      	movs	r3, #10
 8007cce:	6879      	ldr	r1, [r7, #4]
 8007cd0:	4806      	ldr	r0, [pc, #24]	; (8007cec <OnRxError+0x40>)
 8007cd2:	f7fb fbea 	bl	80034aa <HAL_UART_Transmit>
}
 8007cd6:	bf00      	nop
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	08009fe8 	.word	0x08009fe8
 8007ce4:	0800a150 	.word	0x0800a150
 8007ce8:	20001208 	.word	0x20001208
 8007cec:	20001348 	.word	0x20001348

08007cf0 <UART_Tx>:

void UART_Tx( void ) {
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af02      	add	r7, sp, #8
	if ( !uxQueueMessagesWaitingFromISR(xQueueUartData) ) {
 8007cf6:	4b25      	ldr	r3, [pc, #148]	; (8007d8c <UART_Tx+0x9c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fc fae1 	bl	80042c2 <uxQueueMessagesWaitingFromISR>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d03d      	beq.n	8007d82 <UART_Tx+0x92>
			return;
	}
	uint32_t data_Tx;
	xQueueReceiveFromISR( xQueueUartData, &data_Tx, pdFALSE );
 8007d06:	4b21      	ldr	r3, [pc, #132]	; (8007d8c <UART_Tx+0x9c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	1d39      	adds	r1, r7, #4
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fc fa57 	bl	80041c2 <xQueueReceiveFromISR>
	if( iparamCopy.mode == BER ) {
 8007d14:	4b1e      	ldr	r3, [pc, #120]	; (8007d90 <UART_Tx+0xa0>)
 8007d16:	7a1b      	ldrb	r3, [r3, #8]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d110      	bne.n	8007d3e <UART_Tx+0x4e>
		sprintf(str_to_send, "%s %lu %s %d \n\r",  "Bits lost: ", data_Tx, "of", iparamCopy.pBER->len );
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	4b1c      	ldr	r3, [pc, #112]	; (8007d90 <UART_Tx+0xa0>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	4b1b      	ldr	r3, [pc, #108]	; (8007d94 <UART_Tx+0xa4>)
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	4a1a      	ldr	r2, [pc, #104]	; (8007d98 <UART_Tx+0xa8>)
 8007d2e:	491b      	ldr	r1, [pc, #108]	; (8007d9c <UART_Tx+0xac>)
 8007d30:	481b      	ldr	r0, [pc, #108]	; (8007da0 <UART_Tx+0xb0>)
 8007d32:	f000 ffed 	bl	8008d10 <siprintf>
		Error = 0;
 8007d36:	4b1b      	ldr	r3, [pc, #108]	; (8007da4 <UART_Tx+0xb4>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]
 8007d3c:	e010      	b.n	8007d60 <UART_Tx+0x70>
	}
	else if( iparamCopy.mode == PER) {
 8007d3e:	4b14      	ldr	r3, [pc, #80]	; (8007d90 <UART_Tx+0xa0>)
 8007d40:	7a1b      	ldrb	r3, [r3, #8]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d10c      	bne.n	8007d60 <UART_Tx+0x70>
		sprintf(str_to_send, "%s %lu %s %u \n\r",  "Packets lost: ", data_Tx, "of", iparamCopy.pPER->NumberOfPacketSent);
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	4b11      	ldr	r3, [pc, #68]	; (8007d90 <UART_Tx+0xa0>)
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	9301      	str	r3, [sp, #4]
 8007d50:	4b10      	ldr	r3, [pc, #64]	; (8007d94 <UART_Tx+0xa4>)
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	4613      	mov	r3, r2
 8007d56:	4a14      	ldr	r2, [pc, #80]	; (8007da8 <UART_Tx+0xb8>)
 8007d58:	4914      	ldr	r1, [pc, #80]	; (8007dac <UART_Tx+0xbc>)
 8007d5a:	4811      	ldr	r0, [pc, #68]	; (8007da0 <UART_Tx+0xb0>)
 8007d5c:	f000 ffd8 	bl	8008d10 <siprintf>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)str_to_send, strlen(str_to_send), 10);
 8007d60:	480f      	ldr	r0, [pc, #60]	; (8007da0 <UART_Tx+0xb0>)
 8007d62:	f7f8 fa0d 	bl	8000180 <strlen>
 8007d66:	4603      	mov	r3, r0
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	230a      	movs	r3, #10
 8007d6c:	490c      	ldr	r1, [pc, #48]	; (8007da0 <UART_Tx+0xb0>)
 8007d6e:	4810      	ldr	r0, [pc, #64]	; (8007db0 <UART_Tx+0xc0>)
 8007d70:	f7fb fb9b 	bl	80034aa <HAL_UART_Transmit>
	xQueueReset( xQueueUartData );
 8007d74:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <UART_Tx+0x9c>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fc f8c4 	bl	8003f08 <xQueueGenericReset>
 8007d80:	e000      	b.n	8007d84 <UART_Tx+0x94>
			return;
 8007d82:	bf00      	nop
	full_data_UART = *(uint32_t*)data_Tx;
	sprintf(str_to_send, "%d\n\r", (int)full_data_UART);
	HAL_UART_Transmit(&huart2, (uint8_t*)str_to_send, strlen(str_to_send), 10);
    xQueueReset( xQueueUartData );
#endif
}
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	2000128c 	.word	0x2000128c
 8007d90:	200014c8 	.word	0x200014c8
 8007d94:	0800a010 	.word	0x0800a010
 8007d98:	08009ff4 	.word	0x08009ff4
 8007d9c:	0800a000 	.word	0x0800a000
 8007da0:	20001174 	.word	0x20001174
 8007da4:	200011fc 	.word	0x200011fc
 8007da8:	0800a014 	.word	0x0800a014
 8007dac:	0800a024 	.word	0x0800a024
 8007db0:	20001348 	.word	0x20001348

08007db4 <Radio_Rx>:


// Перед вызовом этой функции надо сначала вызвать Radio.Rx( RX_TIMEOUT_VALUE ) ВНЕ БЕСКОНЕЧНОГО ЦИКЛА!!!
// Сама функция Radio_Rx должна крутиться в бесконечном цикле
void Radio_Rx( void ) {
 8007db4:	b580      	push	{r7, lr}
 8007db6:	af00      	add	r7, sp, #0
		  switch (State) {
 8007db8:	4b0a      	ldr	r3, [pc, #40]	; (8007de4 <Radio_Rx+0x30>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00d      	beq.n	8007ddc <Radio_Rx+0x28>
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	db0c      	blt.n	8007dde <Radio_Rx+0x2a>
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d809      	bhi.n	8007dde <Radio_Rx+0x2a>
		  case RX:
		  case RX_ERROR:
		  case RX_TIMEOUT:
		  case TX_TIMEOUT:
		  case TX:
			  Radio.Rx( RX_TIMEOUT_VALUE );
 8007dca:	4b07      	ldr	r3, [pc, #28]	; (8007de8 <Radio_Rx+0x34>)
 8007dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007dd2:	4798      	blx	r3
			  State = LOWPOWER;
 8007dd4:	4b03      	ldr	r3, [pc, #12]	; (8007de4 <Radio_Rx+0x30>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	701a      	strb	r2, [r3, #0]
			  break;
 8007dda:	e000      	b.n	8007dde <Radio_Rx+0x2a>
		  case LOWPOWER:
			  break;
 8007ddc:	bf00      	nop
	  }
}
 8007dde:	bf00      	nop
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	20001208 	.word	0x20001208
 8007de8:	0800a150 	.word	0x0800a150

08007dec <Measurements>:

bool Measurements ( struct InputParametrsRX_s* param ) {
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
	iparamCopy.mode = param->mode;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	7a1a      	ldrb	r2, [r3, #8]
 8007df8:	4b1c      	ldr	r3, [pc, #112]	; (8007e6c <Measurements+0x80>)
 8007dfa:	721a      	strb	r2, [r3, #8]
	berParamCopy.len = param->pBER->len;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	781a      	ldrb	r2, [r3, #0]
 8007e02:	4b1b      	ldr	r3, [pc, #108]	; (8007e70 <Measurements+0x84>)
 8007e04:	701a      	strb	r2, [r3, #0]
	perParamCopy.AverageTime = param->pPER->AverageTime;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a19      	ldr	r2, [pc, #100]	; (8007e74 <Measurements+0x88>)
 8007e0e:	6013      	str	r3, [r2, #0]
	perParamCopy.NumberOfPacketSent = param->pPER->NumberOfPacketSent;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	4a17      	ldr	r2, [pc, #92]	; (8007e74 <Measurements+0x88>)
 8007e18:	6053      	str	r3, [r2, #4]
	iparamCopy.pBER = &berParamCopy;
 8007e1a:	4b14      	ldr	r3, [pc, #80]	; (8007e6c <Measurements+0x80>)
 8007e1c:	4a14      	ldr	r2, [pc, #80]	; (8007e70 <Measurements+0x84>)
 8007e1e:	601a      	str	r2, [r3, #0]
	iparamCopy.pPER = &perParamCopy;
 8007e20:	4b12      	ldr	r3, [pc, #72]	; (8007e6c <Measurements+0x80>)
 8007e22:	4a14      	ldr	r2, [pc, #80]	; (8007e74 <Measurements+0x88>)
 8007e24:	605a      	str	r2, [r3, #4]
	switch ( iparamCopy.mode ) {
 8007e26:	4b11      	ldr	r3, [pc, #68]	; (8007e6c <Measurements+0x80>)
 8007e28:	7a1b      	ldrb	r3, [r3, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d002      	beq.n	8007e34 <Measurements+0x48>
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d00a      	beq.n	8007e48 <Measurements+0x5c>
			InitRf( true );
		}
		else return false;
	break;
	default:
	break;
 8007e32:	e016      	b.n	8007e62 <Measurements+0x76>
		if ( iparamCopy.pBER != NULL ) InitRf( false );
 8007e34:	4b0d      	ldr	r3, [pc, #52]	; (8007e6c <Measurements+0x80>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <Measurements+0x58>
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	f7ff fd93 	bl	8007968 <InitRf>
	break;
 8007e42:	e00e      	b.n	8007e62 <Measurements+0x76>
		else return false;
 8007e44:	2300      	movs	r3, #0
 8007e46:	e00d      	b.n	8007e64 <Measurements+0x78>
		if ( iparamCopy.pPER != NULL ) {
 8007e48:	4b08      	ldr	r3, [pc, #32]	; (8007e6c <Measurements+0x80>)
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d006      	beq.n	8007e5e <Measurements+0x72>
			count = 0;
 8007e50:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <Measurements+0x8c>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	801a      	strh	r2, [r3, #0]
			InitRf( true );
 8007e56:	2001      	movs	r0, #1
 8007e58:	f7ff fd86 	bl	8007968 <InitRf>
	break;
 8007e5c:	e001      	b.n	8007e62 <Measurements+0x76>
		else return false;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	e000      	b.n	8007e64 <Measurements+0x78>
	}
	return true;
 8007e62:	2301      	movs	r3, #1
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	200014c8 	.word	0x200014c8
 8007e70:	2000147c 	.word	0x2000147c
 8007e74:	200014c0 	.word	0x200014c0
 8007e78:	20001200 	.word	0x20001200

08007e7c <RtcInit>:
 * \retval calendarValue Time in ticks
 */
static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time );

void RtcInit( void )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
    RTC_DateTypeDef date;
    RTC_TimeTypeDef time;

    if( RtcInitialized == false )
 8007e82:	4b2f      	ldr	r3, [pc, #188]	; (8007f40 <RtcInit+0xc4>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	f083 0301 	eor.w	r3, r3, #1
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d053      	beq.n	8007f38 <RtcInit+0xbc>
    {
        __HAL_RCC_RTC_ENABLE( );
 8007e90:	4b2c      	ldr	r3, [pc, #176]	; (8007f44 <RtcInit+0xc8>)
 8007e92:	2201      	movs	r2, #1
 8007e94:	601a      	str	r2, [r3, #0]

        RtcHandle.Instance            = RTC;
 8007e96:	4b2c      	ldr	r3, [pc, #176]	; (8007f48 <RtcInit+0xcc>)
 8007e98:	4a2c      	ldr	r2, [pc, #176]	; (8007f4c <RtcInit+0xd0>)
 8007e9a:	601a      	str	r2, [r3, #0]
        RtcHandle.Init.HourFormat     = RTC_HOURFORMAT_24;
 8007e9c:	4b2a      	ldr	r3, [pc, #168]	; (8007f48 <RtcInit+0xcc>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	605a      	str	r2, [r3, #4]
        RtcHandle.Init.AsynchPrediv   = PREDIV_A;  // RTC_ASYNCH_PREDIV;
 8007ea2:	4b29      	ldr	r3, [pc, #164]	; (8007f48 <RtcInit+0xcc>)
 8007ea4:	221f      	movs	r2, #31
 8007ea6:	609a      	str	r2, [r3, #8]
        RtcHandle.Init.SynchPrediv    = PREDIV_S;  // RTC_SYNCH_PREDIV;
 8007ea8:	4b27      	ldr	r3, [pc, #156]	; (8007f48 <RtcInit+0xcc>)
 8007eaa:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007eae:	60da      	str	r2, [r3, #12]
        RtcHandle.Init.OutPut         = RTC_OUTPUT_DISABLE;
 8007eb0:	4b25      	ldr	r3, [pc, #148]	; (8007f48 <RtcInit+0xcc>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	611a      	str	r2, [r3, #16]
        RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007eb6:	4b24      	ldr	r3, [pc, #144]	; (8007f48 <RtcInit+0xcc>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	615a      	str	r2, [r3, #20]
        RtcHandle.Init.OutPutType     = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007ebc:	4b22      	ldr	r3, [pc, #136]	; (8007f48 <RtcInit+0xcc>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	619a      	str	r2, [r3, #24]
        HAL_RTC_Init( &RtcHandle );
 8007ec2:	4821      	ldr	r0, [pc, #132]	; (8007f48 <RtcInit+0xcc>)
 8007ec4:	f7fa fac4 	bl	8002450 <HAL_RTC_Init>

        date.Year                     = 0;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	75fb      	strb	r3, [r7, #23]
        date.Month                    = RTC_MONTH_JANUARY;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	757b      	strb	r3, [r7, #21]
        date.Date                     = 1;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	75bb      	strb	r3, [r7, #22]
        date.WeekDay                  = RTC_WEEKDAY_MONDAY;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	753b      	strb	r3, [r7, #20]
        HAL_RTC_SetDate( &RtcHandle, &date, RTC_FORMAT_BIN );
 8007ed8:	f107 0314 	add.w	r3, r7, #20
 8007edc:	2200      	movs	r2, #0
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4819      	ldr	r0, [pc, #100]	; (8007f48 <RtcInit+0xcc>)
 8007ee2:	f7fa fc41 	bl	8002768 <HAL_RTC_SetDate>

        /*at 0:0:0*/
        time.Hours                    = 0;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	703b      	strb	r3, [r7, #0]
        time.Minutes                  = 0;
 8007eea:	2300      	movs	r3, #0
 8007eec:	707b      	strb	r3, [r7, #1]
        time.Seconds                  = 0;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	70bb      	strb	r3, [r7, #2]
        time.SubSeconds               = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	607b      	str	r3, [r7, #4]
        time.TimeFormat               = 0;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	70fb      	strb	r3, [r7, #3]
        time.StoreOperation           = RTC_STOREOPERATION_RESET;
 8007efa:	2300      	movs	r3, #0
 8007efc:	613b      	str	r3, [r7, #16]
        time.DayLightSaving           = RTC_DAYLIGHTSAVING_NONE;
 8007efe:	2300      	movs	r3, #0
 8007f00:	60fb      	str	r3, [r7, #12]
        HAL_RTC_SetTime( &RtcHandle, &time, RTC_FORMAT_BIN );
 8007f02:	463b      	mov	r3, r7
 8007f04:	2200      	movs	r2, #0
 8007f06:	4619      	mov	r1, r3
 8007f08:	480f      	ldr	r0, [pc, #60]	; (8007f48 <RtcInit+0xcc>)
 8007f0a:	f7fa fb1c 	bl	8002546 <HAL_RTC_SetTime>

        // Enable Direct Read of the calendar registers (not through Shadow registers)
        HAL_RTCEx_EnableBypassShadow( &RtcHandle );
 8007f0e:	480e      	ldr	r0, [pc, #56]	; (8007f48 <RtcInit+0xcc>)
 8007f10:	f7fa ffb1 	bl	8002e76 <HAL_RTCEx_EnableBypassShadow>

        HAL_NVIC_SetPriority( RTC_Alarm_IRQn, 1, 0 );
 8007f14:	2200      	movs	r2, #0
 8007f16:	2101      	movs	r1, #1
 8007f18:	2029      	movs	r0, #41	; 0x29
 8007f1a:	f7f9 f968 	bl	80011ee <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( RTC_Alarm_IRQn );
 8007f1e:	2029      	movs	r0, #41	; 0x29
 8007f20:	f7f9 f981 	bl	8001226 <HAL_NVIC_EnableIRQ>

        // Init alarm.
        HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 8007f24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007f28:	4807      	ldr	r0, [pc, #28]	; (8007f48 <RtcInit+0xcc>)
 8007f2a:	f7fa fe41 	bl	8002bb0 <HAL_RTC_DeactivateAlarm>

        RtcSetTimerContext( );
 8007f2e:	f000 f80f 	bl	8007f50 <RtcSetTimerContext>
        RtcInitialized = true;
 8007f32:	4b03      	ldr	r3, [pc, #12]	; (8007f40 <RtcInit+0xc4>)
 8007f34:	2201      	movs	r2, #1
 8007f36:	701a      	strb	r2, [r3, #0]
    }
}
 8007f38:	bf00      	nop
 8007f3a:	3718      	adds	r7, #24
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20001230 	.word	0x20001230
 8007f44:	424706d8 	.word	0x424706d8
 8007f48:	20001234 	.word	0x20001234
 8007f4c:	40002800 	.word	0x40002800

08007f50 <RtcSetTimerContext>:
 *
 * \param none
 * \retval timerValue In ticks
 */
uint32_t RtcSetTimerContext( void )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	af00      	add	r7, sp, #0
    RtcTimerContext.Time = ( uint32_t )RtcGetCalendarValue( &RtcTimerContext.CalendarDate, &RtcTimerContext.CalendarTime );
 8007f54:	4905      	ldr	r1, [pc, #20]	; (8007f6c <RtcSetTimerContext+0x1c>)
 8007f56:	4806      	ldr	r0, [pc, #24]	; (8007f70 <RtcSetTimerContext+0x20>)
 8007f58:	f000 f9a4 	bl	80082a4 <RtcGetCalendarValue>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4b04      	ldr	r3, [pc, #16]	; (8007f74 <RtcSetTimerContext+0x24>)
 8007f62:	601a      	str	r2, [r3, #0]
    return ( uint32_t )RtcTimerContext.Time;
 8007f64:	4b03      	ldr	r3, [pc, #12]	; (8007f74 <RtcSetTimerContext+0x24>)
 8007f66:	681b      	ldr	r3, [r3, #0]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	20001258 	.word	0x20001258
 8007f70:	2000126c 	.word	0x2000126c
 8007f74:	20001254 	.word	0x20001254

08007f78 <RtcGetTimerContext>:
 *
 * \param none
 * \retval timerValue In ticks
 */
uint32_t RtcGetTimerContext( void )
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
    return RtcTimerContext.Time;
 8007f7c:	4b02      	ldr	r3, [pc, #8]	; (8007f88 <RtcGetTimerContext+0x10>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bc80      	pop	{r7}
 8007f86:	4770      	bx	lr
 8007f88:	20001254 	.word	0x20001254

08007f8c <RtcGetMinimumTimeout>:
 * \brief returns the wake up time in ticks
 *
 * \retval wake up time in ticks
 */
uint32_t RtcGetMinimumTimeout( void )
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	af00      	add	r7, sp, #0
    return( MIN_ALARM_DELAY );
 8007f90:	2303      	movs	r3, #3
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bc80      	pop	{r7}
 8007f98:	4770      	bx	lr

08007f9a <RtcMs2Tick>:
 *
 * \param[IN] milliseconds Time in milliseconds
 * \retval returns time in timer ticks
 */
uint32_t RtcMs2Tick( uint32_t milliseconds )
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( ( ( ( uint64_t )milliseconds ) * CONV_DENOM ) / CONV_NUMER );
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	f04f 0300 	mov.w	r3, #0
 8007faa:	f04f 0000 	mov.w	r0, #0
 8007fae:	f04f 0100 	mov.w	r1, #0
 8007fb2:	01d9      	lsls	r1, r3, #7
 8007fb4:	ea41 6152 	orr.w	r1, r1, r2, lsr #25
 8007fb8:	01d0      	lsls	r0, r2, #7
 8007fba:	f04f 027d 	mov.w	r2, #125	; 0x7d
 8007fbe:	f04f 0300 	mov.w	r3, #0
 8007fc2:	f7f8 f8e5 	bl	8000190 <__aeabi_uldivmod>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4613      	mov	r3, r2
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <RtcTick2Ms>:
 *
 * \param[IN] time in timer ticks
 * \retval returns time in milliseconds
 */
uint32_t RtcTick2Ms( uint32_t tick )
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
    uint32_t seconds = tick >> N_PREDIV_S;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	0a9b      	lsrs	r3, r3, #10
 8007fe0:	60fb      	str	r3, [r7, #12]

    tick = tick & PREDIV_S;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fe8:	607b      	str	r3, [r7, #4]
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ff0:	fb02 f203 	mul.w	r2, r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007ffa:	fb01 f303 	mul.w	r3, r1, r3
 8007ffe:	0a9b      	lsrs	r3, r3, #10
 8008000:	4413      	add	r3, r2
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	bc80      	pop	{r7}
 800800a:	4770      	bx	lr

0800800c <RtcSetAlarm>:
 * \note The alarm is set at now (read in this function) + timeout
 *
 * \param timeout Duration of the Timer ticks
 */
void RtcSetAlarm( uint32_t timeout )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
    // We don't go in Low Power mode for timeout below MIN_ALARM_DELAY
    if( ( int64_t )MIN_ALARM_DELAY < ( int64_t )( timeout - RtcGetTimerElapsedTime( ) ) )
 8008014:	f000 f92e 	bl	8008274 <RtcGetTimerElapsedTime>
    else
    {
//        LpmSetStopMode( LPM_RTC_ID, LPM_DISABLE );
    }

    RtcStartAlarm( timeout );
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f81f 	bl	800805c <RtcStartAlarm>
}
 800801e:	bf00      	nop
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
	...

08008028 <RtcStopAlarm>:

void RtcStopAlarm( void )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	af00      	add	r7, sp, #0
    // Disable the Alarm A interrupt
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 800802c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008030:	4808      	ldr	r0, [pc, #32]	; (8008054 <RtcStopAlarm+0x2c>)
 8008032:	f7fa fdbd 	bl	8002bb0 <HAL_RTC_DeactivateAlarm>

    // Clear RTC Alarm Flag
    __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF );
 8008036:	4b07      	ldr	r3, [pc, #28]	; (8008054 <RtcStopAlarm+0x2c>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	b2da      	uxtb	r2, r3
 800803e:	4b05      	ldr	r3, [pc, #20]	; (8008054 <RtcStopAlarm+0x2c>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008046:	60da      	str	r2, [r3, #12]

    // Clear the EXTI's line Flag for RTC Alarm
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
 8008048:	4b03      	ldr	r3, [pc, #12]	; (8008058 <RtcStopAlarm+0x30>)
 800804a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800804e:	615a      	str	r2, [r3, #20]
}
 8008050:	bf00      	nop
 8008052:	bd80      	pop	{r7, pc}
 8008054:	20001234 	.word	0x20001234
 8008058:	40010400 	.word	0x40010400

0800805c <RtcStartAlarm>:

void RtcStartAlarm( uint32_t timeout )
{
 800805c:	b5b0      	push	{r4, r5, r7, lr}
 800805e:	b08c      	sub	sp, #48	; 0x30
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
    uint16_t rtcAlarmSubSeconds = 0;
 8008064:	2300      	movs	r3, #0
 8008066:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t rtcAlarmSeconds = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t rtcAlarmMinutes = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t rtcAlarmHours = 0;
 8008070:	2300      	movs	r3, #0
 8008072:	853b      	strh	r3, [r7, #40]	; 0x28
    uint16_t rtcAlarmDays = 0;
 8008074:	2300      	movs	r3, #0
 8008076:	84fb      	strh	r3, [r7, #38]	; 0x26
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 8008078:	4b6e      	ldr	r3, [pc, #440]	; (8008234 <RtcStartAlarm+0x1d8>)
 800807a:	f107 0410 	add.w	r4, r7, #16
 800807e:	1d1d      	adds	r5, r3, #4
 8008080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	6023      	str	r3, [r4, #0]
    RTC_DateTypeDef date = RtcTimerContext.CalendarDate;
 8008088:	4b6a      	ldr	r3, [pc, #424]	; (8008234 <RtcStartAlarm+0x1d8>)
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	60fb      	str	r3, [r7, #12]

    RtcStopAlarm( );
 800808e:	f7ff ffcb 	bl	8008028 <RtcStopAlarm>

    /*reverse counter */
    rtcAlarmSubSeconds =  PREDIV_S - time.SubSeconds;
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	b29b      	uxth	r3, r3
 8008096:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 800809a:	3303      	adds	r3, #3
 800809c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80080aa:	4413      	add	r3, r2
 80080ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
    // convert timeout  to seconds
    timeout >>= N_PREDIV_S;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	0a9b      	lsrs	r3, r3, #10
 80080b2:	607b      	str	r3, [r7, #4]

    // Convert microsecs to RTC format and add to 'Now'
    rtcAlarmDays =  date.Date;
 80080b4:	7bbb      	ldrb	r3, [r7, #14]
 80080b6:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( timeout >= TM_SECONDS_IN_1DAY )
 80080b8:	e008      	b.n	80080cc <RtcStartAlarm+0x70>
    {
        timeout -= TM_SECONDS_IN_1DAY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 80080c0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80080c4:	607b      	str	r3, [r7, #4]
        rtcAlarmDays++;
 80080c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080c8:	3301      	adds	r3, #1
 80080ca:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( timeout >= TM_SECONDS_IN_1DAY )
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a5a      	ldr	r2, [pc, #360]	; (8008238 <RtcStartAlarm+0x1dc>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d8f2      	bhi.n	80080ba <RtcStartAlarm+0x5e>
    }

    // Calc hours
    rtcAlarmHours = time.Hours;
 80080d4:	7c3b      	ldrb	r3, [r7, #16]
 80080d6:	853b      	strh	r3, [r7, #40]	; 0x28
    while( timeout >= TM_SECONDS_IN_1HOUR )
 80080d8:	e006      	b.n	80080e8 <RtcStartAlarm+0x8c>
    {
        timeout -= TM_SECONDS_IN_1HOUR;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80080e0:	607b      	str	r3, [r7, #4]
        rtcAlarmHours++;
 80080e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080e4:	3301      	adds	r3, #1
 80080e6:	853b      	strh	r3, [r7, #40]	; 0x28
    while( timeout >= TM_SECONDS_IN_1HOUR )
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80080ee:	d2f4      	bcs.n	80080da <RtcStartAlarm+0x7e>
    }

    // Calc minutes
    rtcAlarmMinutes = time.Minutes;
 80080f0:	7c7b      	ldrb	r3, [r7, #17]
 80080f2:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 80080f4:	e005      	b.n	8008102 <RtcStartAlarm+0xa6>
    {
        timeout -= TM_SECONDS_IN_1MINUTE;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	3b3c      	subs	r3, #60	; 0x3c
 80080fa:	607b      	str	r3, [r7, #4]
        rtcAlarmMinutes++;
 80080fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80080fe:	3301      	adds	r3, #1
 8008100:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b3b      	cmp	r3, #59	; 0x3b
 8008106:	d8f6      	bhi.n	80080f6 <RtcStartAlarm+0x9a>
    }

    // Calc seconds
    rtcAlarmSeconds =  time.Seconds + timeout;
 8008108:	7cbb      	ldrb	r3, [r7, #18]
 800810a:	b29a      	uxth	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	b29b      	uxth	r3, r3
 8008110:	4413      	add	r3, r2
 8008112:	85bb      	strh	r3, [r7, #44]	; 0x2c

    //***** Correct for modulo********
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 8008114:	e006      	b.n	8008124 <RtcStartAlarm+0xc8>
    {
        rtcAlarmSubSeconds -= ( PREDIV_S + 1 );
 8008116:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008118:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800811c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        rtcAlarmSeconds++;
 800811e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008120:	3301      	adds	r3, #1
 8008122:	85bb      	strh	r3, [r7, #44]	; 0x2c
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 8008124:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800812a:	d2f4      	bcs.n	8008116 <RtcStartAlarm+0xba>
    }

    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 800812c:	e005      	b.n	800813a <RtcStartAlarm+0xde>
    { 
        rtcAlarmSeconds -= TM_SECONDS_IN_1MINUTE;
 800812e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008130:	3b3c      	subs	r3, #60	; 0x3c
 8008132:	85bb      	strh	r3, [r7, #44]	; 0x2c
        rtcAlarmMinutes++;
 8008134:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008136:	3301      	adds	r3, #1
 8008138:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 800813a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800813c:	2b3b      	cmp	r3, #59	; 0x3b
 800813e:	d8f6      	bhi.n	800812e <RtcStartAlarm+0xd2>
    }

    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 8008140:	e005      	b.n	800814e <RtcStartAlarm+0xf2>
    {
        rtcAlarmMinutes -= TM_MINUTES_IN_1HOUR;
 8008142:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008144:	3b3c      	subs	r3, #60	; 0x3c
 8008146:	857b      	strh	r3, [r7, #42]	; 0x2a
        rtcAlarmHours++;
 8008148:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800814a:	3301      	adds	r3, #1
 800814c:	853b      	strh	r3, [r7, #40]	; 0x28
    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 800814e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008150:	2b3b      	cmp	r3, #59	; 0x3b
 8008152:	d8f6      	bhi.n	8008142 <RtcStartAlarm+0xe6>
    }

    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 8008154:	e005      	b.n	8008162 <RtcStartAlarm+0x106>
    {
        rtcAlarmHours -= TM_HOURS_IN_1DAY;
 8008156:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008158:	3b18      	subs	r3, #24
 800815a:	853b      	strh	r3, [r7, #40]	; 0x28
        rtcAlarmDays++;
 800815c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800815e:	3301      	adds	r3, #1
 8008160:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 8008162:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008164:	2b17      	cmp	r3, #23
 8008166:	d8f6      	bhi.n	8008156 <RtcStartAlarm+0xfa>
    }

    if( date.Year % 4 == 0 ) 
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	f003 0303 	and.w	r3, r3, #3
 800816e:	b2db      	uxtb	r3, r3
 8008170:	2b00      	cmp	r3, #0
 8008172:	d113      	bne.n	800819c <RtcStartAlarm+0x140>
    {
        if( rtcAlarmDays > DaysInMonthLeapYear[date.Month - 1] )
 8008174:	7b7b      	ldrb	r3, [r7, #13]
 8008176:	3b01      	subs	r3, #1
 8008178:	4a30      	ldr	r2, [pc, #192]	; (800823c <RtcStartAlarm+0x1e0>)
 800817a:	5cd3      	ldrb	r3, [r2, r3]
 800817c:	b29b      	uxth	r3, r3
 800817e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008180:	429a      	cmp	r2, r3
 8008182:	d91e      	bls.n	80081c2 <RtcStartAlarm+0x166>
        {
            rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[date.Month - 1];
 8008184:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008186:	7b7a      	ldrb	r2, [r7, #13]
 8008188:	3a01      	subs	r2, #1
 800818a:	492c      	ldr	r1, [pc, #176]	; (800823c <RtcStartAlarm+0x1e0>)
 800818c:	5c8a      	ldrb	r2, [r1, r2]
 800818e:	fb93 f1f2 	sdiv	r1, r3, r2
 8008192:	fb02 f201 	mul.w	r2, r2, r1
 8008196:	1a9b      	subs	r3, r3, r2
 8008198:	84fb      	strh	r3, [r7, #38]	; 0x26
 800819a:	e012      	b.n	80081c2 <RtcStartAlarm+0x166>
        }
    }
    else
    {
        if( rtcAlarmDays > DaysInMonth[date.Month - 1] )
 800819c:	7b7b      	ldrb	r3, [r7, #13]
 800819e:	3b01      	subs	r3, #1
 80081a0:	4a27      	ldr	r2, [pc, #156]	; (8008240 <RtcStartAlarm+0x1e4>)
 80081a2:	5cd3      	ldrb	r3, [r2, r3]
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d90a      	bls.n	80081c2 <RtcStartAlarm+0x166>
        {   
            rtcAlarmDays = rtcAlarmDays % DaysInMonth[date.Month - 1];
 80081ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081ae:	7b7a      	ldrb	r2, [r7, #13]
 80081b0:	3a01      	subs	r2, #1
 80081b2:	4923      	ldr	r1, [pc, #140]	; (8008240 <RtcStartAlarm+0x1e4>)
 80081b4:	5c8a      	ldrb	r2, [r1, r2]
 80081b6:	fb93 f1f2 	sdiv	r1, r3, r2
 80081ba:	fb02 f201 	mul.w	r2, r2, r1
 80081be:	1a9b      	subs	r3, r3, r2
 80081c0:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
    }

    /* Set RTC_AlarmStructure with calculated values*/
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 80081c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80081c4:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80081c8:	3303      	adds	r3, #3
 80081ca:	461a      	mov	r2, r3
 80081cc:	4b1d      	ldr	r3, [pc, #116]	; (8008244 <RtcStartAlarm+0x1e8>)
 80081ce:	605a      	str	r2, [r3, #4]
    RtcAlarm.AlarmSubSecondMask       = ALARM_SUBSECOND_MASK; 
 80081d0:	4b1c      	ldr	r3, [pc, #112]	; (8008244 <RtcStartAlarm+0x1e8>)
 80081d2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80081d6:	619a      	str	r2, [r3, #24]
    RtcAlarm.AlarmTime.Seconds        = rtcAlarmSeconds;
 80081d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	4b19      	ldr	r3, [pc, #100]	; (8008244 <RtcStartAlarm+0x1e8>)
 80081de:	709a      	strb	r2, [r3, #2]
    RtcAlarm.AlarmTime.Minutes        = rtcAlarmMinutes;
 80081e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	4b17      	ldr	r3, [pc, #92]	; (8008244 <RtcStartAlarm+0x1e8>)
 80081e6:	705a      	strb	r2, [r3, #1]
    RtcAlarm.AlarmTime.Hours          = rtcAlarmHours;
 80081e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	4b15      	ldr	r3, [pc, #84]	; (8008244 <RtcStartAlarm+0x1e8>)
 80081ee:	701a      	strb	r2, [r3, #0]
    RtcAlarm.AlarmDateWeekDay         = ( uint8_t )rtcAlarmDays;
 80081f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	4b13      	ldr	r3, [pc, #76]	; (8008244 <RtcStartAlarm+0x1e8>)
 80081f6:	f883 2020 	strb.w	r2, [r3, #32]
    RtcAlarm.AlarmTime.TimeFormat     = time.TimeFormat;
 80081fa:	7cfa      	ldrb	r2, [r7, #19]
 80081fc:	4b11      	ldr	r3, [pc, #68]	; (8008244 <RtcStartAlarm+0x1e8>)
 80081fe:	70da      	strb	r2, [r3, #3]
    RtcAlarm.AlarmDateWeekDaySel      = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 8008200:	4b10      	ldr	r3, [pc, #64]	; (8008244 <RtcStartAlarm+0x1e8>)
 8008202:	2200      	movs	r2, #0
 8008204:	61da      	str	r2, [r3, #28]
    RtcAlarm.AlarmMask                = RTC_ALARMMASK_NONE;
 8008206:	4b0f      	ldr	r3, [pc, #60]	; (8008244 <RtcStartAlarm+0x1e8>)
 8008208:	2200      	movs	r2, #0
 800820a:	615a      	str	r2, [r3, #20]
    RtcAlarm.Alarm                    = RTC_ALARM_A;
 800820c:	4b0d      	ldr	r3, [pc, #52]	; (8008244 <RtcStartAlarm+0x1e8>)
 800820e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008212:	625a      	str	r2, [r3, #36]	; 0x24
    RtcAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008214:	4b0b      	ldr	r3, [pc, #44]	; (8008244 <RtcStartAlarm+0x1e8>)
 8008216:	2200      	movs	r2, #0
 8008218:	60da      	str	r2, [r3, #12]
    RtcAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800821a:	4b0a      	ldr	r3, [pc, #40]	; (8008244 <RtcStartAlarm+0x1e8>)
 800821c:	2200      	movs	r2, #0
 800821e:	611a      	str	r2, [r3, #16]

    // Set RTC_Alarm
    HAL_RTC_SetAlarm_IT( &RtcHandle, &RtcAlarm, RTC_FORMAT_BIN );
 8008220:	2200      	movs	r2, #0
 8008222:	4908      	ldr	r1, [pc, #32]	; (8008244 <RtcStartAlarm+0x1e8>)
 8008224:	4808      	ldr	r0, [pc, #32]	; (8008248 <RtcStartAlarm+0x1ec>)
 8008226:	f7fa fb8b 	bl	8002940 <HAL_RTC_SetAlarm_IT>
}
 800822a:	bf00      	nop
 800822c:	3730      	adds	r7, #48	; 0x30
 800822e:	46bd      	mov	sp, r7
 8008230:	bdb0      	pop	{r4, r5, r7, pc}
 8008232:	bf00      	nop
 8008234:	20001254 	.word	0x20001254
 8008238:	0001517f 	.word	0x0001517f
 800823c:	0800a144 	.word	0x0800a144
 8008240:	0800a138 	.word	0x0800a138
 8008244:	200014d4 	.word	0x200014d4
 8008248:	20001234 	.word	0x20001234

0800824c <RtcGetTimerValue>:

uint32_t RtcGetTimerValue( void )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b088      	sub	sp, #32
 8008250:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;

    uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 8008252:	f107 0208 	add.w	r2, r7, #8
 8008256:	1d3b      	adds	r3, r7, #4
 8008258:	4611      	mov	r1, r2
 800825a:	4618      	mov	r0, r3
 800825c:	f000 f822 	bl	80082a4 <RtcGetCalendarValue>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	4613      	mov	r3, r2
 8008266:	61fb      	str	r3, [r7, #28]

    return( calendarValue );
 8008268:	69fb      	ldr	r3, [r7, #28]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3720      	adds	r7, #32
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
	...

08008274 <RtcGetTimerElapsedTime>:

uint32_t RtcGetTimerElapsedTime( void )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b088      	sub	sp, #32
 8008278:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef time;
  RTC_DateTypeDef date;
  
  uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 800827a:	f107 0208 	add.w	r2, r7, #8
 800827e:	1d3b      	adds	r3, r7, #4
 8008280:	4611      	mov	r1, r2
 8008282:	4618      	mov	r0, r3
 8008284:	f000 f80e 	bl	80082a4 <RtcGetCalendarValue>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4613      	mov	r3, r2
 800828e:	61fb      	str	r3, [r7, #28]

  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
 8008290:	4b03      	ldr	r3, [pc, #12]	; (80082a0 <RtcGetTimerElapsedTime+0x2c>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	69fa      	ldr	r2, [r7, #28]
 8008296:	1ad3      	subs	r3, r2, r3
}
 8008298:	4618      	mov	r0, r3
 800829a:	3720      	adds	r7, #32
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	20001254 	.word	0x20001254

080082a4 <RtcGetCalendarValue>:

static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time )
{
 80082a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80082a8:	b088      	sub	sp, #32
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	6039      	str	r1, [r7, #0]
    uint64_t calendarValue = 0;
 80082b0:	f04f 0200 	mov.w	r2, #0
 80082b4:	f04f 0300 	mov.w	r3, #0
 80082b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint32_t seconds;

    // Make sure it is correct due to asynchronus nature of RTC
    do
    {
        firstRead = RTC->SSR;
 80082bc:	4b3f      	ldr	r3, [pc, #252]	; (80083bc <RtcGetCalendarValue+0x118>)
 80082be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c0:	617b      	str	r3, [r7, #20]
        HAL_RTC_GetDate( &RtcHandle, date, RTC_FORMAT_BIN );
 80082c2:	2200      	movs	r2, #0
 80082c4:	6879      	ldr	r1, [r7, #4]
 80082c6:	483e      	ldr	r0, [pc, #248]	; (80083c0 <RtcGetCalendarValue+0x11c>)
 80082c8:	f7fa faec 	bl	80028a4 <HAL_RTC_GetDate>
        HAL_RTC_GetTime( &RtcHandle, time, RTC_FORMAT_BIN );
 80082cc:	2200      	movs	r2, #0
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	483b      	ldr	r0, [pc, #236]	; (80083c0 <RtcGetCalendarValue+0x11c>)
 80082d2:	f7fa f9ec 	bl	80026ae <HAL_RTC_GetTime>
    }while( firstRead != RTC->SSR );
 80082d6:	4b39      	ldr	r3, [pc, #228]	; (80083bc <RtcGetCalendarValue+0x118>)
 80082d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d1ed      	bne.n	80082bc <RtcGetCalendarValue+0x18>

    // Calculte amount of elapsed days since 01/01/2000
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	78db      	ldrb	r3, [r3, #3]
 80082e4:	461a      	mov	r2, r3
 80082e6:	f240 53b5 	movw	r3, #1461	; 0x5b5
 80082ea:	fb03 f302 	mul.w	r3, r3, r2
 80082ee:	3303      	adds	r3, #3
 80082f0:	089b      	lsrs	r3, r3, #2
 80082f2:	613b      	str	r3, [r7, #16]

    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	78db      	ldrb	r3, [r3, #3]
 80082f8:	f003 0303 	and.w	r3, r3, #3
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <RtcGetCalendarValue+0x62>
 8008302:	4b30      	ldr	r3, [pc, #192]	; (80083c4 <RtcGetCalendarValue+0x120>)
 8008304:	e000      	b.n	8008308 <RtcGetCalendarValue+0x64>
 8008306:	4b30      	ldr	r3, [pc, #192]	; (80083c8 <RtcGetCalendarValue+0x124>)
 8008308:	60fb      	str	r3, [r7, #12]

    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	785b      	ldrb	r3, [r3, #1]
 800830e:	1e5a      	subs	r2, r3, #1
 8008310:	4613      	mov	r3, r2
 8008312:	011b      	lsls	r3, r3, #4
 8008314:	1a9b      	subs	r3, r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	3301      	adds	r3, #1
 800831c:	0fda      	lsrs	r2, r3, #31
 800831e:	4413      	add	r3, r2
 8008320:	105b      	asrs	r3, r3, #1
 8008322:	4619      	mov	r1, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	785b      	ldrb	r3, [r3, #1]
 8008328:	3b01      	subs	r3, #1
 800832a:	005b      	lsls	r3, r3, #1
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	fa22 f303 	lsr.w	r3, r2, r3
 8008332:	f003 0303 	and.w	r3, r3, #3
 8008336:	1acb      	subs	r3, r1, r3
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	4413      	add	r3, r2
 800833c:	613b      	str	r3, [r7, #16]

    seconds += ( date->Date -1 );
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	789b      	ldrb	r3, [r3, #2]
 8008342:	461a      	mov	r2, r3
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	4413      	add	r3, r2
 8008348:	3b01      	subs	r3, #1
 800834a:	613b      	str	r3, [r7, #16]

    // Convert from days to seconds
    seconds *= SECONDS_IN_1DAY;
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	4a1f      	ldr	r2, [pc, #124]	; (80083cc <RtcGetCalendarValue+0x128>)
 8008350:	fb02 f303 	mul.w	r3, r2, r3
 8008354:	613b      	str	r3, [r7, #16]

    seconds += ( ( uint32_t )time->Seconds + 
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	789b      	ldrb	r3, [r3, #2]
 800835a:	4618      	mov	r0, r3
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
                 ( ( uint32_t )time->Hours * SECONDS_IN_1HOUR ) ) ;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	461a      	mov	r2, r3
 8008362:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008366:	fb03 f202 	mul.w	r2, r3, r2
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	785b      	ldrb	r3, [r3, #1]
 800836e:	4619      	mov	r1, r3
 8008370:	460b      	mov	r3, r1
 8008372:	011b      	lsls	r3, r3, #4
 8008374:	1a5b      	subs	r3, r3, r1
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	4403      	add	r3, r0
    seconds += ( ( uint32_t )time->Seconds + 
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	4413      	add	r3, r2
 8008380:	613b      	str	r3, [r7, #16]

    calendarValue = ( ( ( uint64_t )seconds ) << N_PREDIV_S ) + ( PREDIV_S - time->SubSeconds );
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	461a      	mov	r2, r3
 8008386:	f04f 0300 	mov.w	r3, #0
 800838a:	0d95      	lsrs	r5, r2, #22
 800838c:	0294      	lsls	r4, r2, #10
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8008396:	3303      	adds	r3, #3
 8008398:	461a      	mov	r2, r3
 800839a:	f04f 0300 	mov.w	r3, #0
 800839e:	eb14 0802 	adds.w	r8, r4, r2
 80083a2:	eb45 0903 	adc.w	r9, r5, r3
 80083a6:	e9c7 8906 	strd	r8, r9, [r7, #24]

    return( calendarValue );
 80083aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80083ae:	4610      	mov	r0, r2
 80083b0:	4619      	mov	r1, r3
 80083b2:	3720      	adds	r7, #32
 80083b4:	46bd      	mov	sp, r7
 80083b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80083ba:	bf00      	nop
 80083bc:	40002800 	.word	0x40002800
 80083c0:	20001234 	.word	0x20001234
 80083c4:	00445550 	.word	0x00445550
 80083c8:	0099aaa0 	.word	0x0099aaa0
 80083cc:	00015180 	.word	0x00015180

080083d0 <HAL_RTC_AlarmAEventCallback>:
 * \brief  Alarm A callback.
 *
 * \param [IN] hrtc RTC handle
 */
void HAL_RTC_AlarmAEventCallback( RTC_HandleTypeDef *hrtc )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
    TimerIrqHandler( );
 80083d8:	f000 faa0 	bl	800891c <TimerIrqHandler>
}
 80083dc:	bf00      	nop
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <SX1276IoInit>:
    NULL, // void ( *RxBoosted )( uint32_t timeout ) - SX126x Only
    NULL, // void ( *SetRxDutyCycle )( uint32_t rxTime, uint32_t sleepTime ) - SX126x Only
};

void SX1276IoInit( void )
{
 80083e4:	b480      	push	{r7}
 80083e6:	af00      	add	r7, sp, #0
  // DIO_0
  SX1276.DIO0.port = DIO_0_GPIO_Port;
 80083e8:	4b15      	ldr	r3, [pc, #84]	; (8008440 <SX1276IoInit+0x5c>)
 80083ea:	4a16      	ldr	r2, [pc, #88]	; (8008444 <SX1276IoInit+0x60>)
 80083ec:	609a      	str	r2, [r3, #8]
  SX1276.DIO0.pin = DIO_0_Pin;
 80083ee:	4b14      	ldr	r3, [pc, #80]	; (8008440 <SX1276IoInit+0x5c>)
 80083f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083f4:	819a      	strh	r2, [r3, #12]
  // DIO_1
  SX1276.DIO1.port = DIO_1_GPIO_Port;
 80083f6:	4b12      	ldr	r3, [pc, #72]	; (8008440 <SX1276IoInit+0x5c>)
 80083f8:	4a12      	ldr	r2, [pc, #72]	; (8008444 <SX1276IoInit+0x60>)
 80083fa:	611a      	str	r2, [r3, #16]
  SX1276.DIO1.pin = DIO_1_Pin;
 80083fc:	4b10      	ldr	r3, [pc, #64]	; (8008440 <SX1276IoInit+0x5c>)
 80083fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008402:	829a      	strh	r2, [r3, #20]
  // DIO_2
  SX1276.DIO2.port = DIO_2_GPIO_Port;
 8008404:	4b0e      	ldr	r3, [pc, #56]	; (8008440 <SX1276IoInit+0x5c>)
 8008406:	4a10      	ldr	r2, [pc, #64]	; (8008448 <SX1276IoInit+0x64>)
 8008408:	619a      	str	r2, [r3, #24]
  SX1276.DIO2.pin = DIO_2_Pin;
 800840a:	4b0d      	ldr	r3, [pc, #52]	; (8008440 <SX1276IoInit+0x5c>)
 800840c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008410:	839a      	strh	r2, [r3, #28]
  // DIO_3
  SX1276.DIO3.port = DIO_3_GPIO_Port;
 8008412:	4b0b      	ldr	r3, [pc, #44]	; (8008440 <SX1276IoInit+0x5c>)
 8008414:	4a0c      	ldr	r2, [pc, #48]	; (8008448 <SX1276IoInit+0x64>)
 8008416:	621a      	str	r2, [r3, #32]
  SX1276.DIO3.pin = DIO_3_Pin;
 8008418:	4b09      	ldr	r3, [pc, #36]	; (8008440 <SX1276IoInit+0x5c>)
 800841a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800841e:	849a      	strh	r2, [r3, #36]	; 0x24
  // DIO_4
  SX1276.DIO4.port = DIO_4_GPIO_Port;
 8008420:	4b07      	ldr	r3, [pc, #28]	; (8008440 <SX1276IoInit+0x5c>)
 8008422:	4a09      	ldr	r2, [pc, #36]	; (8008448 <SX1276IoInit+0x64>)
 8008424:	629a      	str	r2, [r3, #40]	; 0x28
  SX1276.DIO4.pin = DIO_4_Pin;
 8008426:	4b06      	ldr	r3, [pc, #24]	; (8008440 <SX1276IoInit+0x5c>)
 8008428:	2220      	movs	r2, #32
 800842a:	859a      	strh	r2, [r3, #44]	; 0x2c
  // DIO_5
  SX1276.DIO5.port = DIO_5_GPIO_Port;
 800842c:	4b04      	ldr	r3, [pc, #16]	; (8008440 <SX1276IoInit+0x5c>)
 800842e:	4a06      	ldr	r2, [pc, #24]	; (8008448 <SX1276IoInit+0x64>)
 8008430:	631a      	str	r2, [r3, #48]	; 0x30
  SX1276.DIO5.pin = DIO_5_Pin;
 8008432:	4b03      	ldr	r3, [pc, #12]	; (8008440 <SX1276IoInit+0x5c>)
 8008434:	2240      	movs	r2, #64	; 0x40
 8008436:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8008438:	bf00      	nop
 800843a:	46bd      	mov	sp, r7
 800843c:	bc80      	pop	{r7}
 800843e:	4770      	bx	lr
 8008440:	200013bc 	.word	0x200013bc
 8008444:	40020000 	.word	0x40020000
 8008448:	40020800 	.word	0x40020800

0800844c <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  DioIrqCallbacks.dio0 = irqHandlers[0];
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a0d      	ldr	r2, [pc, #52]	; (8008490 <SX1276IoIrqInit+0x44>)
 800845a:	6013      	str	r3, [r2, #0]
  DioIrqCallbacks.dio1 = irqHandlers[1];
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	4a0b      	ldr	r2, [pc, #44]	; (8008490 <SX1276IoIrqInit+0x44>)
 8008462:	6053      	str	r3, [r2, #4]
  DioIrqCallbacks.dio2 = irqHandlers[2];
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	4a09      	ldr	r2, [pc, #36]	; (8008490 <SX1276IoIrqInit+0x44>)
 800846a:	6093      	str	r3, [r2, #8]
  DioIrqCallbacks.dio3 = irqHandlers[3];
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	4a07      	ldr	r2, [pc, #28]	; (8008490 <SX1276IoIrqInit+0x44>)
 8008472:	60d3      	str	r3, [r2, #12]
  DioIrqCallbacks.dio4 = irqHandlers[4];
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	4a05      	ldr	r2, [pc, #20]	; (8008490 <SX1276IoIrqInit+0x44>)
 800847a:	6113      	str	r3, [r2, #16]
  DioIrqCallbacks.dio5 = irqHandlers[5];
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	4a03      	ldr	r2, [pc, #12]	; (8008490 <SX1276IoIrqInit+0x44>)
 8008482:	6153      	str	r3, [r2, #20]
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	bc80      	pop	{r7}
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	200014fc 	.word	0x200014fc

08008494 <SX1276SetBoardTcxo>:
{
    // No TCXO component available on this board design.
}

void SX1276SetBoardTcxo( uint8_t state )
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	4603      	mov	r3, r0
 800849c:	71fb      	strb	r3, [r7, #7]
    // No TCXO component available on this board design.
}
 800849e:	bf00      	nop
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bc80      	pop	{r7}
 80084a6:	4770      	bx	lr

080084a8 <SX1276GetBoardTcxoWakeupTime>:

uint32_t SX1276GetBoardTcxoWakeupTime( void )
{
 80084a8:	b480      	push	{r7}
 80084aa:	af00      	add	r7, sp, #0
    return BOARD_TCXO_WAKEUP_TIME;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bc80      	pop	{r7}
 80084b4:	4770      	bx	lr
	...

080084b8 <SX1276Reset>:

void SX1276Reset( void )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	af00      	add	r7, sp, #0
    // Enables the TCXO if available on the board design
    SX1276SetBoardTcxo( true );
 80084bc:	2001      	movs	r0, #1
 80084be:	f7ff ffe9 	bl	8008494 <SX1276SetBoardTcxo>

    // Set RESET pin to 0
    HAL_GPIO_WritePin(SX1276.Reset.port, SX1276.Reset.pin, RESET);
 80084c2:	4b0c      	ldr	r3, [pc, #48]	; (80084f4 <SX1276Reset+0x3c>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a0b      	ldr	r2, [pc, #44]	; (80084f4 <SX1276Reset+0x3c>)
 80084c8:	8891      	ldrh	r1, [r2, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7f9 f8a0 	bl	8001612 <HAL_GPIO_WritePin>

    // Wait 1 ms
    DelayMs( 1 );
 80084d2:	2001      	movs	r0, #1
 80084d4:	f7ff fa3c 	bl	8007950 <DelayMs>

    // Configure RESET as input
    HAL_GPIO_WritePin(SX1276.Reset.port, SX1276.Reset.pin, SET);
 80084d8:	4b06      	ldr	r3, [pc, #24]	; (80084f4 <SX1276Reset+0x3c>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a05      	ldr	r2, [pc, #20]	; (80084f4 <SX1276Reset+0x3c>)
 80084de:	8891      	ldrh	r1, [r2, #4]
 80084e0:	2201      	movs	r2, #1
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7f9 f895 	bl	8001612 <HAL_GPIO_WritePin>

    // Wait 6 ms
    DelayMs( 6 );
 80084e8:	2006      	movs	r0, #6
 80084ea:	f7ff fa31 	bl	8007950 <DelayMs>
}
 80084ee:	bf00      	nop
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	200013bc 	.word	0x200013bc

080084f8 <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 80084f8:	b590      	push	{r4, r7, lr}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	4603      	mov	r3, r0
 8008500:	71fb      	strb	r3, [r7, #7]
    uint8_t paConfig = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]
    uint8_t paDac = 0;
 8008506:	2300      	movs	r3, #0
 8008508:	73bb      	strb	r3, [r7, #14]

    paConfig = SX1276Read( REG_PACONFIG );
 800850a:	2009      	movs	r0, #9
 800850c:	f7fe fac8 	bl	8006aa0 <SX1276Read>
 8008510:	4603      	mov	r3, r0
 8008512:	73fb      	strb	r3, [r7, #15]
    paDac = SX1276Read( REG_PADAC );
 8008514:	204d      	movs	r0, #77	; 0x4d
 8008516:	f7fe fac3 	bl	8006aa0 <SX1276Read>
 800851a:	4603      	mov	r3, r0
 800851c:	73bb      	strb	r3, [r7, #14]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 800851e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008526:	b25c      	sxtb	r4, r3
 8008528:	4b4a      	ldr	r3, [pc, #296]	; (8008654 <SX1276SetRfTxPower+0x15c>)
 800852a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800852c:	4618      	mov	r0, r3
 800852e:	f000 f893 	bl	8008658 <SX1276GetPaSelect>
 8008532:	4603      	mov	r3, r0
 8008534:	b25b      	sxtb	r3, r3
 8008536:	4323      	orrs	r3, r4
 8008538:	b25b      	sxtb	r3, r3
 800853a:	73fb      	strb	r3, [r7, #15]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800853c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008540:	2b00      	cmp	r3, #0
 8008542:	da4e      	bge.n	80085e2 <SX1276SetRfTxPower+0xea>
    {
        if( power > 17 )
 8008544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008548:	2b11      	cmp	r3, #17
 800854a:	dd04      	ble.n	8008556 <SX1276SetRfTxPower+0x5e>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800854c:	7bbb      	ldrb	r3, [r7, #14]
 800854e:	f043 0307 	orr.w	r3, r3, #7
 8008552:	73bb      	strb	r3, [r7, #14]
 8008554:	e008      	b.n	8008568 <SX1276SetRfTxPower+0x70>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8008556:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800855a:	f023 0307 	bic.w	r3, r3, #7
 800855e:	b25b      	sxtb	r3, r3
 8008560:	f043 0304 	orr.w	r3, r3, #4
 8008564:	b25b      	sxtb	r3, r3
 8008566:	73bb      	strb	r3, [r7, #14]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	f003 0307 	and.w	r3, r3, #7
 800856e:	2b07      	cmp	r3, #7
 8008570:	d11b      	bne.n	80085aa <SX1276SetRfTxPower+0xb2>
        {
            if( power < 5 )
 8008572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008576:	2b04      	cmp	r3, #4
 8008578:	dc01      	bgt.n	800857e <SX1276SetRfTxPower+0x86>
            {
                power = 5;
 800857a:	2305      	movs	r3, #5
 800857c:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 20 )
 800857e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008582:	2b14      	cmp	r3, #20
 8008584:	dd01      	ble.n	800858a <SX1276SetRfTxPower+0x92>
            {
                power = 20;
 8008586:	2314      	movs	r3, #20
 8008588:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800858a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800858e:	f023 030f 	bic.w	r3, r3, #15
 8008592:	b25a      	sxtb	r2, r3
 8008594:	79fb      	ldrb	r3, [r7, #7]
 8008596:	3b05      	subs	r3, #5
 8008598:	b2db      	uxtb	r3, r3
 800859a:	b25b      	sxtb	r3, r3
 800859c:	f003 030f 	and.w	r3, r3, #15
 80085a0:	b25b      	sxtb	r3, r3
 80085a2:	4313      	orrs	r3, r2
 80085a4:	b25b      	sxtb	r3, r3
 80085a6:	73fb      	strb	r3, [r7, #15]
 80085a8:	e045      	b.n	8008636 <SX1276SetRfTxPower+0x13e>
        }
        else
        {
            if( power < 2 )
 80085aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	dc01      	bgt.n	80085b6 <SX1276SetRfTxPower+0xbe>
            {
                power = 2;
 80085b2:	2302      	movs	r3, #2
 80085b4:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 17 )
 80085b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085ba:	2b11      	cmp	r3, #17
 80085bc:	dd01      	ble.n	80085c2 <SX1276SetRfTxPower+0xca>
            {
                power = 17;
 80085be:	2311      	movs	r3, #17
 80085c0:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 80085c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085c6:	f023 030f 	bic.w	r3, r3, #15
 80085ca:	b25a      	sxtb	r2, r3
 80085cc:	79fb      	ldrb	r3, [r7, #7]
 80085ce:	3b02      	subs	r3, #2
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	b25b      	sxtb	r3, r3
 80085d4:	f003 030f 	and.w	r3, r3, #15
 80085d8:	b25b      	sxtb	r3, r3
 80085da:	4313      	orrs	r3, r2
 80085dc:	b25b      	sxtb	r3, r3
 80085de:	73fb      	strb	r3, [r7, #15]
 80085e0:	e029      	b.n	8008636 <SX1276SetRfTxPower+0x13e>
        }
    }
    else
    {
        if( power > 0 )
 80085e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	dd12      	ble.n	8008610 <SX1276SetRfTxPower+0x118>
        {
            if( power > 15 )
 80085ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085ee:	2b0f      	cmp	r3, #15
 80085f0:	dd01      	ble.n	80085f6 <SX1276SetRfTxPower+0xfe>
            {
                power = 15;
 80085f2:	230f      	movs	r3, #15
 80085f4:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 80085f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085fe:	b25b      	sxtb	r3, r3
 8008600:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8008604:	b25a      	sxtb	r2, r3
 8008606:	79fb      	ldrb	r3, [r7, #7]
 8008608:	4313      	orrs	r3, r2
 800860a:	b25b      	sxtb	r3, r3
 800860c:	73fb      	strb	r3, [r7, #15]
 800860e:	e012      	b.n	8008636 <SX1276SetRfTxPower+0x13e>
        }
        else
        {
            if( power < -4 )
 8008610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008614:	f113 0f04 	cmn.w	r3, #4
 8008618:	da01      	bge.n	800861e <SX1276SetRfTxPower+0x126>
            {
                power = -4;
 800861a:	23fc      	movs	r3, #252	; 0xfc
 800861c:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800861e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008622:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008626:	b25a      	sxtb	r2, r3
 8008628:	79fb      	ldrb	r3, [r7, #7]
 800862a:	3304      	adds	r3, #4
 800862c:	b2db      	uxtb	r3, r3
 800862e:	b25b      	sxtb	r3, r3
 8008630:	4313      	orrs	r3, r2
 8008632:	b25b      	sxtb	r3, r3
 8008634:	73fb      	strb	r3, [r7, #15]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 8008636:	7bfb      	ldrb	r3, [r7, #15]
 8008638:	4619      	mov	r1, r3
 800863a:	2009      	movs	r0, #9
 800863c:	f7fe fa20 	bl	8006a80 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	4619      	mov	r1, r3
 8008644:	204d      	movs	r0, #77	; 0x4d
 8008646:	f7fe fa1b 	bl	8006a80 <SX1276Write>
}
 800864a:	bf00      	nop
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	bd90      	pop	{r4, r7, pc}
 8008652:	bf00      	nop
 8008654:	200013bc 	.word	0x200013bc

08008658 <SX1276GetPaSelect>:

static uint8_t SX1276GetPaSelect( uint32_t channel )
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
    if( channel > RF_MID_BAND_THRESH )
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a05      	ldr	r2, [pc, #20]	; (8008678 <SX1276GetPaSelect+0x20>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d901      	bls.n	800866c <SX1276GetPaSelect+0x14>
    {
        return RF_PACONFIG_PASELECT_PABOOST;
 8008668:	2380      	movs	r3, #128	; 0x80
 800866a:	e000      	b.n	800866e <SX1276GetPaSelect+0x16>
    }
    else
    {
        return RF_PACONFIG_PASELECT_RFO;
 800866c:	2300      	movs	r3, #0
    }
}
 800866e:	4618      	mov	r0, r3
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	bc80      	pop	{r7}
 8008676:	4770      	bx	lr
 8008678:	1f4add40 	.word	0x1f4add40

0800867c <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	4603      	mov	r3, r0
 8008684:	71fb      	strb	r3, [r7, #7]
    if( RadioIsActive != status )
 8008686:	4b0b      	ldr	r3, [pc, #44]	; (80086b4 <SX1276SetAntSwLowPower+0x38>)
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	79fa      	ldrb	r2, [r7, #7]
 800868c:	429a      	cmp	r2, r3
 800868e:	d00d      	beq.n	80086ac <SX1276SetAntSwLowPower+0x30>
    {
        RadioIsActive = status;
 8008690:	4a08      	ldr	r2, [pc, #32]	; (80086b4 <SX1276SetAntSwLowPower+0x38>)
 8008692:	79fb      	ldrb	r3, [r7, #7]
 8008694:	7013      	strb	r3, [r2, #0]

        if( status == false )
 8008696:	79fb      	ldrb	r3, [r7, #7]
 8008698:	f083 0301 	eor.w	r3, r3, #1
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d002      	beq.n	80086a8 <SX1276SetAntSwLowPower+0x2c>
        {
            SX1276AntSwInit( );
 80086a2:	f000 f809 	bl	80086b8 <SX1276AntSwInit>
        else
        {
            SX1276AntSwDeInit( );
        }
    }
}
 80086a6:	e001      	b.n	80086ac <SX1276SetAntSwLowPower+0x30>
            SX1276AntSwDeInit( );
 80086a8:	f000 f80c 	bl	80086c4 <SX1276AntSwDeInit>
}
 80086ac:	bf00      	nop
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	20001270 	.word	0x20001270

080086b8 <SX1276AntSwInit>:

void SX1276AntSwInit( void )
{
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
//    GpioInit( &AntSwitch, RADIO_ANT_SWITCH, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
}
 80086bc:	bf00      	nop
 80086be:	46bd      	mov	sp, r7
 80086c0:	bc80      	pop	{r7}
 80086c2:	4770      	bx	lr

080086c4 <SX1276AntSwDeInit>:

void SX1276AntSwDeInit( void )
{
 80086c4:	b480      	push	{r7}
 80086c6:	af00      	add	r7, sp, #0
//    GpioInit( &AntSwitch, RADIO_ANT_SWITCH, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}
 80086c8:	bf00      	nop
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bc80      	pop	{r7}
 80086ce:	4770      	bx	lr

080086d0 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	4603      	mov	r3, r0
 80086d8:	71fb      	strb	r3, [r7, #7]
}
 80086da:	bf00      	nop
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	bc80      	pop	{r7}
 80086e2:	4770      	bx	lr

080086e4 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 80086ec:	2301      	movs	r3, #1
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	370c      	adds	r7, #12
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bc80      	pop	{r7}
 80086f6:	4770      	bx	lr

080086f8 <SX1276GetDio1PinState>:

uint32_t SX1276GetDio1PinState( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	af00      	add	r7, sp, #0
    return GpioRead( &SX1276.DIO1 );
 80086fc:	4802      	ldr	r0, [pc, #8]	; (8008708 <SX1276GetDio1PinState+0x10>)
 80086fe:	f7f8 f803 	bl	8000708 <GpioRead>
 8008702:	4603      	mov	r3, r0
}
 8008704:	4618      	mov	r0, r3
 8008706:	bd80      	pop	{r7, pc}
 8008708:	200013cc 	.word	0x200013cc

0800870c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	4603      	mov	r3, r0
 8008714:	80fb      	strh	r3, [r7, #6]
  void (*fptr)(void *context) = NULL;
 8008716:	2300      	movs	r3, #0
 8008718:	60fb      	str	r3, [r7, #12]
  switch(GPIO_Pin)
 800871a:	88fb      	ldrh	r3, [r7, #6]
 800871c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008720:	d019      	beq.n	8008756 <HAL_GPIO_EXTI_Callback+0x4a>
 8008722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008726:	dc2e      	bgt.n	8008786 <HAL_GPIO_EXTI_Callback+0x7a>
 8008728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800872c:	d017      	beq.n	800875e <HAL_GPIO_EXTI_Callback+0x52>
 800872e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008732:	dc28      	bgt.n	8008786 <HAL_GPIO_EXTI_Callback+0x7a>
 8008734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008738:	d015      	beq.n	8008766 <HAL_GPIO_EXTI_Callback+0x5a>
 800873a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800873e:	dc22      	bgt.n	8008786 <HAL_GPIO_EXTI_Callback+0x7a>
 8008740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008744:	d013      	beq.n	800876e <HAL_GPIO_EXTI_Callback+0x62>
 8008746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800874a:	dc1c      	bgt.n	8008786 <HAL_GPIO_EXTI_Callback+0x7a>
 800874c:	2b20      	cmp	r3, #32
 800874e:	d012      	beq.n	8008776 <HAL_GPIO_EXTI_Callback+0x6a>
 8008750:	2b40      	cmp	r3, #64	; 0x40
 8008752:	d014      	beq.n	800877e <HAL_GPIO_EXTI_Callback+0x72>
      break;
    case DIO_5_Pin:
      fptr = DioIrq[5];
      break;
    default:
      break;
 8008754:	e017      	b.n	8008786 <HAL_GPIO_EXTI_Callback+0x7a>
      fptr = DioIrq[0];
 8008756:	4b11      	ldr	r3, [pc, #68]	; (800879c <HAL_GPIO_EXTI_Callback+0x90>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	60fb      	str	r3, [r7, #12]
      break;
 800875c:	e014      	b.n	8008788 <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[1];
 800875e:	4b0f      	ldr	r3, [pc, #60]	; (800879c <HAL_GPIO_EXTI_Callback+0x90>)
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	60fb      	str	r3, [r7, #12]
      break;
 8008764:	e010      	b.n	8008788 <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[2];
 8008766:	4b0d      	ldr	r3, [pc, #52]	; (800879c <HAL_GPIO_EXTI_Callback+0x90>)
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	60fb      	str	r3, [r7, #12]
      break;
 800876c:	e00c      	b.n	8008788 <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[3];
 800876e:	4b0b      	ldr	r3, [pc, #44]	; (800879c <HAL_GPIO_EXTI_Callback+0x90>)
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	60fb      	str	r3, [r7, #12]
      break;
 8008774:	e008      	b.n	8008788 <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[4];
 8008776:	4b09      	ldr	r3, [pc, #36]	; (800879c <HAL_GPIO_EXTI_Callback+0x90>)
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	60fb      	str	r3, [r7, #12]
      break;
 800877c:	e004      	b.n	8008788 <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[5];
 800877e:	4b07      	ldr	r3, [pc, #28]	; (800879c <HAL_GPIO_EXTI_Callback+0x90>)
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	60fb      	str	r3, [r7, #12]
      break;
 8008784:	e000      	b.n	8008788 <HAL_GPIO_EXTI_Callback+0x7c>
      break;
 8008786:	bf00      	nop
}
  if(fptr != 0)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <HAL_GPIO_EXTI_Callback+0x88>
    fptr(NULL);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2000      	movs	r0, #0
 8008792:	4798      	blx	r3
}
 8008794:	bf00      	nop
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	20000010 	.word	0x20000010

080087a0 <TimerInit>:
 * \retval true (the object is already in the list) or false
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	605a      	str	r2, [r3, #4]
    obj->IsStarted = false;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	721a      	strb	r2, [r3, #8]
    obj->IsNext2Expire = false;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	725a      	strb	r2, [r3, #9]
    obj->Callback = callback;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	683a      	ldr	r2, [r7, #0]
 80087c6:	60da      	str	r2, [r3, #12]
    obj->Context = NULL;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	611a      	str	r2, [r3, #16]
    obj->Next = NULL;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	615a      	str	r2, [r3, #20]
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	bc80      	pop	{r7}
 80087dc:	4770      	bx	lr
	...

080087e0 <TimerStart>:
{
    obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	60fb      	str	r3, [r7, #12]

    CRITICAL_SECTION_BEGIN( );
 80087ec:	f107 0308 	add.w	r3, r7, #8
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7ff f869 	bl	80078c8 <BoardCriticalSectionBegin>

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d005      	beq.n	8008808 <TimerStart+0x28>
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f989 	bl	8008b14 <TimerExists>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d005      	beq.n	8008814 <TimerStart+0x34>
    {
        CRITICAL_SECTION_END( );
 8008808:	f107 0308 	add.w	r3, r7, #8
 800880c:	4618      	mov	r0, r3
 800880e:	f7ff f86c 	bl	80078ea <BoardCriticalSectionEnd>
 8008812:	e02f      	b.n	8008874 <TimerStart+0x94>
        return;
    }

    obj->Timestamp = obj->ReloadValue;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	601a      	str	r2, [r3, #0]
    obj->IsStarted = true;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	721a      	strb	r2, [r3, #8]
    obj->IsNext2Expire = false;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	725a      	strb	r2, [r3, #9]

    if( TimerListHead == NULL )
 8008828:	4b14      	ldr	r3, [pc, #80]	; (800887c <TimerStart+0x9c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d105      	bne.n	800883c <TimerStart+0x5c>
    {
        RtcSetTimerContext( );
 8008830:	f7ff fb8e 	bl	8007f50 <RtcSetTimerContext>
        // Inserts a timer at time now + obj->Timestamp
        TimerInsertNewHeadTimer( obj );
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f853 	bl	80088e0 <TimerInsertNewHeadTimer>
 800883a:	e016      	b.n	800886a <TimerStart+0x8a>
    }
    else
    {
        elapsedTime = RtcGetTimerElapsedTime( );
 800883c:	f7ff fd1a 	bl	8008274 <RtcGetTimerElapsedTime>
 8008840:	60f8      	str	r0, [r7, #12]
        obj->Timestamp += elapsedTime;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	441a      	add	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	601a      	str	r2, [r3, #0]

        if( obj->Timestamp < TimerListHead->Timestamp )
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	4b0a      	ldr	r3, [pc, #40]	; (800887c <TimerStart+0x9c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	429a      	cmp	r2, r3
 800885a:	d203      	bcs.n	8008864 <TimerStart+0x84>
        {
            TimerInsertNewHeadTimer( obj );
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f83f 	bl	80088e0 <TimerInsertNewHeadTimer>
 8008862:	e002      	b.n	800886a <TimerStart+0x8a>
        }
        else
        {
            TimerInsertTimer( obj );
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f80b 	bl	8008880 <TimerInsertTimer>
        }
    }
    CRITICAL_SECTION_END( );
 800886a:	f107 0308 	add.w	r3, r7, #8
 800886e:	4618      	mov	r0, r3
 8008870:	f7ff f83b 	bl	80078ea <BoardCriticalSectionEnd>
}
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	20001274 	.word	0x20001274

08008880 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj )
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8008888:	4b14      	ldr	r3, [pc, #80]	; (80088dc <TimerInsertTimer+0x5c>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* next = TimerListHead->Next;
 800888e:	4b13      	ldr	r3, [pc, #76]	; (80088dc <TimerInsertTimer+0x5c>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	60bb      	str	r3, [r7, #8]

    while( cur->Next != NULL )
 8008896:	e012      	b.n	80088be <TimerInsertTimer+0x3e>
    {
        if( obj->Timestamp > next->Timestamp )
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d905      	bls.n	80088b0 <TimerInsertTimer+0x30>
        {
            cur = next;
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	60fb      	str	r3, [r7, #12]
            next = next->Next;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	60bb      	str	r3, [r7, #8]
 80088ae:	e006      	b.n	80088be <TimerInsertTimer+0x3e>
        }
        else
        {
            cur->Next = obj;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	615a      	str	r2, [r3, #20]
            obj->Next = next;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	615a      	str	r2, [r3, #20]
            return;
 80088bc:	e009      	b.n	80088d2 <TimerInsertTimer+0x52>
    while( cur->Next != NULL )
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1e8      	bne.n	8008898 <TimerInsertTimer+0x18>
        }
    }
    cur->Next = obj;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	615a      	str	r2, [r3, #20]
    obj->Next = NULL;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	615a      	str	r2, [r3, #20]
}
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bc80      	pop	{r7}
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	20001274 	.word	0x20001274

080088e0 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 80088e8:	4b0b      	ldr	r3, [pc, #44]	; (8008918 <TimerInsertNewHeadTimer+0x38>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d002      	beq.n	80088fa <TimerInsertNewHeadTimer+0x1a>
    {
        cur->IsNext2Expire = false;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	725a      	strb	r2, [r3, #9]
    }

    obj->Next = cur;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	615a      	str	r2, [r3, #20]
    TimerListHead = obj;
 8008900:	4a05      	ldr	r2, [pc, #20]	; (8008918 <TimerInsertNewHeadTimer+0x38>)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6013      	str	r3, [r2, #0]
    TimerSetTimeout( TimerListHead );
 8008906:	4b04      	ldr	r3, [pc, #16]	; (8008918 <TimerInsertNewHeadTimer+0x38>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4618      	mov	r0, r3
 800890c:	f000 f968 	bl	8008be0 <TimerSetTimeout>
}
 8008910:	bf00      	nop
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	20001274 	.word	0x20001274

0800891c <TimerIrqHandler>:
{
    return obj->IsStarted;
}

void TimerIrqHandler( void )
{
 800891c:	b590      	push	{r4, r7, lr}
 800891e:	b087      	sub	sp, #28
 8008920:	af00      	add	r7, sp, #0
    TimerEvent_t* cur;
    TimerEvent_t* next;

    uint32_t old =  RtcGetTimerContext( );
 8008922:	f7ff fb29 	bl	8007f78 <RtcGetTimerContext>
 8008926:	6138      	str	r0, [r7, #16]
    uint32_t now =  RtcSetTimerContext( );
 8008928:	f7ff fb12 	bl	8007f50 <RtcSetTimerContext>
 800892c:	60f8      	str	r0, [r7, #12]
    uint32_t deltaContext = now - old; // intentional wrap around
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	60bb      	str	r3, [r7, #8]

    // Update timeStamp based upon new Time Reference
    // because delta context should never exceed 2^32
    if( TimerListHead != NULL )
 8008936:	4b39      	ldr	r3, [pc, #228]	; (8008a1c <TimerIrqHandler+0x100>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d01c      	beq.n	8008978 <TimerIrqHandler+0x5c>
    {
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 800893e:	4b37      	ldr	r3, [pc, #220]	; (8008a1c <TimerIrqHandler+0x100>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	617b      	str	r3, [r7, #20]
 8008944:	e014      	b.n	8008970 <TimerIrqHandler+0x54>
        {
            next = cur->Next;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	607b      	str	r3, [r7, #4]
            if( next->Timestamp > deltaContext )
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	429a      	cmp	r2, r3
 8008954:	d206      	bcs.n	8008964 <TimerIrqHandler+0x48>
            {
                next->Timestamp -= deltaContext;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	1ad2      	subs	r2, r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	601a      	str	r2, [r3, #0]
 8008962:	e002      	b.n	800896a <TimerIrqHandler+0x4e>
            }
            else
            {
                next->Timestamp = 0;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	601a      	str	r2, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	617b      	str	r3, [r7, #20]
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1e6      	bne.n	8008946 <TimerIrqHandler+0x2a>
            }
        }
    }

    // Execute immediately the alarm callback
    if ( TimerListHead != NULL )
 8008978:	4b28      	ldr	r3, [pc, #160]	; (8008a1c <TimerIrqHandler+0x100>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d02c      	beq.n	80089da <TimerIrqHandler+0xbe>
    {
        cur = TimerListHead;
 8008980:	4b26      	ldr	r3, [pc, #152]	; (8008a1c <TimerIrqHandler+0x100>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
 8008986:	4b25      	ldr	r3, [pc, #148]	; (8008a1c <TimerIrqHandler+0x100>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	4a23      	ldr	r2, [pc, #140]	; (8008a1c <TimerIrqHandler+0x100>)
 800898e:	6013      	str	r3, [r2, #0]
        cur->IsStarted = false;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	2200      	movs	r2, #0
 8008994:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d100      	bne.n	80089a0 <TimerIrqHandler+0x84>
 800899e:	e7fe      	b.n	800899e <TimerIrqHandler+0x82>
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	6912      	ldr	r2, [r2, #16]
 80089a8:	4610      	mov	r0, r2
 80089aa:	4798      	blx	r3
    }

    // Remove all the expired object from the list
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 80089ac:	e015      	b.n	80089da <TimerIrqHandler+0xbe>
    {
        cur = TimerListHead;
 80089ae:	4b1b      	ldr	r3, [pc, #108]	; (8008a1c <TimerIrqHandler+0x100>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
 80089b4:	4b19      	ldr	r3, [pc, #100]	; (8008a1c <TimerIrqHandler+0x100>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	4a18      	ldr	r2, [pc, #96]	; (8008a1c <TimerIrqHandler+0x100>)
 80089bc:	6013      	str	r3, [r2, #0]
        cur->IsStarted = false;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2200      	movs	r2, #0
 80089c2:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d100      	bne.n	80089ce <TimerIrqHandler+0xb2>
 80089cc:	e7fe      	b.n	80089cc <TimerIrqHandler+0xb0>
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	6912      	ldr	r2, [r2, #16]
 80089d6:	4610      	mov	r0, r2
 80089d8:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 80089da:	4b10      	ldr	r3, [pc, #64]	; (8008a1c <TimerIrqHandler+0x100>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d007      	beq.n	80089f2 <TimerIrqHandler+0xd6>
 80089e2:	4b0e      	ldr	r3, [pc, #56]	; (8008a1c <TimerIrqHandler+0x100>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681c      	ldr	r4, [r3, #0]
 80089e8:	f7ff fc44 	bl	8008274 <RtcGetTimerElapsedTime>
 80089ec:	4603      	mov	r3, r0
 80089ee:	429c      	cmp	r4, r3
 80089f0:	d3dd      	bcc.n	80089ae <TimerIrqHandler+0x92>
    }

    // Start the next TimerListHead if it exists AND NOT running
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 80089f2:	4b0a      	ldr	r3, [pc, #40]	; (8008a1c <TimerIrqHandler+0x100>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00c      	beq.n	8008a14 <TimerIrqHandler+0xf8>
 80089fa:	4b08      	ldr	r3, [pc, #32]	; (8008a1c <TimerIrqHandler+0x100>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	7a5b      	ldrb	r3, [r3, #9]
 8008a00:	f083 0301 	eor.w	r3, r3, #1
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d004      	beq.n	8008a14 <TimerIrqHandler+0xf8>
    {
        TimerSetTimeout( TimerListHead );
 8008a0a:	4b04      	ldr	r3, [pc, #16]	; (8008a1c <TimerIrqHandler+0x100>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 f8e6 	bl	8008be0 <TimerSetTimeout>
    }
}
 8008a14:	bf00      	nop
 8008a16:	371c      	adds	r7, #28
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd90      	pop	{r4, r7, pc}
 8008a1c:	20001274 	.word	0x20001274

08008a20 <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
    CRITICAL_SECTION_BEGIN( );
 8008a28:	f107 030c 	add.w	r3, r7, #12
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7fe ff4b 	bl	80078c8 <BoardCriticalSectionBegin>

    TimerEvent_t* prev = TimerListHead;
 8008a32:	4b37      	ldr	r3, [pc, #220]	; (8008b10 <TimerStop+0xf0>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	617b      	str	r3, [r7, #20]
    TimerEvent_t* cur = TimerListHead;
 8008a38:	4b35      	ldr	r3, [pc, #212]	; (8008b10 <TimerStop+0xf0>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	613b      	str	r3, [r7, #16]

    // List is empty or the obj to stop does not exist
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8008a3e:	4b34      	ldr	r3, [pc, #208]	; (8008b10 <TimerStop+0xf0>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d002      	beq.n	8008a4c <TimerStop+0x2c>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d105      	bne.n	8008a58 <TimerStop+0x38>
    {
        CRITICAL_SECTION_END( );
 8008a4c:	f107 030c 	add.w	r3, r7, #12
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7fe ff4a 	bl	80078ea <BoardCriticalSectionEnd>
 8008a56:	e057      	b.n	8008b08 <TimerStop+0xe8>
        return;
    }

    obj->IsStarted = false;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == obj ) // Stop the Head
 8008a5e:	4b2c      	ldr	r3, [pc, #176]	; (8008b10 <TimerStop+0xf0>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d147      	bne.n	8008af8 <TimerStop+0xd8>
    {
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8008a68:	4b29      	ldr	r3, [pc, #164]	; (8008b10 <TimerStop+0xf0>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	7a5b      	ldrb	r3, [r3, #9]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d019      	beq.n	8008aa6 <TimerStop+0x86>
        {
            TimerListHead->IsNext2Expire = false;
 8008a72:	4b27      	ldr	r3, [pc, #156]	; (8008b10 <TimerStop+0xf0>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2200      	movs	r2, #0
 8008a78:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
 8008a7a:	4b25      	ldr	r3, [pc, #148]	; (8008b10 <TimerStop+0xf0>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00a      	beq.n	8008a9a <TimerStop+0x7a>
            {
                TimerListHead = TimerListHead->Next;
 8008a84:	4b22      	ldr	r3, [pc, #136]	; (8008b10 <TimerStop+0xf0>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	4a21      	ldr	r2, [pc, #132]	; (8008b10 <TimerStop+0xf0>)
 8008a8c:	6013      	str	r3, [r2, #0]
                TimerSetTimeout( TimerListHead );
 8008a8e:	4b20      	ldr	r3, [pc, #128]	; (8008b10 <TimerStop+0xf0>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 f8a4 	bl	8008be0 <TimerSetTimeout>
 8008a98:	e031      	b.n	8008afe <TimerStop+0xde>
            }
            else
            {
                RtcStopAlarm( );
 8008a9a:	f7ff fac5 	bl	8008028 <RtcStopAlarm>
                TimerListHead = NULL;
 8008a9e:	4b1c      	ldr	r3, [pc, #112]	; (8008b10 <TimerStop+0xf0>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	e02b      	b.n	8008afe <TimerStop+0xde>
            }
        }
        else // Stop the head before it is started
        {
            if( TimerListHead->Next != NULL )
 8008aa6:	4b1a      	ldr	r3, [pc, #104]	; (8008b10 <TimerStop+0xf0>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d005      	beq.n	8008abc <TimerStop+0x9c>
            {
                TimerListHead = TimerListHead->Next;
 8008ab0:	4b17      	ldr	r3, [pc, #92]	; (8008b10 <TimerStop+0xf0>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	4a16      	ldr	r2, [pc, #88]	; (8008b10 <TimerStop+0xf0>)
 8008ab8:	6013      	str	r3, [r2, #0]
 8008aba:	e020      	b.n	8008afe <TimerStop+0xde>
            }
            else
            {
                TimerListHead = NULL;
 8008abc:	4b14      	ldr	r3, [pc, #80]	; (8008b10 <TimerStop+0xf0>)
 8008abe:	2200      	movs	r2, #0
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	e01c      	b.n	8008afe <TimerStop+0xde>
    }
    else // Stop an object within the list
    {
        while( cur != NULL )
        {
            if( cur == obj )
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d110      	bne.n	8008aee <TimerStop+0xce>
            {
                if( cur->Next != NULL )
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d006      	beq.n	8008ae2 <TimerStop+0xc2>
                {
                    cur = cur->Next;
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	615a      	str	r2, [r3, #20]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
 8008ae0:	e00d      	b.n	8008afe <TimerStop+0xde>
                    cur = NULL;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	615a      	str	r2, [r3, #20]
                break;
 8008aec:	e007      	b.n	8008afe <TimerStop+0xde>
            }
            else
            {
                prev = cur;
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	617b      	str	r3, [r7, #20]
                cur = cur->Next;
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	613b      	str	r3, [r7, #16]
        while( cur != NULL )
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1e2      	bne.n	8008ac4 <TimerStop+0xa4>
            }
        }
    }
    CRITICAL_SECTION_END( );
 8008afe:	f107 030c 	add.w	r3, r7, #12
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fe fef1 	bl	80078ea <BoardCriticalSectionEnd>
}
 8008b08:	3718      	adds	r7, #24
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	20001274 	.word	0x20001274

08008b14 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <TimerExists+0x34>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
 8008b22:	e008      	b.n	8008b36 <TimerExists+0x22>
    {
        if( cur == obj )
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d101      	bne.n	8008b30 <TimerExists+0x1c>
        {
            return true;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e006      	b.n	8008b3e <TimerExists+0x2a>
        }
        cur = cur->Next;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1f3      	bne.n	8008b24 <TimerExists+0x10>
    }
    return false;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3714      	adds	r7, #20
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bc80      	pop	{r7}
 8008b46:	4770      	bx	lr
 8008b48:	20001274 	.word	0x20001274

08008b4c <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
    uint32_t minValue = 0;
 8008b56:	2300      	movs	r3, #0
 8008b58:	60bb      	str	r3, [r7, #8]
    uint32_t ticks = RtcMs2Tick( value );
 8008b5a:	6838      	ldr	r0, [r7, #0]
 8008b5c:	f7ff fa1d 	bl	8007f9a <RtcMs2Tick>
 8008b60:	60f8      	str	r0, [r7, #12]

    TimerStop( obj );
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f7ff ff5c 	bl	8008a20 <TimerStop>

    minValue = RtcGetMinimumTimeout( );
 8008b68:	f7ff fa10 	bl	8007f8c <RtcGetMinimumTimeout>
 8008b6c:	60b8      	str	r0, [r7, #8]

    if( ticks < minValue )
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d201      	bcs.n	8008b7a <TimerSetValue+0x2e>
    {
        ticks = minValue;
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	60fb      	str	r3, [r7, #12]
    }

    obj->Timestamp = ticks;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = ticks;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	605a      	str	r2, [r3, #4]
}
 8008b86:	bf00      	nop
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b082      	sub	sp, #8
 8008b92:	af00      	add	r7, sp, #0
    uint32_t now = RtcGetTimerValue( );
 8008b94:	f7ff fb5a 	bl	800824c <RtcGetTimerValue>
 8008b98:	6078      	str	r0, [r7, #4]
    return  RtcTick2Ms( now );
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7ff fa1a 	bl	8007fd4 <RtcTick2Ms>
 8008ba0:	4603      	mov	r3, r0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
    if ( past == 0 )
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d101      	bne.n	8008bbc <TimerGetElapsedTime+0x12>
    {
        return 0;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	e00d      	b.n	8008bd8 <TimerGetElapsedTime+0x2e>
    }
    uint32_t nowInTicks = RtcGetTimerValue( );
 8008bbc:	f7ff fb46 	bl	800824c <RtcGetTimerValue>
 8008bc0:	60f8      	str	r0, [r7, #12]
    uint32_t pastInTicks = RtcMs2Tick( past );
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7ff f9e9 	bl	8007f9a <RtcMs2Tick>
 8008bc8:	60b8      	str	r0, [r7, #8]

    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7ff f9ff 	bl	8007fd4 <RtcTick2Ms>
 8008bd6:	4603      	mov	r3, r0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <TimerSetTimeout>:

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8008be0:	b590      	push	{r4, r7, lr}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8008be8:	f7ff f9d0 	bl	8007f8c <RtcGetMinimumTimeout>
 8008bec:	4603      	mov	r3, r0
 8008bee:	60fb      	str	r3, [r7, #12]
    obj->IsNext2Expire = true;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	725a      	strb	r2, [r3, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681c      	ldr	r4, [r3, #0]
 8008bfa:	f7ff fb3b 	bl	8008274 <RtcGetTimerElapsedTime>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	4413      	add	r3, r2
 8008c04:	429c      	cmp	r4, r3
 8008c06:	d206      	bcs.n	8008c16 <TimerSetTimeout+0x36>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 8008c08:	f7ff fb34 	bl	8008274 <RtcGetTimerElapsedTime>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	441a      	add	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	601a      	str	r2, [r3, #0]
    }
    RtcSetAlarm( obj->Timestamp );
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7ff f9f6 	bl	800800c <RtcSetAlarm>
}
 8008c20:	bf00      	nop
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd90      	pop	{r4, r7, pc}

08008c28 <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	4613      	mov	r3, r2
 8008c34:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8008c36:	e007      	b.n	8008c48 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	1c53      	adds	r3, r2, #1
 8008c3c:	60bb      	str	r3, [r7, #8]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	1c59      	adds	r1, r3, #1
 8008c42:	60f9      	str	r1, [r7, #12]
 8008c44:	7812      	ldrb	r2, [r2, #0]
 8008c46:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8008c48:	88fb      	ldrh	r3, [r7, #6]
 8008c4a:	1e5a      	subs	r2, r3, #1
 8008c4c:	80fa      	strh	r2, [r7, #6]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1f2      	bne.n	8008c38 <memcpy1+0x10>
    }
}
 8008c52:	bf00      	nop
 8008c54:	bf00      	nop
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bc80      	pop	{r7}
 8008c5c:	4770      	bx	lr
	...

08008c60 <__errno>:
 8008c60:	4b01      	ldr	r3, [pc, #4]	; (8008c68 <__errno+0x8>)
 8008c62:	6818      	ldr	r0, [r3, #0]
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	20000048 	.word	0x20000048

08008c6c <__libc_init_array>:
 8008c6c:	b570      	push	{r4, r5, r6, lr}
 8008c6e:	2600      	movs	r6, #0
 8008c70:	4d0c      	ldr	r5, [pc, #48]	; (8008ca4 <__libc_init_array+0x38>)
 8008c72:	4c0d      	ldr	r4, [pc, #52]	; (8008ca8 <__libc_init_array+0x3c>)
 8008c74:	1b64      	subs	r4, r4, r5
 8008c76:	10a4      	asrs	r4, r4, #2
 8008c78:	42a6      	cmp	r6, r4
 8008c7a:	d109      	bne.n	8008c90 <__libc_init_array+0x24>
 8008c7c:	f001 f954 	bl	8009f28 <_init>
 8008c80:	2600      	movs	r6, #0
 8008c82:	4d0a      	ldr	r5, [pc, #40]	; (8008cac <__libc_init_array+0x40>)
 8008c84:	4c0a      	ldr	r4, [pc, #40]	; (8008cb0 <__libc_init_array+0x44>)
 8008c86:	1b64      	subs	r4, r4, r5
 8008c88:	10a4      	asrs	r4, r4, #2
 8008c8a:	42a6      	cmp	r6, r4
 8008c8c:	d105      	bne.n	8008c9a <__libc_init_array+0x2e>
 8008c8e:	bd70      	pop	{r4, r5, r6, pc}
 8008c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c94:	4798      	blx	r3
 8008c96:	3601      	adds	r6, #1
 8008c98:	e7ee      	b.n	8008c78 <__libc_init_array+0xc>
 8008c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c9e:	4798      	blx	r3
 8008ca0:	3601      	adds	r6, #1
 8008ca2:	e7f2      	b.n	8008c8a <__libc_init_array+0x1e>
 8008ca4:	0800a25c 	.word	0x0800a25c
 8008ca8:	0800a25c 	.word	0x0800a25c
 8008cac:	0800a25c 	.word	0x0800a25c
 8008cb0:	0800a260 	.word	0x0800a260

08008cb4 <memcpy>:
 8008cb4:	440a      	add	r2, r1
 8008cb6:	4291      	cmp	r1, r2
 8008cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cbc:	d100      	bne.n	8008cc0 <memcpy+0xc>
 8008cbe:	4770      	bx	lr
 8008cc0:	b510      	push	{r4, lr}
 8008cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cc6:	4291      	cmp	r1, r2
 8008cc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ccc:	d1f9      	bne.n	8008cc2 <memcpy+0xe>
 8008cce:	bd10      	pop	{r4, pc}

08008cd0 <memset>:
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	4402      	add	r2, r0
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d100      	bne.n	8008cda <memset+0xa>
 8008cd8:	4770      	bx	lr
 8008cda:	f803 1b01 	strb.w	r1, [r3], #1
 8008cde:	e7f9      	b.n	8008cd4 <memset+0x4>

08008ce0 <iprintf>:
 8008ce0:	b40f      	push	{r0, r1, r2, r3}
 8008ce2:	4b0a      	ldr	r3, [pc, #40]	; (8008d0c <iprintf+0x2c>)
 8008ce4:	b513      	push	{r0, r1, r4, lr}
 8008ce6:	681c      	ldr	r4, [r3, #0]
 8008ce8:	b124      	cbz	r4, 8008cf4 <iprintf+0x14>
 8008cea:	69a3      	ldr	r3, [r4, #24]
 8008cec:	b913      	cbnz	r3, 8008cf4 <iprintf+0x14>
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f000 f886 	bl	8008e00 <__sinit>
 8008cf4:	ab05      	add	r3, sp, #20
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	9a04      	ldr	r2, [sp, #16]
 8008cfa:	68a1      	ldr	r1, [r4, #8]
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	f000 fafd 	bl	80092fc <_vfiprintf_r>
 8008d02:	b002      	add	sp, #8
 8008d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d08:	b004      	add	sp, #16
 8008d0a:	4770      	bx	lr
 8008d0c:	20000048 	.word	0x20000048

08008d10 <siprintf>:
 8008d10:	b40e      	push	{r1, r2, r3}
 8008d12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d16:	b500      	push	{lr}
 8008d18:	b09c      	sub	sp, #112	; 0x70
 8008d1a:	ab1d      	add	r3, sp, #116	; 0x74
 8008d1c:	9002      	str	r0, [sp, #8]
 8008d1e:	9006      	str	r0, [sp, #24]
 8008d20:	9107      	str	r1, [sp, #28]
 8008d22:	9104      	str	r1, [sp, #16]
 8008d24:	4808      	ldr	r0, [pc, #32]	; (8008d48 <siprintf+0x38>)
 8008d26:	4909      	ldr	r1, [pc, #36]	; (8008d4c <siprintf+0x3c>)
 8008d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d2c:	9105      	str	r1, [sp, #20]
 8008d2e:	6800      	ldr	r0, [r0, #0]
 8008d30:	a902      	add	r1, sp, #8
 8008d32:	9301      	str	r3, [sp, #4]
 8008d34:	f000 f9ba 	bl	80090ac <_svfiprintf_r>
 8008d38:	2200      	movs	r2, #0
 8008d3a:	9b02      	ldr	r3, [sp, #8]
 8008d3c:	701a      	strb	r2, [r3, #0]
 8008d3e:	b01c      	add	sp, #112	; 0x70
 8008d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d44:	b003      	add	sp, #12
 8008d46:	4770      	bx	lr
 8008d48:	20000048 	.word	0x20000048
 8008d4c:	ffff0208 	.word	0xffff0208

08008d50 <std>:
 8008d50:	2300      	movs	r3, #0
 8008d52:	b510      	push	{r4, lr}
 8008d54:	4604      	mov	r4, r0
 8008d56:	e9c0 3300 	strd	r3, r3, [r0]
 8008d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d5e:	6083      	str	r3, [r0, #8]
 8008d60:	8181      	strh	r1, [r0, #12]
 8008d62:	6643      	str	r3, [r0, #100]	; 0x64
 8008d64:	81c2      	strh	r2, [r0, #14]
 8008d66:	6183      	str	r3, [r0, #24]
 8008d68:	4619      	mov	r1, r3
 8008d6a:	2208      	movs	r2, #8
 8008d6c:	305c      	adds	r0, #92	; 0x5c
 8008d6e:	f7ff ffaf 	bl	8008cd0 <memset>
 8008d72:	4b05      	ldr	r3, [pc, #20]	; (8008d88 <std+0x38>)
 8008d74:	6224      	str	r4, [r4, #32]
 8008d76:	6263      	str	r3, [r4, #36]	; 0x24
 8008d78:	4b04      	ldr	r3, [pc, #16]	; (8008d8c <std+0x3c>)
 8008d7a:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d7c:	4b04      	ldr	r3, [pc, #16]	; (8008d90 <std+0x40>)
 8008d7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d80:	4b04      	ldr	r3, [pc, #16]	; (8008d94 <std+0x44>)
 8008d82:	6323      	str	r3, [r4, #48]	; 0x30
 8008d84:	bd10      	pop	{r4, pc}
 8008d86:	bf00      	nop
 8008d88:	080098a9 	.word	0x080098a9
 8008d8c:	080098cb 	.word	0x080098cb
 8008d90:	08009903 	.word	0x08009903
 8008d94:	08009927 	.word	0x08009927

08008d98 <_cleanup_r>:
 8008d98:	4901      	ldr	r1, [pc, #4]	; (8008da0 <_cleanup_r+0x8>)
 8008d9a:	f000 b8af 	b.w	8008efc <_fwalk_reent>
 8008d9e:	bf00      	nop
 8008da0:	08009c01 	.word	0x08009c01

08008da4 <__sfmoreglue>:
 8008da4:	b570      	push	{r4, r5, r6, lr}
 8008da6:	2568      	movs	r5, #104	; 0x68
 8008da8:	1e4a      	subs	r2, r1, #1
 8008daa:	4355      	muls	r5, r2
 8008dac:	460e      	mov	r6, r1
 8008dae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008db2:	f000 f8c5 	bl	8008f40 <_malloc_r>
 8008db6:	4604      	mov	r4, r0
 8008db8:	b140      	cbz	r0, 8008dcc <__sfmoreglue+0x28>
 8008dba:	2100      	movs	r1, #0
 8008dbc:	e9c0 1600 	strd	r1, r6, [r0]
 8008dc0:	300c      	adds	r0, #12
 8008dc2:	60a0      	str	r0, [r4, #8]
 8008dc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008dc8:	f7ff ff82 	bl	8008cd0 <memset>
 8008dcc:	4620      	mov	r0, r4
 8008dce:	bd70      	pop	{r4, r5, r6, pc}

08008dd0 <__sfp_lock_acquire>:
 8008dd0:	4801      	ldr	r0, [pc, #4]	; (8008dd8 <__sfp_lock_acquire+0x8>)
 8008dd2:	f000 b8b3 	b.w	8008f3c <__retarget_lock_acquire_recursive>
 8008dd6:	bf00      	nop
 8008dd8:	2000151c 	.word	0x2000151c

08008ddc <__sfp_lock_release>:
 8008ddc:	4801      	ldr	r0, [pc, #4]	; (8008de4 <__sfp_lock_release+0x8>)
 8008dde:	f000 b8ae 	b.w	8008f3e <__retarget_lock_release_recursive>
 8008de2:	bf00      	nop
 8008de4:	2000151c 	.word	0x2000151c

08008de8 <__sinit_lock_acquire>:
 8008de8:	4801      	ldr	r0, [pc, #4]	; (8008df0 <__sinit_lock_acquire+0x8>)
 8008dea:	f000 b8a7 	b.w	8008f3c <__retarget_lock_acquire_recursive>
 8008dee:	bf00      	nop
 8008df0:	20001517 	.word	0x20001517

08008df4 <__sinit_lock_release>:
 8008df4:	4801      	ldr	r0, [pc, #4]	; (8008dfc <__sinit_lock_release+0x8>)
 8008df6:	f000 b8a2 	b.w	8008f3e <__retarget_lock_release_recursive>
 8008dfa:	bf00      	nop
 8008dfc:	20001517 	.word	0x20001517

08008e00 <__sinit>:
 8008e00:	b510      	push	{r4, lr}
 8008e02:	4604      	mov	r4, r0
 8008e04:	f7ff fff0 	bl	8008de8 <__sinit_lock_acquire>
 8008e08:	69a3      	ldr	r3, [r4, #24]
 8008e0a:	b11b      	cbz	r3, 8008e14 <__sinit+0x14>
 8008e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e10:	f7ff bff0 	b.w	8008df4 <__sinit_lock_release>
 8008e14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e18:	6523      	str	r3, [r4, #80]	; 0x50
 8008e1a:	4b13      	ldr	r3, [pc, #76]	; (8008e68 <__sinit+0x68>)
 8008e1c:	4a13      	ldr	r2, [pc, #76]	; (8008e6c <__sinit+0x6c>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e22:	42a3      	cmp	r3, r4
 8008e24:	bf08      	it	eq
 8008e26:	2301      	moveq	r3, #1
 8008e28:	4620      	mov	r0, r4
 8008e2a:	bf08      	it	eq
 8008e2c:	61a3      	streq	r3, [r4, #24]
 8008e2e:	f000 f81f 	bl	8008e70 <__sfp>
 8008e32:	6060      	str	r0, [r4, #4]
 8008e34:	4620      	mov	r0, r4
 8008e36:	f000 f81b 	bl	8008e70 <__sfp>
 8008e3a:	60a0      	str	r0, [r4, #8]
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f000 f817 	bl	8008e70 <__sfp>
 8008e42:	2200      	movs	r2, #0
 8008e44:	2104      	movs	r1, #4
 8008e46:	60e0      	str	r0, [r4, #12]
 8008e48:	6860      	ldr	r0, [r4, #4]
 8008e4a:	f7ff ff81 	bl	8008d50 <std>
 8008e4e:	2201      	movs	r2, #1
 8008e50:	2109      	movs	r1, #9
 8008e52:	68a0      	ldr	r0, [r4, #8]
 8008e54:	f7ff ff7c 	bl	8008d50 <std>
 8008e58:	2202      	movs	r2, #2
 8008e5a:	2112      	movs	r1, #18
 8008e5c:	68e0      	ldr	r0, [r4, #12]
 8008e5e:	f7ff ff77 	bl	8008d50 <std>
 8008e62:	2301      	movs	r3, #1
 8008e64:	61a3      	str	r3, [r4, #24]
 8008e66:	e7d1      	b.n	8008e0c <__sinit+0xc>
 8008e68:	0800a1bc 	.word	0x0800a1bc
 8008e6c:	08008d99 	.word	0x08008d99

08008e70 <__sfp>:
 8008e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e72:	4607      	mov	r7, r0
 8008e74:	f7ff ffac 	bl	8008dd0 <__sfp_lock_acquire>
 8008e78:	4b1e      	ldr	r3, [pc, #120]	; (8008ef4 <__sfp+0x84>)
 8008e7a:	681e      	ldr	r6, [r3, #0]
 8008e7c:	69b3      	ldr	r3, [r6, #24]
 8008e7e:	b913      	cbnz	r3, 8008e86 <__sfp+0x16>
 8008e80:	4630      	mov	r0, r6
 8008e82:	f7ff ffbd 	bl	8008e00 <__sinit>
 8008e86:	3648      	adds	r6, #72	; 0x48
 8008e88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	d503      	bpl.n	8008e98 <__sfp+0x28>
 8008e90:	6833      	ldr	r3, [r6, #0]
 8008e92:	b30b      	cbz	r3, 8008ed8 <__sfp+0x68>
 8008e94:	6836      	ldr	r6, [r6, #0]
 8008e96:	e7f7      	b.n	8008e88 <__sfp+0x18>
 8008e98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e9c:	b9d5      	cbnz	r5, 8008ed4 <__sfp+0x64>
 8008e9e:	4b16      	ldr	r3, [pc, #88]	; (8008ef8 <__sfp+0x88>)
 8008ea0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ea4:	60e3      	str	r3, [r4, #12]
 8008ea6:	6665      	str	r5, [r4, #100]	; 0x64
 8008ea8:	f000 f847 	bl	8008f3a <__retarget_lock_init_recursive>
 8008eac:	f7ff ff96 	bl	8008ddc <__sfp_lock_release>
 8008eb0:	2208      	movs	r2, #8
 8008eb2:	4629      	mov	r1, r5
 8008eb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008eb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ebc:	6025      	str	r5, [r4, #0]
 8008ebe:	61a5      	str	r5, [r4, #24]
 8008ec0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ec4:	f7ff ff04 	bl	8008cd0 <memset>
 8008ec8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ecc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ed4:	3468      	adds	r4, #104	; 0x68
 8008ed6:	e7d9      	b.n	8008e8c <__sfp+0x1c>
 8008ed8:	2104      	movs	r1, #4
 8008eda:	4638      	mov	r0, r7
 8008edc:	f7ff ff62 	bl	8008da4 <__sfmoreglue>
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	6030      	str	r0, [r6, #0]
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d1d5      	bne.n	8008e94 <__sfp+0x24>
 8008ee8:	f7ff ff78 	bl	8008ddc <__sfp_lock_release>
 8008eec:	230c      	movs	r3, #12
 8008eee:	603b      	str	r3, [r7, #0]
 8008ef0:	e7ee      	b.n	8008ed0 <__sfp+0x60>
 8008ef2:	bf00      	nop
 8008ef4:	0800a1bc 	.word	0x0800a1bc
 8008ef8:	ffff0001 	.word	0xffff0001

08008efc <_fwalk_reent>:
 8008efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f00:	4606      	mov	r6, r0
 8008f02:	4688      	mov	r8, r1
 8008f04:	2700      	movs	r7, #0
 8008f06:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f0e:	f1b9 0901 	subs.w	r9, r9, #1
 8008f12:	d505      	bpl.n	8008f20 <_fwalk_reent+0x24>
 8008f14:	6824      	ldr	r4, [r4, #0]
 8008f16:	2c00      	cmp	r4, #0
 8008f18:	d1f7      	bne.n	8008f0a <_fwalk_reent+0xe>
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f20:	89ab      	ldrh	r3, [r5, #12]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d907      	bls.n	8008f36 <_fwalk_reent+0x3a>
 8008f26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	d003      	beq.n	8008f36 <_fwalk_reent+0x3a>
 8008f2e:	4629      	mov	r1, r5
 8008f30:	4630      	mov	r0, r6
 8008f32:	47c0      	blx	r8
 8008f34:	4307      	orrs	r7, r0
 8008f36:	3568      	adds	r5, #104	; 0x68
 8008f38:	e7e9      	b.n	8008f0e <_fwalk_reent+0x12>

08008f3a <__retarget_lock_init_recursive>:
 8008f3a:	4770      	bx	lr

08008f3c <__retarget_lock_acquire_recursive>:
 8008f3c:	4770      	bx	lr

08008f3e <__retarget_lock_release_recursive>:
 8008f3e:	4770      	bx	lr

08008f40 <_malloc_r>:
 8008f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f42:	1ccd      	adds	r5, r1, #3
 8008f44:	f025 0503 	bic.w	r5, r5, #3
 8008f48:	3508      	adds	r5, #8
 8008f4a:	2d0c      	cmp	r5, #12
 8008f4c:	bf38      	it	cc
 8008f4e:	250c      	movcc	r5, #12
 8008f50:	2d00      	cmp	r5, #0
 8008f52:	4606      	mov	r6, r0
 8008f54:	db01      	blt.n	8008f5a <_malloc_r+0x1a>
 8008f56:	42a9      	cmp	r1, r5
 8008f58:	d903      	bls.n	8008f62 <_malloc_r+0x22>
 8008f5a:	230c      	movs	r3, #12
 8008f5c:	6033      	str	r3, [r6, #0]
 8008f5e:	2000      	movs	r0, #0
 8008f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f62:	f000 ff27 	bl	8009db4 <__malloc_lock>
 8008f66:	4921      	ldr	r1, [pc, #132]	; (8008fec <_malloc_r+0xac>)
 8008f68:	680a      	ldr	r2, [r1, #0]
 8008f6a:	4614      	mov	r4, r2
 8008f6c:	b99c      	cbnz	r4, 8008f96 <_malloc_r+0x56>
 8008f6e:	4f20      	ldr	r7, [pc, #128]	; (8008ff0 <_malloc_r+0xb0>)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	b923      	cbnz	r3, 8008f7e <_malloc_r+0x3e>
 8008f74:	4621      	mov	r1, r4
 8008f76:	4630      	mov	r0, r6
 8008f78:	f000 fc86 	bl	8009888 <_sbrk_r>
 8008f7c:	6038      	str	r0, [r7, #0]
 8008f7e:	4629      	mov	r1, r5
 8008f80:	4630      	mov	r0, r6
 8008f82:	f000 fc81 	bl	8009888 <_sbrk_r>
 8008f86:	1c43      	adds	r3, r0, #1
 8008f88:	d123      	bne.n	8008fd2 <_malloc_r+0x92>
 8008f8a:	230c      	movs	r3, #12
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	6033      	str	r3, [r6, #0]
 8008f90:	f000 ff16 	bl	8009dc0 <__malloc_unlock>
 8008f94:	e7e3      	b.n	8008f5e <_malloc_r+0x1e>
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	1b5b      	subs	r3, r3, r5
 8008f9a:	d417      	bmi.n	8008fcc <_malloc_r+0x8c>
 8008f9c:	2b0b      	cmp	r3, #11
 8008f9e:	d903      	bls.n	8008fa8 <_malloc_r+0x68>
 8008fa0:	6023      	str	r3, [r4, #0]
 8008fa2:	441c      	add	r4, r3
 8008fa4:	6025      	str	r5, [r4, #0]
 8008fa6:	e004      	b.n	8008fb2 <_malloc_r+0x72>
 8008fa8:	6863      	ldr	r3, [r4, #4]
 8008faa:	42a2      	cmp	r2, r4
 8008fac:	bf0c      	ite	eq
 8008fae:	600b      	streq	r3, [r1, #0]
 8008fb0:	6053      	strne	r3, [r2, #4]
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f000 ff04 	bl	8009dc0 <__malloc_unlock>
 8008fb8:	f104 000b 	add.w	r0, r4, #11
 8008fbc:	1d23      	adds	r3, r4, #4
 8008fbe:	f020 0007 	bic.w	r0, r0, #7
 8008fc2:	1ac2      	subs	r2, r0, r3
 8008fc4:	d0cc      	beq.n	8008f60 <_malloc_r+0x20>
 8008fc6:	1a1b      	subs	r3, r3, r0
 8008fc8:	50a3      	str	r3, [r4, r2]
 8008fca:	e7c9      	b.n	8008f60 <_malloc_r+0x20>
 8008fcc:	4622      	mov	r2, r4
 8008fce:	6864      	ldr	r4, [r4, #4]
 8008fd0:	e7cc      	b.n	8008f6c <_malloc_r+0x2c>
 8008fd2:	1cc4      	adds	r4, r0, #3
 8008fd4:	f024 0403 	bic.w	r4, r4, #3
 8008fd8:	42a0      	cmp	r0, r4
 8008fda:	d0e3      	beq.n	8008fa4 <_malloc_r+0x64>
 8008fdc:	1a21      	subs	r1, r4, r0
 8008fde:	4630      	mov	r0, r6
 8008fe0:	f000 fc52 	bl	8009888 <_sbrk_r>
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	d1dd      	bne.n	8008fa4 <_malloc_r+0x64>
 8008fe8:	e7cf      	b.n	8008f8a <_malloc_r+0x4a>
 8008fea:	bf00      	nop
 8008fec:	20001278 	.word	0x20001278
 8008ff0:	2000127c 	.word	0x2000127c

08008ff4 <__ssputs_r>:
 8008ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff8:	688e      	ldr	r6, [r1, #8]
 8008ffa:	4682      	mov	sl, r0
 8008ffc:	429e      	cmp	r6, r3
 8008ffe:	460c      	mov	r4, r1
 8009000:	4690      	mov	r8, r2
 8009002:	461f      	mov	r7, r3
 8009004:	d838      	bhi.n	8009078 <__ssputs_r+0x84>
 8009006:	898a      	ldrh	r2, [r1, #12]
 8009008:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800900c:	d032      	beq.n	8009074 <__ssputs_r+0x80>
 800900e:	6825      	ldr	r5, [r4, #0]
 8009010:	6909      	ldr	r1, [r1, #16]
 8009012:	3301      	adds	r3, #1
 8009014:	eba5 0901 	sub.w	r9, r5, r1
 8009018:	6965      	ldr	r5, [r4, #20]
 800901a:	444b      	add	r3, r9
 800901c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009020:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009024:	106d      	asrs	r5, r5, #1
 8009026:	429d      	cmp	r5, r3
 8009028:	bf38      	it	cc
 800902a:	461d      	movcc	r5, r3
 800902c:	0553      	lsls	r3, r2, #21
 800902e:	d531      	bpl.n	8009094 <__ssputs_r+0xa0>
 8009030:	4629      	mov	r1, r5
 8009032:	f7ff ff85 	bl	8008f40 <_malloc_r>
 8009036:	4606      	mov	r6, r0
 8009038:	b950      	cbnz	r0, 8009050 <__ssputs_r+0x5c>
 800903a:	230c      	movs	r3, #12
 800903c:	f04f 30ff 	mov.w	r0, #4294967295
 8009040:	f8ca 3000 	str.w	r3, [sl]
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009050:	464a      	mov	r2, r9
 8009052:	6921      	ldr	r1, [r4, #16]
 8009054:	f7ff fe2e 	bl	8008cb4 <memcpy>
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800905e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009062:	81a3      	strh	r3, [r4, #12]
 8009064:	6126      	str	r6, [r4, #16]
 8009066:	444e      	add	r6, r9
 8009068:	6026      	str	r6, [r4, #0]
 800906a:	463e      	mov	r6, r7
 800906c:	6165      	str	r5, [r4, #20]
 800906e:	eba5 0509 	sub.w	r5, r5, r9
 8009072:	60a5      	str	r5, [r4, #8]
 8009074:	42be      	cmp	r6, r7
 8009076:	d900      	bls.n	800907a <__ssputs_r+0x86>
 8009078:	463e      	mov	r6, r7
 800907a:	4632      	mov	r2, r6
 800907c:	4641      	mov	r1, r8
 800907e:	6820      	ldr	r0, [r4, #0]
 8009080:	f000 fe7e 	bl	8009d80 <memmove>
 8009084:	68a3      	ldr	r3, [r4, #8]
 8009086:	6822      	ldr	r2, [r4, #0]
 8009088:	1b9b      	subs	r3, r3, r6
 800908a:	4432      	add	r2, r6
 800908c:	2000      	movs	r0, #0
 800908e:	60a3      	str	r3, [r4, #8]
 8009090:	6022      	str	r2, [r4, #0]
 8009092:	e7db      	b.n	800904c <__ssputs_r+0x58>
 8009094:	462a      	mov	r2, r5
 8009096:	f000 fee5 	bl	8009e64 <_realloc_r>
 800909a:	4606      	mov	r6, r0
 800909c:	2800      	cmp	r0, #0
 800909e:	d1e1      	bne.n	8009064 <__ssputs_r+0x70>
 80090a0:	4650      	mov	r0, sl
 80090a2:	6921      	ldr	r1, [r4, #16]
 80090a4:	f000 fe92 	bl	8009dcc <_free_r>
 80090a8:	e7c7      	b.n	800903a <__ssputs_r+0x46>
	...

080090ac <_svfiprintf_r>:
 80090ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b0:	4698      	mov	r8, r3
 80090b2:	898b      	ldrh	r3, [r1, #12]
 80090b4:	4607      	mov	r7, r0
 80090b6:	061b      	lsls	r3, r3, #24
 80090b8:	460d      	mov	r5, r1
 80090ba:	4614      	mov	r4, r2
 80090bc:	b09d      	sub	sp, #116	; 0x74
 80090be:	d50e      	bpl.n	80090de <_svfiprintf_r+0x32>
 80090c0:	690b      	ldr	r3, [r1, #16]
 80090c2:	b963      	cbnz	r3, 80090de <_svfiprintf_r+0x32>
 80090c4:	2140      	movs	r1, #64	; 0x40
 80090c6:	f7ff ff3b 	bl	8008f40 <_malloc_r>
 80090ca:	6028      	str	r0, [r5, #0]
 80090cc:	6128      	str	r0, [r5, #16]
 80090ce:	b920      	cbnz	r0, 80090da <_svfiprintf_r+0x2e>
 80090d0:	230c      	movs	r3, #12
 80090d2:	603b      	str	r3, [r7, #0]
 80090d4:	f04f 30ff 	mov.w	r0, #4294967295
 80090d8:	e0d1      	b.n	800927e <_svfiprintf_r+0x1d2>
 80090da:	2340      	movs	r3, #64	; 0x40
 80090dc:	616b      	str	r3, [r5, #20]
 80090de:	2300      	movs	r3, #0
 80090e0:	9309      	str	r3, [sp, #36]	; 0x24
 80090e2:	2320      	movs	r3, #32
 80090e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090e8:	2330      	movs	r3, #48	; 0x30
 80090ea:	f04f 0901 	mov.w	r9, #1
 80090ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80090f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009298 <_svfiprintf_r+0x1ec>
 80090f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090fa:	4623      	mov	r3, r4
 80090fc:	469a      	mov	sl, r3
 80090fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009102:	b10a      	cbz	r2, 8009108 <_svfiprintf_r+0x5c>
 8009104:	2a25      	cmp	r2, #37	; 0x25
 8009106:	d1f9      	bne.n	80090fc <_svfiprintf_r+0x50>
 8009108:	ebba 0b04 	subs.w	fp, sl, r4
 800910c:	d00b      	beq.n	8009126 <_svfiprintf_r+0x7a>
 800910e:	465b      	mov	r3, fp
 8009110:	4622      	mov	r2, r4
 8009112:	4629      	mov	r1, r5
 8009114:	4638      	mov	r0, r7
 8009116:	f7ff ff6d 	bl	8008ff4 <__ssputs_r>
 800911a:	3001      	adds	r0, #1
 800911c:	f000 80aa 	beq.w	8009274 <_svfiprintf_r+0x1c8>
 8009120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009122:	445a      	add	r2, fp
 8009124:	9209      	str	r2, [sp, #36]	; 0x24
 8009126:	f89a 3000 	ldrb.w	r3, [sl]
 800912a:	2b00      	cmp	r3, #0
 800912c:	f000 80a2 	beq.w	8009274 <_svfiprintf_r+0x1c8>
 8009130:	2300      	movs	r3, #0
 8009132:	f04f 32ff 	mov.w	r2, #4294967295
 8009136:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800913a:	f10a 0a01 	add.w	sl, sl, #1
 800913e:	9304      	str	r3, [sp, #16]
 8009140:	9307      	str	r3, [sp, #28]
 8009142:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009146:	931a      	str	r3, [sp, #104]	; 0x68
 8009148:	4654      	mov	r4, sl
 800914a:	2205      	movs	r2, #5
 800914c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009150:	4851      	ldr	r0, [pc, #324]	; (8009298 <_svfiprintf_r+0x1ec>)
 8009152:	f000 fe07 	bl	8009d64 <memchr>
 8009156:	9a04      	ldr	r2, [sp, #16]
 8009158:	b9d8      	cbnz	r0, 8009192 <_svfiprintf_r+0xe6>
 800915a:	06d0      	lsls	r0, r2, #27
 800915c:	bf44      	itt	mi
 800915e:	2320      	movmi	r3, #32
 8009160:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009164:	0711      	lsls	r1, r2, #28
 8009166:	bf44      	itt	mi
 8009168:	232b      	movmi	r3, #43	; 0x2b
 800916a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800916e:	f89a 3000 	ldrb.w	r3, [sl]
 8009172:	2b2a      	cmp	r3, #42	; 0x2a
 8009174:	d015      	beq.n	80091a2 <_svfiprintf_r+0xf6>
 8009176:	4654      	mov	r4, sl
 8009178:	2000      	movs	r0, #0
 800917a:	f04f 0c0a 	mov.w	ip, #10
 800917e:	9a07      	ldr	r2, [sp, #28]
 8009180:	4621      	mov	r1, r4
 8009182:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009186:	3b30      	subs	r3, #48	; 0x30
 8009188:	2b09      	cmp	r3, #9
 800918a:	d94e      	bls.n	800922a <_svfiprintf_r+0x17e>
 800918c:	b1b0      	cbz	r0, 80091bc <_svfiprintf_r+0x110>
 800918e:	9207      	str	r2, [sp, #28]
 8009190:	e014      	b.n	80091bc <_svfiprintf_r+0x110>
 8009192:	eba0 0308 	sub.w	r3, r0, r8
 8009196:	fa09 f303 	lsl.w	r3, r9, r3
 800919a:	4313      	orrs	r3, r2
 800919c:	46a2      	mov	sl, r4
 800919e:	9304      	str	r3, [sp, #16]
 80091a0:	e7d2      	b.n	8009148 <_svfiprintf_r+0x9c>
 80091a2:	9b03      	ldr	r3, [sp, #12]
 80091a4:	1d19      	adds	r1, r3, #4
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	9103      	str	r1, [sp, #12]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	bfbb      	ittet	lt
 80091ae:	425b      	neglt	r3, r3
 80091b0:	f042 0202 	orrlt.w	r2, r2, #2
 80091b4:	9307      	strge	r3, [sp, #28]
 80091b6:	9307      	strlt	r3, [sp, #28]
 80091b8:	bfb8      	it	lt
 80091ba:	9204      	strlt	r2, [sp, #16]
 80091bc:	7823      	ldrb	r3, [r4, #0]
 80091be:	2b2e      	cmp	r3, #46	; 0x2e
 80091c0:	d10c      	bne.n	80091dc <_svfiprintf_r+0x130>
 80091c2:	7863      	ldrb	r3, [r4, #1]
 80091c4:	2b2a      	cmp	r3, #42	; 0x2a
 80091c6:	d135      	bne.n	8009234 <_svfiprintf_r+0x188>
 80091c8:	9b03      	ldr	r3, [sp, #12]
 80091ca:	3402      	adds	r4, #2
 80091cc:	1d1a      	adds	r2, r3, #4
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	9203      	str	r2, [sp, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	bfb8      	it	lt
 80091d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80091da:	9305      	str	r3, [sp, #20]
 80091dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092a8 <_svfiprintf_r+0x1fc>
 80091e0:	2203      	movs	r2, #3
 80091e2:	4650      	mov	r0, sl
 80091e4:	7821      	ldrb	r1, [r4, #0]
 80091e6:	f000 fdbd 	bl	8009d64 <memchr>
 80091ea:	b140      	cbz	r0, 80091fe <_svfiprintf_r+0x152>
 80091ec:	2340      	movs	r3, #64	; 0x40
 80091ee:	eba0 000a 	sub.w	r0, r0, sl
 80091f2:	fa03 f000 	lsl.w	r0, r3, r0
 80091f6:	9b04      	ldr	r3, [sp, #16]
 80091f8:	3401      	adds	r4, #1
 80091fa:	4303      	orrs	r3, r0
 80091fc:	9304      	str	r3, [sp, #16]
 80091fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009202:	2206      	movs	r2, #6
 8009204:	4825      	ldr	r0, [pc, #148]	; (800929c <_svfiprintf_r+0x1f0>)
 8009206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800920a:	f000 fdab 	bl	8009d64 <memchr>
 800920e:	2800      	cmp	r0, #0
 8009210:	d038      	beq.n	8009284 <_svfiprintf_r+0x1d8>
 8009212:	4b23      	ldr	r3, [pc, #140]	; (80092a0 <_svfiprintf_r+0x1f4>)
 8009214:	bb1b      	cbnz	r3, 800925e <_svfiprintf_r+0x1b2>
 8009216:	9b03      	ldr	r3, [sp, #12]
 8009218:	3307      	adds	r3, #7
 800921a:	f023 0307 	bic.w	r3, r3, #7
 800921e:	3308      	adds	r3, #8
 8009220:	9303      	str	r3, [sp, #12]
 8009222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009224:	4433      	add	r3, r6
 8009226:	9309      	str	r3, [sp, #36]	; 0x24
 8009228:	e767      	b.n	80090fa <_svfiprintf_r+0x4e>
 800922a:	460c      	mov	r4, r1
 800922c:	2001      	movs	r0, #1
 800922e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009232:	e7a5      	b.n	8009180 <_svfiprintf_r+0xd4>
 8009234:	2300      	movs	r3, #0
 8009236:	f04f 0c0a 	mov.w	ip, #10
 800923a:	4619      	mov	r1, r3
 800923c:	3401      	adds	r4, #1
 800923e:	9305      	str	r3, [sp, #20]
 8009240:	4620      	mov	r0, r4
 8009242:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009246:	3a30      	subs	r2, #48	; 0x30
 8009248:	2a09      	cmp	r2, #9
 800924a:	d903      	bls.n	8009254 <_svfiprintf_r+0x1a8>
 800924c:	2b00      	cmp	r3, #0
 800924e:	d0c5      	beq.n	80091dc <_svfiprintf_r+0x130>
 8009250:	9105      	str	r1, [sp, #20]
 8009252:	e7c3      	b.n	80091dc <_svfiprintf_r+0x130>
 8009254:	4604      	mov	r4, r0
 8009256:	2301      	movs	r3, #1
 8009258:	fb0c 2101 	mla	r1, ip, r1, r2
 800925c:	e7f0      	b.n	8009240 <_svfiprintf_r+0x194>
 800925e:	ab03      	add	r3, sp, #12
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	462a      	mov	r2, r5
 8009264:	4638      	mov	r0, r7
 8009266:	4b0f      	ldr	r3, [pc, #60]	; (80092a4 <_svfiprintf_r+0x1f8>)
 8009268:	a904      	add	r1, sp, #16
 800926a:	f3af 8000 	nop.w
 800926e:	1c42      	adds	r2, r0, #1
 8009270:	4606      	mov	r6, r0
 8009272:	d1d6      	bne.n	8009222 <_svfiprintf_r+0x176>
 8009274:	89ab      	ldrh	r3, [r5, #12]
 8009276:	065b      	lsls	r3, r3, #25
 8009278:	f53f af2c 	bmi.w	80090d4 <_svfiprintf_r+0x28>
 800927c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800927e:	b01d      	add	sp, #116	; 0x74
 8009280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009284:	ab03      	add	r3, sp, #12
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	462a      	mov	r2, r5
 800928a:	4638      	mov	r0, r7
 800928c:	4b05      	ldr	r3, [pc, #20]	; (80092a4 <_svfiprintf_r+0x1f8>)
 800928e:	a904      	add	r1, sp, #16
 8009290:	f000 f9d4 	bl	800963c <_printf_i>
 8009294:	e7eb      	b.n	800926e <_svfiprintf_r+0x1c2>
 8009296:	bf00      	nop
 8009298:	0800a220 	.word	0x0800a220
 800929c:	0800a22a 	.word	0x0800a22a
 80092a0:	00000000 	.word	0x00000000
 80092a4:	08008ff5 	.word	0x08008ff5
 80092a8:	0800a226 	.word	0x0800a226

080092ac <__sfputc_r>:
 80092ac:	6893      	ldr	r3, [r2, #8]
 80092ae:	b410      	push	{r4}
 80092b0:	3b01      	subs	r3, #1
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	6093      	str	r3, [r2, #8]
 80092b6:	da07      	bge.n	80092c8 <__sfputc_r+0x1c>
 80092b8:	6994      	ldr	r4, [r2, #24]
 80092ba:	42a3      	cmp	r3, r4
 80092bc:	db01      	blt.n	80092c2 <__sfputc_r+0x16>
 80092be:	290a      	cmp	r1, #10
 80092c0:	d102      	bne.n	80092c8 <__sfputc_r+0x1c>
 80092c2:	bc10      	pop	{r4}
 80092c4:	f000 bb34 	b.w	8009930 <__swbuf_r>
 80092c8:	6813      	ldr	r3, [r2, #0]
 80092ca:	1c58      	adds	r0, r3, #1
 80092cc:	6010      	str	r0, [r2, #0]
 80092ce:	7019      	strb	r1, [r3, #0]
 80092d0:	4608      	mov	r0, r1
 80092d2:	bc10      	pop	{r4}
 80092d4:	4770      	bx	lr

080092d6 <__sfputs_r>:
 80092d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d8:	4606      	mov	r6, r0
 80092da:	460f      	mov	r7, r1
 80092dc:	4614      	mov	r4, r2
 80092de:	18d5      	adds	r5, r2, r3
 80092e0:	42ac      	cmp	r4, r5
 80092e2:	d101      	bne.n	80092e8 <__sfputs_r+0x12>
 80092e4:	2000      	movs	r0, #0
 80092e6:	e007      	b.n	80092f8 <__sfputs_r+0x22>
 80092e8:	463a      	mov	r2, r7
 80092ea:	4630      	mov	r0, r6
 80092ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092f0:	f7ff ffdc 	bl	80092ac <__sfputc_r>
 80092f4:	1c43      	adds	r3, r0, #1
 80092f6:	d1f3      	bne.n	80092e0 <__sfputs_r+0xa>
 80092f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092fc <_vfiprintf_r>:
 80092fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009300:	460d      	mov	r5, r1
 8009302:	4614      	mov	r4, r2
 8009304:	4698      	mov	r8, r3
 8009306:	4606      	mov	r6, r0
 8009308:	b09d      	sub	sp, #116	; 0x74
 800930a:	b118      	cbz	r0, 8009314 <_vfiprintf_r+0x18>
 800930c:	6983      	ldr	r3, [r0, #24]
 800930e:	b90b      	cbnz	r3, 8009314 <_vfiprintf_r+0x18>
 8009310:	f7ff fd76 	bl	8008e00 <__sinit>
 8009314:	4b89      	ldr	r3, [pc, #548]	; (800953c <_vfiprintf_r+0x240>)
 8009316:	429d      	cmp	r5, r3
 8009318:	d11b      	bne.n	8009352 <_vfiprintf_r+0x56>
 800931a:	6875      	ldr	r5, [r6, #4]
 800931c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800931e:	07d9      	lsls	r1, r3, #31
 8009320:	d405      	bmi.n	800932e <_vfiprintf_r+0x32>
 8009322:	89ab      	ldrh	r3, [r5, #12]
 8009324:	059a      	lsls	r2, r3, #22
 8009326:	d402      	bmi.n	800932e <_vfiprintf_r+0x32>
 8009328:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800932a:	f7ff fe07 	bl	8008f3c <__retarget_lock_acquire_recursive>
 800932e:	89ab      	ldrh	r3, [r5, #12]
 8009330:	071b      	lsls	r3, r3, #28
 8009332:	d501      	bpl.n	8009338 <_vfiprintf_r+0x3c>
 8009334:	692b      	ldr	r3, [r5, #16]
 8009336:	b9eb      	cbnz	r3, 8009374 <_vfiprintf_r+0x78>
 8009338:	4629      	mov	r1, r5
 800933a:	4630      	mov	r0, r6
 800933c:	f000 fb5c 	bl	80099f8 <__swsetup_r>
 8009340:	b1c0      	cbz	r0, 8009374 <_vfiprintf_r+0x78>
 8009342:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009344:	07dc      	lsls	r4, r3, #31
 8009346:	d50e      	bpl.n	8009366 <_vfiprintf_r+0x6a>
 8009348:	f04f 30ff 	mov.w	r0, #4294967295
 800934c:	b01d      	add	sp, #116	; 0x74
 800934e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009352:	4b7b      	ldr	r3, [pc, #492]	; (8009540 <_vfiprintf_r+0x244>)
 8009354:	429d      	cmp	r5, r3
 8009356:	d101      	bne.n	800935c <_vfiprintf_r+0x60>
 8009358:	68b5      	ldr	r5, [r6, #8]
 800935a:	e7df      	b.n	800931c <_vfiprintf_r+0x20>
 800935c:	4b79      	ldr	r3, [pc, #484]	; (8009544 <_vfiprintf_r+0x248>)
 800935e:	429d      	cmp	r5, r3
 8009360:	bf08      	it	eq
 8009362:	68f5      	ldreq	r5, [r6, #12]
 8009364:	e7da      	b.n	800931c <_vfiprintf_r+0x20>
 8009366:	89ab      	ldrh	r3, [r5, #12]
 8009368:	0598      	lsls	r0, r3, #22
 800936a:	d4ed      	bmi.n	8009348 <_vfiprintf_r+0x4c>
 800936c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800936e:	f7ff fde6 	bl	8008f3e <__retarget_lock_release_recursive>
 8009372:	e7e9      	b.n	8009348 <_vfiprintf_r+0x4c>
 8009374:	2300      	movs	r3, #0
 8009376:	9309      	str	r3, [sp, #36]	; 0x24
 8009378:	2320      	movs	r3, #32
 800937a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800937e:	2330      	movs	r3, #48	; 0x30
 8009380:	f04f 0901 	mov.w	r9, #1
 8009384:	f8cd 800c 	str.w	r8, [sp, #12]
 8009388:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009548 <_vfiprintf_r+0x24c>
 800938c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009390:	4623      	mov	r3, r4
 8009392:	469a      	mov	sl, r3
 8009394:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009398:	b10a      	cbz	r2, 800939e <_vfiprintf_r+0xa2>
 800939a:	2a25      	cmp	r2, #37	; 0x25
 800939c:	d1f9      	bne.n	8009392 <_vfiprintf_r+0x96>
 800939e:	ebba 0b04 	subs.w	fp, sl, r4
 80093a2:	d00b      	beq.n	80093bc <_vfiprintf_r+0xc0>
 80093a4:	465b      	mov	r3, fp
 80093a6:	4622      	mov	r2, r4
 80093a8:	4629      	mov	r1, r5
 80093aa:	4630      	mov	r0, r6
 80093ac:	f7ff ff93 	bl	80092d6 <__sfputs_r>
 80093b0:	3001      	adds	r0, #1
 80093b2:	f000 80aa 	beq.w	800950a <_vfiprintf_r+0x20e>
 80093b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093b8:	445a      	add	r2, fp
 80093ba:	9209      	str	r2, [sp, #36]	; 0x24
 80093bc:	f89a 3000 	ldrb.w	r3, [sl]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 80a2 	beq.w	800950a <_vfiprintf_r+0x20e>
 80093c6:	2300      	movs	r3, #0
 80093c8:	f04f 32ff 	mov.w	r2, #4294967295
 80093cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093d0:	f10a 0a01 	add.w	sl, sl, #1
 80093d4:	9304      	str	r3, [sp, #16]
 80093d6:	9307      	str	r3, [sp, #28]
 80093d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093dc:	931a      	str	r3, [sp, #104]	; 0x68
 80093de:	4654      	mov	r4, sl
 80093e0:	2205      	movs	r2, #5
 80093e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093e6:	4858      	ldr	r0, [pc, #352]	; (8009548 <_vfiprintf_r+0x24c>)
 80093e8:	f000 fcbc 	bl	8009d64 <memchr>
 80093ec:	9a04      	ldr	r2, [sp, #16]
 80093ee:	b9d8      	cbnz	r0, 8009428 <_vfiprintf_r+0x12c>
 80093f0:	06d1      	lsls	r1, r2, #27
 80093f2:	bf44      	itt	mi
 80093f4:	2320      	movmi	r3, #32
 80093f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093fa:	0713      	lsls	r3, r2, #28
 80093fc:	bf44      	itt	mi
 80093fe:	232b      	movmi	r3, #43	; 0x2b
 8009400:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009404:	f89a 3000 	ldrb.w	r3, [sl]
 8009408:	2b2a      	cmp	r3, #42	; 0x2a
 800940a:	d015      	beq.n	8009438 <_vfiprintf_r+0x13c>
 800940c:	4654      	mov	r4, sl
 800940e:	2000      	movs	r0, #0
 8009410:	f04f 0c0a 	mov.w	ip, #10
 8009414:	9a07      	ldr	r2, [sp, #28]
 8009416:	4621      	mov	r1, r4
 8009418:	f811 3b01 	ldrb.w	r3, [r1], #1
 800941c:	3b30      	subs	r3, #48	; 0x30
 800941e:	2b09      	cmp	r3, #9
 8009420:	d94e      	bls.n	80094c0 <_vfiprintf_r+0x1c4>
 8009422:	b1b0      	cbz	r0, 8009452 <_vfiprintf_r+0x156>
 8009424:	9207      	str	r2, [sp, #28]
 8009426:	e014      	b.n	8009452 <_vfiprintf_r+0x156>
 8009428:	eba0 0308 	sub.w	r3, r0, r8
 800942c:	fa09 f303 	lsl.w	r3, r9, r3
 8009430:	4313      	orrs	r3, r2
 8009432:	46a2      	mov	sl, r4
 8009434:	9304      	str	r3, [sp, #16]
 8009436:	e7d2      	b.n	80093de <_vfiprintf_r+0xe2>
 8009438:	9b03      	ldr	r3, [sp, #12]
 800943a:	1d19      	adds	r1, r3, #4
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	9103      	str	r1, [sp, #12]
 8009440:	2b00      	cmp	r3, #0
 8009442:	bfbb      	ittet	lt
 8009444:	425b      	neglt	r3, r3
 8009446:	f042 0202 	orrlt.w	r2, r2, #2
 800944a:	9307      	strge	r3, [sp, #28]
 800944c:	9307      	strlt	r3, [sp, #28]
 800944e:	bfb8      	it	lt
 8009450:	9204      	strlt	r2, [sp, #16]
 8009452:	7823      	ldrb	r3, [r4, #0]
 8009454:	2b2e      	cmp	r3, #46	; 0x2e
 8009456:	d10c      	bne.n	8009472 <_vfiprintf_r+0x176>
 8009458:	7863      	ldrb	r3, [r4, #1]
 800945a:	2b2a      	cmp	r3, #42	; 0x2a
 800945c:	d135      	bne.n	80094ca <_vfiprintf_r+0x1ce>
 800945e:	9b03      	ldr	r3, [sp, #12]
 8009460:	3402      	adds	r4, #2
 8009462:	1d1a      	adds	r2, r3, #4
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	9203      	str	r2, [sp, #12]
 8009468:	2b00      	cmp	r3, #0
 800946a:	bfb8      	it	lt
 800946c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009470:	9305      	str	r3, [sp, #20]
 8009472:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009558 <_vfiprintf_r+0x25c>
 8009476:	2203      	movs	r2, #3
 8009478:	4650      	mov	r0, sl
 800947a:	7821      	ldrb	r1, [r4, #0]
 800947c:	f000 fc72 	bl	8009d64 <memchr>
 8009480:	b140      	cbz	r0, 8009494 <_vfiprintf_r+0x198>
 8009482:	2340      	movs	r3, #64	; 0x40
 8009484:	eba0 000a 	sub.w	r0, r0, sl
 8009488:	fa03 f000 	lsl.w	r0, r3, r0
 800948c:	9b04      	ldr	r3, [sp, #16]
 800948e:	3401      	adds	r4, #1
 8009490:	4303      	orrs	r3, r0
 8009492:	9304      	str	r3, [sp, #16]
 8009494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009498:	2206      	movs	r2, #6
 800949a:	482c      	ldr	r0, [pc, #176]	; (800954c <_vfiprintf_r+0x250>)
 800949c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094a0:	f000 fc60 	bl	8009d64 <memchr>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	d03f      	beq.n	8009528 <_vfiprintf_r+0x22c>
 80094a8:	4b29      	ldr	r3, [pc, #164]	; (8009550 <_vfiprintf_r+0x254>)
 80094aa:	bb1b      	cbnz	r3, 80094f4 <_vfiprintf_r+0x1f8>
 80094ac:	9b03      	ldr	r3, [sp, #12]
 80094ae:	3307      	adds	r3, #7
 80094b0:	f023 0307 	bic.w	r3, r3, #7
 80094b4:	3308      	adds	r3, #8
 80094b6:	9303      	str	r3, [sp, #12]
 80094b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ba:	443b      	add	r3, r7
 80094bc:	9309      	str	r3, [sp, #36]	; 0x24
 80094be:	e767      	b.n	8009390 <_vfiprintf_r+0x94>
 80094c0:	460c      	mov	r4, r1
 80094c2:	2001      	movs	r0, #1
 80094c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80094c8:	e7a5      	b.n	8009416 <_vfiprintf_r+0x11a>
 80094ca:	2300      	movs	r3, #0
 80094cc:	f04f 0c0a 	mov.w	ip, #10
 80094d0:	4619      	mov	r1, r3
 80094d2:	3401      	adds	r4, #1
 80094d4:	9305      	str	r3, [sp, #20]
 80094d6:	4620      	mov	r0, r4
 80094d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094dc:	3a30      	subs	r2, #48	; 0x30
 80094de:	2a09      	cmp	r2, #9
 80094e0:	d903      	bls.n	80094ea <_vfiprintf_r+0x1ee>
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d0c5      	beq.n	8009472 <_vfiprintf_r+0x176>
 80094e6:	9105      	str	r1, [sp, #20]
 80094e8:	e7c3      	b.n	8009472 <_vfiprintf_r+0x176>
 80094ea:	4604      	mov	r4, r0
 80094ec:	2301      	movs	r3, #1
 80094ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80094f2:	e7f0      	b.n	80094d6 <_vfiprintf_r+0x1da>
 80094f4:	ab03      	add	r3, sp, #12
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	462a      	mov	r2, r5
 80094fa:	4630      	mov	r0, r6
 80094fc:	4b15      	ldr	r3, [pc, #84]	; (8009554 <_vfiprintf_r+0x258>)
 80094fe:	a904      	add	r1, sp, #16
 8009500:	f3af 8000 	nop.w
 8009504:	4607      	mov	r7, r0
 8009506:	1c78      	adds	r0, r7, #1
 8009508:	d1d6      	bne.n	80094b8 <_vfiprintf_r+0x1bc>
 800950a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800950c:	07d9      	lsls	r1, r3, #31
 800950e:	d405      	bmi.n	800951c <_vfiprintf_r+0x220>
 8009510:	89ab      	ldrh	r3, [r5, #12]
 8009512:	059a      	lsls	r2, r3, #22
 8009514:	d402      	bmi.n	800951c <_vfiprintf_r+0x220>
 8009516:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009518:	f7ff fd11 	bl	8008f3e <__retarget_lock_release_recursive>
 800951c:	89ab      	ldrh	r3, [r5, #12]
 800951e:	065b      	lsls	r3, r3, #25
 8009520:	f53f af12 	bmi.w	8009348 <_vfiprintf_r+0x4c>
 8009524:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009526:	e711      	b.n	800934c <_vfiprintf_r+0x50>
 8009528:	ab03      	add	r3, sp, #12
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	462a      	mov	r2, r5
 800952e:	4630      	mov	r0, r6
 8009530:	4b08      	ldr	r3, [pc, #32]	; (8009554 <_vfiprintf_r+0x258>)
 8009532:	a904      	add	r1, sp, #16
 8009534:	f000 f882 	bl	800963c <_printf_i>
 8009538:	e7e4      	b.n	8009504 <_vfiprintf_r+0x208>
 800953a:	bf00      	nop
 800953c:	0800a1e0 	.word	0x0800a1e0
 8009540:	0800a200 	.word	0x0800a200
 8009544:	0800a1c0 	.word	0x0800a1c0
 8009548:	0800a220 	.word	0x0800a220
 800954c:	0800a22a 	.word	0x0800a22a
 8009550:	00000000 	.word	0x00000000
 8009554:	080092d7 	.word	0x080092d7
 8009558:	0800a226 	.word	0x0800a226

0800955c <_printf_common>:
 800955c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009560:	4616      	mov	r6, r2
 8009562:	4699      	mov	r9, r3
 8009564:	688a      	ldr	r2, [r1, #8]
 8009566:	690b      	ldr	r3, [r1, #16]
 8009568:	4607      	mov	r7, r0
 800956a:	4293      	cmp	r3, r2
 800956c:	bfb8      	it	lt
 800956e:	4613      	movlt	r3, r2
 8009570:	6033      	str	r3, [r6, #0]
 8009572:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009576:	460c      	mov	r4, r1
 8009578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800957c:	b10a      	cbz	r2, 8009582 <_printf_common+0x26>
 800957e:	3301      	adds	r3, #1
 8009580:	6033      	str	r3, [r6, #0]
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	0699      	lsls	r1, r3, #26
 8009586:	bf42      	ittt	mi
 8009588:	6833      	ldrmi	r3, [r6, #0]
 800958a:	3302      	addmi	r3, #2
 800958c:	6033      	strmi	r3, [r6, #0]
 800958e:	6825      	ldr	r5, [r4, #0]
 8009590:	f015 0506 	ands.w	r5, r5, #6
 8009594:	d106      	bne.n	80095a4 <_printf_common+0x48>
 8009596:	f104 0a19 	add.w	sl, r4, #25
 800959a:	68e3      	ldr	r3, [r4, #12]
 800959c:	6832      	ldr	r2, [r6, #0]
 800959e:	1a9b      	subs	r3, r3, r2
 80095a0:	42ab      	cmp	r3, r5
 80095a2:	dc28      	bgt.n	80095f6 <_printf_common+0x9a>
 80095a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095a8:	1e13      	subs	r3, r2, #0
 80095aa:	6822      	ldr	r2, [r4, #0]
 80095ac:	bf18      	it	ne
 80095ae:	2301      	movne	r3, #1
 80095b0:	0692      	lsls	r2, r2, #26
 80095b2:	d42d      	bmi.n	8009610 <_printf_common+0xb4>
 80095b4:	4649      	mov	r1, r9
 80095b6:	4638      	mov	r0, r7
 80095b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095bc:	47c0      	blx	r8
 80095be:	3001      	adds	r0, #1
 80095c0:	d020      	beq.n	8009604 <_printf_common+0xa8>
 80095c2:	6823      	ldr	r3, [r4, #0]
 80095c4:	68e5      	ldr	r5, [r4, #12]
 80095c6:	f003 0306 	and.w	r3, r3, #6
 80095ca:	2b04      	cmp	r3, #4
 80095cc:	bf18      	it	ne
 80095ce:	2500      	movne	r5, #0
 80095d0:	6832      	ldr	r2, [r6, #0]
 80095d2:	f04f 0600 	mov.w	r6, #0
 80095d6:	68a3      	ldr	r3, [r4, #8]
 80095d8:	bf08      	it	eq
 80095da:	1aad      	subeq	r5, r5, r2
 80095dc:	6922      	ldr	r2, [r4, #16]
 80095de:	bf08      	it	eq
 80095e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095e4:	4293      	cmp	r3, r2
 80095e6:	bfc4      	itt	gt
 80095e8:	1a9b      	subgt	r3, r3, r2
 80095ea:	18ed      	addgt	r5, r5, r3
 80095ec:	341a      	adds	r4, #26
 80095ee:	42b5      	cmp	r5, r6
 80095f0:	d11a      	bne.n	8009628 <_printf_common+0xcc>
 80095f2:	2000      	movs	r0, #0
 80095f4:	e008      	b.n	8009608 <_printf_common+0xac>
 80095f6:	2301      	movs	r3, #1
 80095f8:	4652      	mov	r2, sl
 80095fa:	4649      	mov	r1, r9
 80095fc:	4638      	mov	r0, r7
 80095fe:	47c0      	blx	r8
 8009600:	3001      	adds	r0, #1
 8009602:	d103      	bne.n	800960c <_printf_common+0xb0>
 8009604:	f04f 30ff 	mov.w	r0, #4294967295
 8009608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800960c:	3501      	adds	r5, #1
 800960e:	e7c4      	b.n	800959a <_printf_common+0x3e>
 8009610:	2030      	movs	r0, #48	; 0x30
 8009612:	18e1      	adds	r1, r4, r3
 8009614:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009618:	1c5a      	adds	r2, r3, #1
 800961a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800961e:	4422      	add	r2, r4
 8009620:	3302      	adds	r3, #2
 8009622:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009626:	e7c5      	b.n	80095b4 <_printf_common+0x58>
 8009628:	2301      	movs	r3, #1
 800962a:	4622      	mov	r2, r4
 800962c:	4649      	mov	r1, r9
 800962e:	4638      	mov	r0, r7
 8009630:	47c0      	blx	r8
 8009632:	3001      	adds	r0, #1
 8009634:	d0e6      	beq.n	8009604 <_printf_common+0xa8>
 8009636:	3601      	adds	r6, #1
 8009638:	e7d9      	b.n	80095ee <_printf_common+0x92>
	...

0800963c <_printf_i>:
 800963c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009640:	460c      	mov	r4, r1
 8009642:	7e27      	ldrb	r7, [r4, #24]
 8009644:	4691      	mov	r9, r2
 8009646:	2f78      	cmp	r7, #120	; 0x78
 8009648:	4680      	mov	r8, r0
 800964a:	469a      	mov	sl, r3
 800964c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800964e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009652:	d807      	bhi.n	8009664 <_printf_i+0x28>
 8009654:	2f62      	cmp	r7, #98	; 0x62
 8009656:	d80a      	bhi.n	800966e <_printf_i+0x32>
 8009658:	2f00      	cmp	r7, #0
 800965a:	f000 80d9 	beq.w	8009810 <_printf_i+0x1d4>
 800965e:	2f58      	cmp	r7, #88	; 0x58
 8009660:	f000 80a4 	beq.w	80097ac <_printf_i+0x170>
 8009664:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800966c:	e03a      	b.n	80096e4 <_printf_i+0xa8>
 800966e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009672:	2b15      	cmp	r3, #21
 8009674:	d8f6      	bhi.n	8009664 <_printf_i+0x28>
 8009676:	a001      	add	r0, pc, #4	; (adr r0, 800967c <_printf_i+0x40>)
 8009678:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800967c:	080096d5 	.word	0x080096d5
 8009680:	080096e9 	.word	0x080096e9
 8009684:	08009665 	.word	0x08009665
 8009688:	08009665 	.word	0x08009665
 800968c:	08009665 	.word	0x08009665
 8009690:	08009665 	.word	0x08009665
 8009694:	080096e9 	.word	0x080096e9
 8009698:	08009665 	.word	0x08009665
 800969c:	08009665 	.word	0x08009665
 80096a0:	08009665 	.word	0x08009665
 80096a4:	08009665 	.word	0x08009665
 80096a8:	080097f7 	.word	0x080097f7
 80096ac:	08009719 	.word	0x08009719
 80096b0:	080097d9 	.word	0x080097d9
 80096b4:	08009665 	.word	0x08009665
 80096b8:	08009665 	.word	0x08009665
 80096bc:	08009819 	.word	0x08009819
 80096c0:	08009665 	.word	0x08009665
 80096c4:	08009719 	.word	0x08009719
 80096c8:	08009665 	.word	0x08009665
 80096cc:	08009665 	.word	0x08009665
 80096d0:	080097e1 	.word	0x080097e1
 80096d4:	680b      	ldr	r3, [r1, #0]
 80096d6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80096da:	1d1a      	adds	r2, r3, #4
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	600a      	str	r2, [r1, #0]
 80096e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096e4:	2301      	movs	r3, #1
 80096e6:	e0a4      	b.n	8009832 <_printf_i+0x1f6>
 80096e8:	6825      	ldr	r5, [r4, #0]
 80096ea:	6808      	ldr	r0, [r1, #0]
 80096ec:	062e      	lsls	r6, r5, #24
 80096ee:	f100 0304 	add.w	r3, r0, #4
 80096f2:	d50a      	bpl.n	800970a <_printf_i+0xce>
 80096f4:	6805      	ldr	r5, [r0, #0]
 80096f6:	600b      	str	r3, [r1, #0]
 80096f8:	2d00      	cmp	r5, #0
 80096fa:	da03      	bge.n	8009704 <_printf_i+0xc8>
 80096fc:	232d      	movs	r3, #45	; 0x2d
 80096fe:	426d      	negs	r5, r5
 8009700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009704:	230a      	movs	r3, #10
 8009706:	485e      	ldr	r0, [pc, #376]	; (8009880 <_printf_i+0x244>)
 8009708:	e019      	b.n	800973e <_printf_i+0x102>
 800970a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800970e:	6805      	ldr	r5, [r0, #0]
 8009710:	600b      	str	r3, [r1, #0]
 8009712:	bf18      	it	ne
 8009714:	b22d      	sxthne	r5, r5
 8009716:	e7ef      	b.n	80096f8 <_printf_i+0xbc>
 8009718:	680b      	ldr	r3, [r1, #0]
 800971a:	6825      	ldr	r5, [r4, #0]
 800971c:	1d18      	adds	r0, r3, #4
 800971e:	6008      	str	r0, [r1, #0]
 8009720:	0628      	lsls	r0, r5, #24
 8009722:	d501      	bpl.n	8009728 <_printf_i+0xec>
 8009724:	681d      	ldr	r5, [r3, #0]
 8009726:	e002      	b.n	800972e <_printf_i+0xf2>
 8009728:	0669      	lsls	r1, r5, #25
 800972a:	d5fb      	bpl.n	8009724 <_printf_i+0xe8>
 800972c:	881d      	ldrh	r5, [r3, #0]
 800972e:	2f6f      	cmp	r7, #111	; 0x6f
 8009730:	bf0c      	ite	eq
 8009732:	2308      	moveq	r3, #8
 8009734:	230a      	movne	r3, #10
 8009736:	4852      	ldr	r0, [pc, #328]	; (8009880 <_printf_i+0x244>)
 8009738:	2100      	movs	r1, #0
 800973a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800973e:	6866      	ldr	r6, [r4, #4]
 8009740:	2e00      	cmp	r6, #0
 8009742:	bfa8      	it	ge
 8009744:	6821      	ldrge	r1, [r4, #0]
 8009746:	60a6      	str	r6, [r4, #8]
 8009748:	bfa4      	itt	ge
 800974a:	f021 0104 	bicge.w	r1, r1, #4
 800974e:	6021      	strge	r1, [r4, #0]
 8009750:	b90d      	cbnz	r5, 8009756 <_printf_i+0x11a>
 8009752:	2e00      	cmp	r6, #0
 8009754:	d04d      	beq.n	80097f2 <_printf_i+0x1b6>
 8009756:	4616      	mov	r6, r2
 8009758:	fbb5 f1f3 	udiv	r1, r5, r3
 800975c:	fb03 5711 	mls	r7, r3, r1, r5
 8009760:	5dc7      	ldrb	r7, [r0, r7]
 8009762:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009766:	462f      	mov	r7, r5
 8009768:	42bb      	cmp	r3, r7
 800976a:	460d      	mov	r5, r1
 800976c:	d9f4      	bls.n	8009758 <_printf_i+0x11c>
 800976e:	2b08      	cmp	r3, #8
 8009770:	d10b      	bne.n	800978a <_printf_i+0x14e>
 8009772:	6823      	ldr	r3, [r4, #0]
 8009774:	07df      	lsls	r7, r3, #31
 8009776:	d508      	bpl.n	800978a <_printf_i+0x14e>
 8009778:	6923      	ldr	r3, [r4, #16]
 800977a:	6861      	ldr	r1, [r4, #4]
 800977c:	4299      	cmp	r1, r3
 800977e:	bfde      	ittt	le
 8009780:	2330      	movle	r3, #48	; 0x30
 8009782:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009786:	f106 36ff 	addle.w	r6, r6, #4294967295
 800978a:	1b92      	subs	r2, r2, r6
 800978c:	6122      	str	r2, [r4, #16]
 800978e:	464b      	mov	r3, r9
 8009790:	4621      	mov	r1, r4
 8009792:	4640      	mov	r0, r8
 8009794:	f8cd a000 	str.w	sl, [sp]
 8009798:	aa03      	add	r2, sp, #12
 800979a:	f7ff fedf 	bl	800955c <_printf_common>
 800979e:	3001      	adds	r0, #1
 80097a0:	d14c      	bne.n	800983c <_printf_i+0x200>
 80097a2:	f04f 30ff 	mov.w	r0, #4294967295
 80097a6:	b004      	add	sp, #16
 80097a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ac:	4834      	ldr	r0, [pc, #208]	; (8009880 <_printf_i+0x244>)
 80097ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80097b2:	680e      	ldr	r6, [r1, #0]
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80097ba:	061f      	lsls	r7, r3, #24
 80097bc:	600e      	str	r6, [r1, #0]
 80097be:	d514      	bpl.n	80097ea <_printf_i+0x1ae>
 80097c0:	07d9      	lsls	r1, r3, #31
 80097c2:	bf44      	itt	mi
 80097c4:	f043 0320 	orrmi.w	r3, r3, #32
 80097c8:	6023      	strmi	r3, [r4, #0]
 80097ca:	b91d      	cbnz	r5, 80097d4 <_printf_i+0x198>
 80097cc:	6823      	ldr	r3, [r4, #0]
 80097ce:	f023 0320 	bic.w	r3, r3, #32
 80097d2:	6023      	str	r3, [r4, #0]
 80097d4:	2310      	movs	r3, #16
 80097d6:	e7af      	b.n	8009738 <_printf_i+0xfc>
 80097d8:	6823      	ldr	r3, [r4, #0]
 80097da:	f043 0320 	orr.w	r3, r3, #32
 80097de:	6023      	str	r3, [r4, #0]
 80097e0:	2378      	movs	r3, #120	; 0x78
 80097e2:	4828      	ldr	r0, [pc, #160]	; (8009884 <_printf_i+0x248>)
 80097e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097e8:	e7e3      	b.n	80097b2 <_printf_i+0x176>
 80097ea:	065e      	lsls	r6, r3, #25
 80097ec:	bf48      	it	mi
 80097ee:	b2ad      	uxthmi	r5, r5
 80097f0:	e7e6      	b.n	80097c0 <_printf_i+0x184>
 80097f2:	4616      	mov	r6, r2
 80097f4:	e7bb      	b.n	800976e <_printf_i+0x132>
 80097f6:	680b      	ldr	r3, [r1, #0]
 80097f8:	6826      	ldr	r6, [r4, #0]
 80097fa:	1d1d      	adds	r5, r3, #4
 80097fc:	6960      	ldr	r0, [r4, #20]
 80097fe:	600d      	str	r5, [r1, #0]
 8009800:	0635      	lsls	r5, r6, #24
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	d501      	bpl.n	800980a <_printf_i+0x1ce>
 8009806:	6018      	str	r0, [r3, #0]
 8009808:	e002      	b.n	8009810 <_printf_i+0x1d4>
 800980a:	0671      	lsls	r1, r6, #25
 800980c:	d5fb      	bpl.n	8009806 <_printf_i+0x1ca>
 800980e:	8018      	strh	r0, [r3, #0]
 8009810:	2300      	movs	r3, #0
 8009812:	4616      	mov	r6, r2
 8009814:	6123      	str	r3, [r4, #16]
 8009816:	e7ba      	b.n	800978e <_printf_i+0x152>
 8009818:	680b      	ldr	r3, [r1, #0]
 800981a:	1d1a      	adds	r2, r3, #4
 800981c:	600a      	str	r2, [r1, #0]
 800981e:	681e      	ldr	r6, [r3, #0]
 8009820:	2100      	movs	r1, #0
 8009822:	4630      	mov	r0, r6
 8009824:	6862      	ldr	r2, [r4, #4]
 8009826:	f000 fa9d 	bl	8009d64 <memchr>
 800982a:	b108      	cbz	r0, 8009830 <_printf_i+0x1f4>
 800982c:	1b80      	subs	r0, r0, r6
 800982e:	6060      	str	r0, [r4, #4]
 8009830:	6863      	ldr	r3, [r4, #4]
 8009832:	6123      	str	r3, [r4, #16]
 8009834:	2300      	movs	r3, #0
 8009836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800983a:	e7a8      	b.n	800978e <_printf_i+0x152>
 800983c:	4632      	mov	r2, r6
 800983e:	4649      	mov	r1, r9
 8009840:	4640      	mov	r0, r8
 8009842:	6923      	ldr	r3, [r4, #16]
 8009844:	47d0      	blx	sl
 8009846:	3001      	adds	r0, #1
 8009848:	d0ab      	beq.n	80097a2 <_printf_i+0x166>
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	079b      	lsls	r3, r3, #30
 800984e:	d413      	bmi.n	8009878 <_printf_i+0x23c>
 8009850:	68e0      	ldr	r0, [r4, #12]
 8009852:	9b03      	ldr	r3, [sp, #12]
 8009854:	4298      	cmp	r0, r3
 8009856:	bfb8      	it	lt
 8009858:	4618      	movlt	r0, r3
 800985a:	e7a4      	b.n	80097a6 <_printf_i+0x16a>
 800985c:	2301      	movs	r3, #1
 800985e:	4632      	mov	r2, r6
 8009860:	4649      	mov	r1, r9
 8009862:	4640      	mov	r0, r8
 8009864:	47d0      	blx	sl
 8009866:	3001      	adds	r0, #1
 8009868:	d09b      	beq.n	80097a2 <_printf_i+0x166>
 800986a:	3501      	adds	r5, #1
 800986c:	68e3      	ldr	r3, [r4, #12]
 800986e:	9903      	ldr	r1, [sp, #12]
 8009870:	1a5b      	subs	r3, r3, r1
 8009872:	42ab      	cmp	r3, r5
 8009874:	dcf2      	bgt.n	800985c <_printf_i+0x220>
 8009876:	e7eb      	b.n	8009850 <_printf_i+0x214>
 8009878:	2500      	movs	r5, #0
 800987a:	f104 0619 	add.w	r6, r4, #25
 800987e:	e7f5      	b.n	800986c <_printf_i+0x230>
 8009880:	0800a231 	.word	0x0800a231
 8009884:	0800a242 	.word	0x0800a242

08009888 <_sbrk_r>:
 8009888:	b538      	push	{r3, r4, r5, lr}
 800988a:	2300      	movs	r3, #0
 800988c:	4d05      	ldr	r5, [pc, #20]	; (80098a4 <_sbrk_r+0x1c>)
 800988e:	4604      	mov	r4, r0
 8009890:	4608      	mov	r0, r1
 8009892:	602b      	str	r3, [r5, #0]
 8009894:	f7f7 fa98 	bl	8000dc8 <_sbrk>
 8009898:	1c43      	adds	r3, r0, #1
 800989a:	d102      	bne.n	80098a2 <_sbrk_r+0x1a>
 800989c:	682b      	ldr	r3, [r5, #0]
 800989e:	b103      	cbz	r3, 80098a2 <_sbrk_r+0x1a>
 80098a0:	6023      	str	r3, [r4, #0]
 80098a2:	bd38      	pop	{r3, r4, r5, pc}
 80098a4:	20001520 	.word	0x20001520

080098a8 <__sread>:
 80098a8:	b510      	push	{r4, lr}
 80098aa:	460c      	mov	r4, r1
 80098ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b0:	f000 fafe 	bl	8009eb0 <_read_r>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	bfab      	itete	ge
 80098b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098ba:	89a3      	ldrhlt	r3, [r4, #12]
 80098bc:	181b      	addge	r3, r3, r0
 80098be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098c2:	bfac      	ite	ge
 80098c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80098c6:	81a3      	strhlt	r3, [r4, #12]
 80098c8:	bd10      	pop	{r4, pc}

080098ca <__swrite>:
 80098ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ce:	461f      	mov	r7, r3
 80098d0:	898b      	ldrh	r3, [r1, #12]
 80098d2:	4605      	mov	r5, r0
 80098d4:	05db      	lsls	r3, r3, #23
 80098d6:	460c      	mov	r4, r1
 80098d8:	4616      	mov	r6, r2
 80098da:	d505      	bpl.n	80098e8 <__swrite+0x1e>
 80098dc:	2302      	movs	r3, #2
 80098de:	2200      	movs	r2, #0
 80098e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e4:	f000 f9c8 	bl	8009c78 <_lseek_r>
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	4632      	mov	r2, r6
 80098ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098f0:	81a3      	strh	r3, [r4, #12]
 80098f2:	4628      	mov	r0, r5
 80098f4:	463b      	mov	r3, r7
 80098f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098fe:	f000 b869 	b.w	80099d4 <_write_r>

08009902 <__sseek>:
 8009902:	b510      	push	{r4, lr}
 8009904:	460c      	mov	r4, r1
 8009906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800990a:	f000 f9b5 	bl	8009c78 <_lseek_r>
 800990e:	1c43      	adds	r3, r0, #1
 8009910:	89a3      	ldrh	r3, [r4, #12]
 8009912:	bf15      	itete	ne
 8009914:	6560      	strne	r0, [r4, #84]	; 0x54
 8009916:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800991a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800991e:	81a3      	strheq	r3, [r4, #12]
 8009920:	bf18      	it	ne
 8009922:	81a3      	strhne	r3, [r4, #12]
 8009924:	bd10      	pop	{r4, pc}

08009926 <__sclose>:
 8009926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800992a:	f000 b8d3 	b.w	8009ad4 <_close_r>
	...

08009930 <__swbuf_r>:
 8009930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009932:	460e      	mov	r6, r1
 8009934:	4614      	mov	r4, r2
 8009936:	4605      	mov	r5, r0
 8009938:	b118      	cbz	r0, 8009942 <__swbuf_r+0x12>
 800993a:	6983      	ldr	r3, [r0, #24]
 800993c:	b90b      	cbnz	r3, 8009942 <__swbuf_r+0x12>
 800993e:	f7ff fa5f 	bl	8008e00 <__sinit>
 8009942:	4b21      	ldr	r3, [pc, #132]	; (80099c8 <__swbuf_r+0x98>)
 8009944:	429c      	cmp	r4, r3
 8009946:	d12b      	bne.n	80099a0 <__swbuf_r+0x70>
 8009948:	686c      	ldr	r4, [r5, #4]
 800994a:	69a3      	ldr	r3, [r4, #24]
 800994c:	60a3      	str	r3, [r4, #8]
 800994e:	89a3      	ldrh	r3, [r4, #12]
 8009950:	071a      	lsls	r2, r3, #28
 8009952:	d52f      	bpl.n	80099b4 <__swbuf_r+0x84>
 8009954:	6923      	ldr	r3, [r4, #16]
 8009956:	b36b      	cbz	r3, 80099b4 <__swbuf_r+0x84>
 8009958:	6923      	ldr	r3, [r4, #16]
 800995a:	6820      	ldr	r0, [r4, #0]
 800995c:	b2f6      	uxtb	r6, r6
 800995e:	1ac0      	subs	r0, r0, r3
 8009960:	6963      	ldr	r3, [r4, #20]
 8009962:	4637      	mov	r7, r6
 8009964:	4283      	cmp	r3, r0
 8009966:	dc04      	bgt.n	8009972 <__swbuf_r+0x42>
 8009968:	4621      	mov	r1, r4
 800996a:	4628      	mov	r0, r5
 800996c:	f000 f948 	bl	8009c00 <_fflush_r>
 8009970:	bb30      	cbnz	r0, 80099c0 <__swbuf_r+0x90>
 8009972:	68a3      	ldr	r3, [r4, #8]
 8009974:	3001      	adds	r0, #1
 8009976:	3b01      	subs	r3, #1
 8009978:	60a3      	str	r3, [r4, #8]
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	1c5a      	adds	r2, r3, #1
 800997e:	6022      	str	r2, [r4, #0]
 8009980:	701e      	strb	r6, [r3, #0]
 8009982:	6963      	ldr	r3, [r4, #20]
 8009984:	4283      	cmp	r3, r0
 8009986:	d004      	beq.n	8009992 <__swbuf_r+0x62>
 8009988:	89a3      	ldrh	r3, [r4, #12]
 800998a:	07db      	lsls	r3, r3, #31
 800998c:	d506      	bpl.n	800999c <__swbuf_r+0x6c>
 800998e:	2e0a      	cmp	r6, #10
 8009990:	d104      	bne.n	800999c <__swbuf_r+0x6c>
 8009992:	4621      	mov	r1, r4
 8009994:	4628      	mov	r0, r5
 8009996:	f000 f933 	bl	8009c00 <_fflush_r>
 800999a:	b988      	cbnz	r0, 80099c0 <__swbuf_r+0x90>
 800999c:	4638      	mov	r0, r7
 800999e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099a0:	4b0a      	ldr	r3, [pc, #40]	; (80099cc <__swbuf_r+0x9c>)
 80099a2:	429c      	cmp	r4, r3
 80099a4:	d101      	bne.n	80099aa <__swbuf_r+0x7a>
 80099a6:	68ac      	ldr	r4, [r5, #8]
 80099a8:	e7cf      	b.n	800994a <__swbuf_r+0x1a>
 80099aa:	4b09      	ldr	r3, [pc, #36]	; (80099d0 <__swbuf_r+0xa0>)
 80099ac:	429c      	cmp	r4, r3
 80099ae:	bf08      	it	eq
 80099b0:	68ec      	ldreq	r4, [r5, #12]
 80099b2:	e7ca      	b.n	800994a <__swbuf_r+0x1a>
 80099b4:	4621      	mov	r1, r4
 80099b6:	4628      	mov	r0, r5
 80099b8:	f000 f81e 	bl	80099f8 <__swsetup_r>
 80099bc:	2800      	cmp	r0, #0
 80099be:	d0cb      	beq.n	8009958 <__swbuf_r+0x28>
 80099c0:	f04f 37ff 	mov.w	r7, #4294967295
 80099c4:	e7ea      	b.n	800999c <__swbuf_r+0x6c>
 80099c6:	bf00      	nop
 80099c8:	0800a1e0 	.word	0x0800a1e0
 80099cc:	0800a200 	.word	0x0800a200
 80099d0:	0800a1c0 	.word	0x0800a1c0

080099d4 <_write_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4604      	mov	r4, r0
 80099d8:	4608      	mov	r0, r1
 80099da:	4611      	mov	r1, r2
 80099dc:	2200      	movs	r2, #0
 80099de:	4d05      	ldr	r5, [pc, #20]	; (80099f4 <_write_r+0x20>)
 80099e0:	602a      	str	r2, [r5, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	f7f7 f9a3 	bl	8000d2e <_write>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_write_r+0x1e>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_write_r+0x1e>
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	20001520 	.word	0x20001520

080099f8 <__swsetup_r>:
 80099f8:	4b32      	ldr	r3, [pc, #200]	; (8009ac4 <__swsetup_r+0xcc>)
 80099fa:	b570      	push	{r4, r5, r6, lr}
 80099fc:	681d      	ldr	r5, [r3, #0]
 80099fe:	4606      	mov	r6, r0
 8009a00:	460c      	mov	r4, r1
 8009a02:	b125      	cbz	r5, 8009a0e <__swsetup_r+0x16>
 8009a04:	69ab      	ldr	r3, [r5, #24]
 8009a06:	b913      	cbnz	r3, 8009a0e <__swsetup_r+0x16>
 8009a08:	4628      	mov	r0, r5
 8009a0a:	f7ff f9f9 	bl	8008e00 <__sinit>
 8009a0e:	4b2e      	ldr	r3, [pc, #184]	; (8009ac8 <__swsetup_r+0xd0>)
 8009a10:	429c      	cmp	r4, r3
 8009a12:	d10f      	bne.n	8009a34 <__swsetup_r+0x3c>
 8009a14:	686c      	ldr	r4, [r5, #4]
 8009a16:	89a3      	ldrh	r3, [r4, #12]
 8009a18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a1c:	0719      	lsls	r1, r3, #28
 8009a1e:	d42c      	bmi.n	8009a7a <__swsetup_r+0x82>
 8009a20:	06dd      	lsls	r5, r3, #27
 8009a22:	d411      	bmi.n	8009a48 <__swsetup_r+0x50>
 8009a24:	2309      	movs	r3, #9
 8009a26:	6033      	str	r3, [r6, #0]
 8009a28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a30:	81a3      	strh	r3, [r4, #12]
 8009a32:	e03e      	b.n	8009ab2 <__swsetup_r+0xba>
 8009a34:	4b25      	ldr	r3, [pc, #148]	; (8009acc <__swsetup_r+0xd4>)
 8009a36:	429c      	cmp	r4, r3
 8009a38:	d101      	bne.n	8009a3e <__swsetup_r+0x46>
 8009a3a:	68ac      	ldr	r4, [r5, #8]
 8009a3c:	e7eb      	b.n	8009a16 <__swsetup_r+0x1e>
 8009a3e:	4b24      	ldr	r3, [pc, #144]	; (8009ad0 <__swsetup_r+0xd8>)
 8009a40:	429c      	cmp	r4, r3
 8009a42:	bf08      	it	eq
 8009a44:	68ec      	ldreq	r4, [r5, #12]
 8009a46:	e7e6      	b.n	8009a16 <__swsetup_r+0x1e>
 8009a48:	0758      	lsls	r0, r3, #29
 8009a4a:	d512      	bpl.n	8009a72 <__swsetup_r+0x7a>
 8009a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a4e:	b141      	cbz	r1, 8009a62 <__swsetup_r+0x6a>
 8009a50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a54:	4299      	cmp	r1, r3
 8009a56:	d002      	beq.n	8009a5e <__swsetup_r+0x66>
 8009a58:	4630      	mov	r0, r6
 8009a5a:	f000 f9b7 	bl	8009dcc <_free_r>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	6363      	str	r3, [r4, #52]	; 0x34
 8009a62:	89a3      	ldrh	r3, [r4, #12]
 8009a64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a68:	81a3      	strh	r3, [r4, #12]
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	6063      	str	r3, [r4, #4]
 8009a6e:	6923      	ldr	r3, [r4, #16]
 8009a70:	6023      	str	r3, [r4, #0]
 8009a72:	89a3      	ldrh	r3, [r4, #12]
 8009a74:	f043 0308 	orr.w	r3, r3, #8
 8009a78:	81a3      	strh	r3, [r4, #12]
 8009a7a:	6923      	ldr	r3, [r4, #16]
 8009a7c:	b94b      	cbnz	r3, 8009a92 <__swsetup_r+0x9a>
 8009a7e:	89a3      	ldrh	r3, [r4, #12]
 8009a80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a88:	d003      	beq.n	8009a92 <__swsetup_r+0x9a>
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	f000 f929 	bl	8009ce4 <__smakebuf_r>
 8009a92:	89a0      	ldrh	r0, [r4, #12]
 8009a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a98:	f010 0301 	ands.w	r3, r0, #1
 8009a9c:	d00a      	beq.n	8009ab4 <__swsetup_r+0xbc>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	60a3      	str	r3, [r4, #8]
 8009aa2:	6963      	ldr	r3, [r4, #20]
 8009aa4:	425b      	negs	r3, r3
 8009aa6:	61a3      	str	r3, [r4, #24]
 8009aa8:	6923      	ldr	r3, [r4, #16]
 8009aaa:	b943      	cbnz	r3, 8009abe <__swsetup_r+0xc6>
 8009aac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ab0:	d1ba      	bne.n	8009a28 <__swsetup_r+0x30>
 8009ab2:	bd70      	pop	{r4, r5, r6, pc}
 8009ab4:	0781      	lsls	r1, r0, #30
 8009ab6:	bf58      	it	pl
 8009ab8:	6963      	ldrpl	r3, [r4, #20]
 8009aba:	60a3      	str	r3, [r4, #8]
 8009abc:	e7f4      	b.n	8009aa8 <__swsetup_r+0xb0>
 8009abe:	2000      	movs	r0, #0
 8009ac0:	e7f7      	b.n	8009ab2 <__swsetup_r+0xba>
 8009ac2:	bf00      	nop
 8009ac4:	20000048 	.word	0x20000048
 8009ac8:	0800a1e0 	.word	0x0800a1e0
 8009acc:	0800a200 	.word	0x0800a200
 8009ad0:	0800a1c0 	.word	0x0800a1c0

08009ad4 <_close_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	4d05      	ldr	r5, [pc, #20]	; (8009af0 <_close_r+0x1c>)
 8009ada:	4604      	mov	r4, r0
 8009adc:	4608      	mov	r0, r1
 8009ade:	602b      	str	r3, [r5, #0]
 8009ae0:	f7f7 f941 	bl	8000d66 <_close>
 8009ae4:	1c43      	adds	r3, r0, #1
 8009ae6:	d102      	bne.n	8009aee <_close_r+0x1a>
 8009ae8:	682b      	ldr	r3, [r5, #0]
 8009aea:	b103      	cbz	r3, 8009aee <_close_r+0x1a>
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	bd38      	pop	{r3, r4, r5, pc}
 8009af0:	20001520 	.word	0x20001520

08009af4 <__sflush_r>:
 8009af4:	898a      	ldrh	r2, [r1, #12]
 8009af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009afa:	4605      	mov	r5, r0
 8009afc:	0710      	lsls	r0, r2, #28
 8009afe:	460c      	mov	r4, r1
 8009b00:	d458      	bmi.n	8009bb4 <__sflush_r+0xc0>
 8009b02:	684b      	ldr	r3, [r1, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	dc05      	bgt.n	8009b14 <__sflush_r+0x20>
 8009b08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	dc02      	bgt.n	8009b14 <__sflush_r+0x20>
 8009b0e:	2000      	movs	r0, #0
 8009b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b16:	2e00      	cmp	r6, #0
 8009b18:	d0f9      	beq.n	8009b0e <__sflush_r+0x1a>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b20:	682f      	ldr	r7, [r5, #0]
 8009b22:	602b      	str	r3, [r5, #0]
 8009b24:	d032      	beq.n	8009b8c <__sflush_r+0x98>
 8009b26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b28:	89a3      	ldrh	r3, [r4, #12]
 8009b2a:	075a      	lsls	r2, r3, #29
 8009b2c:	d505      	bpl.n	8009b3a <__sflush_r+0x46>
 8009b2e:	6863      	ldr	r3, [r4, #4]
 8009b30:	1ac0      	subs	r0, r0, r3
 8009b32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b34:	b10b      	cbz	r3, 8009b3a <__sflush_r+0x46>
 8009b36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b38:	1ac0      	subs	r0, r0, r3
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b40:	4628      	mov	r0, r5
 8009b42:	6a21      	ldr	r1, [r4, #32]
 8009b44:	47b0      	blx	r6
 8009b46:	1c43      	adds	r3, r0, #1
 8009b48:	89a3      	ldrh	r3, [r4, #12]
 8009b4a:	d106      	bne.n	8009b5a <__sflush_r+0x66>
 8009b4c:	6829      	ldr	r1, [r5, #0]
 8009b4e:	291d      	cmp	r1, #29
 8009b50:	d82c      	bhi.n	8009bac <__sflush_r+0xb8>
 8009b52:	4a2a      	ldr	r2, [pc, #168]	; (8009bfc <__sflush_r+0x108>)
 8009b54:	40ca      	lsrs	r2, r1
 8009b56:	07d6      	lsls	r6, r2, #31
 8009b58:	d528      	bpl.n	8009bac <__sflush_r+0xb8>
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	6062      	str	r2, [r4, #4]
 8009b5e:	6922      	ldr	r2, [r4, #16]
 8009b60:	04d9      	lsls	r1, r3, #19
 8009b62:	6022      	str	r2, [r4, #0]
 8009b64:	d504      	bpl.n	8009b70 <__sflush_r+0x7c>
 8009b66:	1c42      	adds	r2, r0, #1
 8009b68:	d101      	bne.n	8009b6e <__sflush_r+0x7a>
 8009b6a:	682b      	ldr	r3, [r5, #0]
 8009b6c:	b903      	cbnz	r3, 8009b70 <__sflush_r+0x7c>
 8009b6e:	6560      	str	r0, [r4, #84]	; 0x54
 8009b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b72:	602f      	str	r7, [r5, #0]
 8009b74:	2900      	cmp	r1, #0
 8009b76:	d0ca      	beq.n	8009b0e <__sflush_r+0x1a>
 8009b78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b7c:	4299      	cmp	r1, r3
 8009b7e:	d002      	beq.n	8009b86 <__sflush_r+0x92>
 8009b80:	4628      	mov	r0, r5
 8009b82:	f000 f923 	bl	8009dcc <_free_r>
 8009b86:	2000      	movs	r0, #0
 8009b88:	6360      	str	r0, [r4, #52]	; 0x34
 8009b8a:	e7c1      	b.n	8009b10 <__sflush_r+0x1c>
 8009b8c:	6a21      	ldr	r1, [r4, #32]
 8009b8e:	2301      	movs	r3, #1
 8009b90:	4628      	mov	r0, r5
 8009b92:	47b0      	blx	r6
 8009b94:	1c41      	adds	r1, r0, #1
 8009b96:	d1c7      	bne.n	8009b28 <__sflush_r+0x34>
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0c4      	beq.n	8009b28 <__sflush_r+0x34>
 8009b9e:	2b1d      	cmp	r3, #29
 8009ba0:	d001      	beq.n	8009ba6 <__sflush_r+0xb2>
 8009ba2:	2b16      	cmp	r3, #22
 8009ba4:	d101      	bne.n	8009baa <__sflush_r+0xb6>
 8009ba6:	602f      	str	r7, [r5, #0]
 8009ba8:	e7b1      	b.n	8009b0e <__sflush_r+0x1a>
 8009baa:	89a3      	ldrh	r3, [r4, #12]
 8009bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bb0:	81a3      	strh	r3, [r4, #12]
 8009bb2:	e7ad      	b.n	8009b10 <__sflush_r+0x1c>
 8009bb4:	690f      	ldr	r7, [r1, #16]
 8009bb6:	2f00      	cmp	r7, #0
 8009bb8:	d0a9      	beq.n	8009b0e <__sflush_r+0x1a>
 8009bba:	0793      	lsls	r3, r2, #30
 8009bbc:	bf18      	it	ne
 8009bbe:	2300      	movne	r3, #0
 8009bc0:	680e      	ldr	r6, [r1, #0]
 8009bc2:	bf08      	it	eq
 8009bc4:	694b      	ldreq	r3, [r1, #20]
 8009bc6:	eba6 0807 	sub.w	r8, r6, r7
 8009bca:	600f      	str	r7, [r1, #0]
 8009bcc:	608b      	str	r3, [r1, #8]
 8009bce:	f1b8 0f00 	cmp.w	r8, #0
 8009bd2:	dd9c      	ble.n	8009b0e <__sflush_r+0x1a>
 8009bd4:	4643      	mov	r3, r8
 8009bd6:	463a      	mov	r2, r7
 8009bd8:	4628      	mov	r0, r5
 8009bda:	6a21      	ldr	r1, [r4, #32]
 8009bdc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bde:	47b0      	blx	r6
 8009be0:	2800      	cmp	r0, #0
 8009be2:	dc06      	bgt.n	8009bf2 <__sflush_r+0xfe>
 8009be4:	89a3      	ldrh	r3, [r4, #12]
 8009be6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bee:	81a3      	strh	r3, [r4, #12]
 8009bf0:	e78e      	b.n	8009b10 <__sflush_r+0x1c>
 8009bf2:	4407      	add	r7, r0
 8009bf4:	eba8 0800 	sub.w	r8, r8, r0
 8009bf8:	e7e9      	b.n	8009bce <__sflush_r+0xda>
 8009bfa:	bf00      	nop
 8009bfc:	20400001 	.word	0x20400001

08009c00 <_fflush_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	690b      	ldr	r3, [r1, #16]
 8009c04:	4605      	mov	r5, r0
 8009c06:	460c      	mov	r4, r1
 8009c08:	b913      	cbnz	r3, 8009c10 <_fflush_r+0x10>
 8009c0a:	2500      	movs	r5, #0
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	bd38      	pop	{r3, r4, r5, pc}
 8009c10:	b118      	cbz	r0, 8009c1a <_fflush_r+0x1a>
 8009c12:	6983      	ldr	r3, [r0, #24]
 8009c14:	b90b      	cbnz	r3, 8009c1a <_fflush_r+0x1a>
 8009c16:	f7ff f8f3 	bl	8008e00 <__sinit>
 8009c1a:	4b14      	ldr	r3, [pc, #80]	; (8009c6c <_fflush_r+0x6c>)
 8009c1c:	429c      	cmp	r4, r3
 8009c1e:	d11b      	bne.n	8009c58 <_fflush_r+0x58>
 8009c20:	686c      	ldr	r4, [r5, #4]
 8009c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d0ef      	beq.n	8009c0a <_fflush_r+0xa>
 8009c2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c2c:	07d0      	lsls	r0, r2, #31
 8009c2e:	d404      	bmi.n	8009c3a <_fflush_r+0x3a>
 8009c30:	0599      	lsls	r1, r3, #22
 8009c32:	d402      	bmi.n	8009c3a <_fflush_r+0x3a>
 8009c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c36:	f7ff f981 	bl	8008f3c <__retarget_lock_acquire_recursive>
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	f7ff ff59 	bl	8009af4 <__sflush_r>
 8009c42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c44:	4605      	mov	r5, r0
 8009c46:	07da      	lsls	r2, r3, #31
 8009c48:	d4e0      	bmi.n	8009c0c <_fflush_r+0xc>
 8009c4a:	89a3      	ldrh	r3, [r4, #12]
 8009c4c:	059b      	lsls	r3, r3, #22
 8009c4e:	d4dd      	bmi.n	8009c0c <_fflush_r+0xc>
 8009c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c52:	f7ff f974 	bl	8008f3e <__retarget_lock_release_recursive>
 8009c56:	e7d9      	b.n	8009c0c <_fflush_r+0xc>
 8009c58:	4b05      	ldr	r3, [pc, #20]	; (8009c70 <_fflush_r+0x70>)
 8009c5a:	429c      	cmp	r4, r3
 8009c5c:	d101      	bne.n	8009c62 <_fflush_r+0x62>
 8009c5e:	68ac      	ldr	r4, [r5, #8]
 8009c60:	e7df      	b.n	8009c22 <_fflush_r+0x22>
 8009c62:	4b04      	ldr	r3, [pc, #16]	; (8009c74 <_fflush_r+0x74>)
 8009c64:	429c      	cmp	r4, r3
 8009c66:	bf08      	it	eq
 8009c68:	68ec      	ldreq	r4, [r5, #12]
 8009c6a:	e7da      	b.n	8009c22 <_fflush_r+0x22>
 8009c6c:	0800a1e0 	.word	0x0800a1e0
 8009c70:	0800a200 	.word	0x0800a200
 8009c74:	0800a1c0 	.word	0x0800a1c0

08009c78 <_lseek_r>:
 8009c78:	b538      	push	{r3, r4, r5, lr}
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	4608      	mov	r0, r1
 8009c7e:	4611      	mov	r1, r2
 8009c80:	2200      	movs	r2, #0
 8009c82:	4d05      	ldr	r5, [pc, #20]	; (8009c98 <_lseek_r+0x20>)
 8009c84:	602a      	str	r2, [r5, #0]
 8009c86:	461a      	mov	r2, r3
 8009c88:	f7f7 f891 	bl	8000dae <_lseek>
 8009c8c:	1c43      	adds	r3, r0, #1
 8009c8e:	d102      	bne.n	8009c96 <_lseek_r+0x1e>
 8009c90:	682b      	ldr	r3, [r5, #0]
 8009c92:	b103      	cbz	r3, 8009c96 <_lseek_r+0x1e>
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	bd38      	pop	{r3, r4, r5, pc}
 8009c98:	20001520 	.word	0x20001520

08009c9c <__swhatbuf_r>:
 8009c9c:	b570      	push	{r4, r5, r6, lr}
 8009c9e:	460e      	mov	r6, r1
 8009ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca4:	4614      	mov	r4, r2
 8009ca6:	2900      	cmp	r1, #0
 8009ca8:	461d      	mov	r5, r3
 8009caa:	b096      	sub	sp, #88	; 0x58
 8009cac:	da07      	bge.n	8009cbe <__swhatbuf_r+0x22>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	602b      	str	r3, [r5, #0]
 8009cb2:	89b3      	ldrh	r3, [r6, #12]
 8009cb4:	061a      	lsls	r2, r3, #24
 8009cb6:	d410      	bmi.n	8009cda <__swhatbuf_r+0x3e>
 8009cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cbc:	e00e      	b.n	8009cdc <__swhatbuf_r+0x40>
 8009cbe:	466a      	mov	r2, sp
 8009cc0:	f000 f908 	bl	8009ed4 <_fstat_r>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	dbf2      	blt.n	8009cae <__swhatbuf_r+0x12>
 8009cc8:	9a01      	ldr	r2, [sp, #4]
 8009cca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009cce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cd2:	425a      	negs	r2, r3
 8009cd4:	415a      	adcs	r2, r3
 8009cd6:	602a      	str	r2, [r5, #0]
 8009cd8:	e7ee      	b.n	8009cb8 <__swhatbuf_r+0x1c>
 8009cda:	2340      	movs	r3, #64	; 0x40
 8009cdc:	2000      	movs	r0, #0
 8009cde:	6023      	str	r3, [r4, #0]
 8009ce0:	b016      	add	sp, #88	; 0x58
 8009ce2:	bd70      	pop	{r4, r5, r6, pc}

08009ce4 <__smakebuf_r>:
 8009ce4:	898b      	ldrh	r3, [r1, #12]
 8009ce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ce8:	079d      	lsls	r5, r3, #30
 8009cea:	4606      	mov	r6, r0
 8009cec:	460c      	mov	r4, r1
 8009cee:	d507      	bpl.n	8009d00 <__smakebuf_r+0x1c>
 8009cf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cf4:	6023      	str	r3, [r4, #0]
 8009cf6:	6123      	str	r3, [r4, #16]
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	6163      	str	r3, [r4, #20]
 8009cfc:	b002      	add	sp, #8
 8009cfe:	bd70      	pop	{r4, r5, r6, pc}
 8009d00:	466a      	mov	r2, sp
 8009d02:	ab01      	add	r3, sp, #4
 8009d04:	f7ff ffca 	bl	8009c9c <__swhatbuf_r>
 8009d08:	9900      	ldr	r1, [sp, #0]
 8009d0a:	4605      	mov	r5, r0
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	f7ff f917 	bl	8008f40 <_malloc_r>
 8009d12:	b948      	cbnz	r0, 8009d28 <__smakebuf_r+0x44>
 8009d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d18:	059a      	lsls	r2, r3, #22
 8009d1a:	d4ef      	bmi.n	8009cfc <__smakebuf_r+0x18>
 8009d1c:	f023 0303 	bic.w	r3, r3, #3
 8009d20:	f043 0302 	orr.w	r3, r3, #2
 8009d24:	81a3      	strh	r3, [r4, #12]
 8009d26:	e7e3      	b.n	8009cf0 <__smakebuf_r+0xc>
 8009d28:	4b0d      	ldr	r3, [pc, #52]	; (8009d60 <__smakebuf_r+0x7c>)
 8009d2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d2c:	89a3      	ldrh	r3, [r4, #12]
 8009d2e:	6020      	str	r0, [r4, #0]
 8009d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d34:	81a3      	strh	r3, [r4, #12]
 8009d36:	9b00      	ldr	r3, [sp, #0]
 8009d38:	6120      	str	r0, [r4, #16]
 8009d3a:	6163      	str	r3, [r4, #20]
 8009d3c:	9b01      	ldr	r3, [sp, #4]
 8009d3e:	b15b      	cbz	r3, 8009d58 <__smakebuf_r+0x74>
 8009d40:	4630      	mov	r0, r6
 8009d42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d46:	f000 f8d7 	bl	8009ef8 <_isatty_r>
 8009d4a:	b128      	cbz	r0, 8009d58 <__smakebuf_r+0x74>
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	f023 0303 	bic.w	r3, r3, #3
 8009d52:	f043 0301 	orr.w	r3, r3, #1
 8009d56:	81a3      	strh	r3, [r4, #12]
 8009d58:	89a0      	ldrh	r0, [r4, #12]
 8009d5a:	4305      	orrs	r5, r0
 8009d5c:	81a5      	strh	r5, [r4, #12]
 8009d5e:	e7cd      	b.n	8009cfc <__smakebuf_r+0x18>
 8009d60:	08008d99 	.word	0x08008d99

08009d64 <memchr>:
 8009d64:	4603      	mov	r3, r0
 8009d66:	b510      	push	{r4, lr}
 8009d68:	b2c9      	uxtb	r1, r1
 8009d6a:	4402      	add	r2, r0
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	4618      	mov	r0, r3
 8009d70:	d101      	bne.n	8009d76 <memchr+0x12>
 8009d72:	2000      	movs	r0, #0
 8009d74:	e003      	b.n	8009d7e <memchr+0x1a>
 8009d76:	7804      	ldrb	r4, [r0, #0]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	428c      	cmp	r4, r1
 8009d7c:	d1f6      	bne.n	8009d6c <memchr+0x8>
 8009d7e:	bd10      	pop	{r4, pc}

08009d80 <memmove>:
 8009d80:	4288      	cmp	r0, r1
 8009d82:	b510      	push	{r4, lr}
 8009d84:	eb01 0402 	add.w	r4, r1, r2
 8009d88:	d902      	bls.n	8009d90 <memmove+0x10>
 8009d8a:	4284      	cmp	r4, r0
 8009d8c:	4623      	mov	r3, r4
 8009d8e:	d807      	bhi.n	8009da0 <memmove+0x20>
 8009d90:	1e43      	subs	r3, r0, #1
 8009d92:	42a1      	cmp	r1, r4
 8009d94:	d008      	beq.n	8009da8 <memmove+0x28>
 8009d96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d9e:	e7f8      	b.n	8009d92 <memmove+0x12>
 8009da0:	4601      	mov	r1, r0
 8009da2:	4402      	add	r2, r0
 8009da4:	428a      	cmp	r2, r1
 8009da6:	d100      	bne.n	8009daa <memmove+0x2a>
 8009da8:	bd10      	pop	{r4, pc}
 8009daa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009db2:	e7f7      	b.n	8009da4 <memmove+0x24>

08009db4 <__malloc_lock>:
 8009db4:	4801      	ldr	r0, [pc, #4]	; (8009dbc <__malloc_lock+0x8>)
 8009db6:	f7ff b8c1 	b.w	8008f3c <__retarget_lock_acquire_recursive>
 8009dba:	bf00      	nop
 8009dbc:	20001518 	.word	0x20001518

08009dc0 <__malloc_unlock>:
 8009dc0:	4801      	ldr	r0, [pc, #4]	; (8009dc8 <__malloc_unlock+0x8>)
 8009dc2:	f7ff b8bc 	b.w	8008f3e <__retarget_lock_release_recursive>
 8009dc6:	bf00      	nop
 8009dc8:	20001518 	.word	0x20001518

08009dcc <_free_r>:
 8009dcc:	b538      	push	{r3, r4, r5, lr}
 8009dce:	4605      	mov	r5, r0
 8009dd0:	2900      	cmp	r1, #0
 8009dd2:	d043      	beq.n	8009e5c <_free_r+0x90>
 8009dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dd8:	1f0c      	subs	r4, r1, #4
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	bfb8      	it	lt
 8009dde:	18e4      	addlt	r4, r4, r3
 8009de0:	f7ff ffe8 	bl	8009db4 <__malloc_lock>
 8009de4:	4a1e      	ldr	r2, [pc, #120]	; (8009e60 <_free_r+0x94>)
 8009de6:	6813      	ldr	r3, [r2, #0]
 8009de8:	4610      	mov	r0, r2
 8009dea:	b933      	cbnz	r3, 8009dfa <_free_r+0x2e>
 8009dec:	6063      	str	r3, [r4, #4]
 8009dee:	6014      	str	r4, [r2, #0]
 8009df0:	4628      	mov	r0, r5
 8009df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009df6:	f7ff bfe3 	b.w	8009dc0 <__malloc_unlock>
 8009dfa:	42a3      	cmp	r3, r4
 8009dfc:	d90a      	bls.n	8009e14 <_free_r+0x48>
 8009dfe:	6821      	ldr	r1, [r4, #0]
 8009e00:	1862      	adds	r2, r4, r1
 8009e02:	4293      	cmp	r3, r2
 8009e04:	bf01      	itttt	eq
 8009e06:	681a      	ldreq	r2, [r3, #0]
 8009e08:	685b      	ldreq	r3, [r3, #4]
 8009e0a:	1852      	addeq	r2, r2, r1
 8009e0c:	6022      	streq	r2, [r4, #0]
 8009e0e:	6063      	str	r3, [r4, #4]
 8009e10:	6004      	str	r4, [r0, #0]
 8009e12:	e7ed      	b.n	8009df0 <_free_r+0x24>
 8009e14:	461a      	mov	r2, r3
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	b10b      	cbz	r3, 8009e1e <_free_r+0x52>
 8009e1a:	42a3      	cmp	r3, r4
 8009e1c:	d9fa      	bls.n	8009e14 <_free_r+0x48>
 8009e1e:	6811      	ldr	r1, [r2, #0]
 8009e20:	1850      	adds	r0, r2, r1
 8009e22:	42a0      	cmp	r0, r4
 8009e24:	d10b      	bne.n	8009e3e <_free_r+0x72>
 8009e26:	6820      	ldr	r0, [r4, #0]
 8009e28:	4401      	add	r1, r0
 8009e2a:	1850      	adds	r0, r2, r1
 8009e2c:	4283      	cmp	r3, r0
 8009e2e:	6011      	str	r1, [r2, #0]
 8009e30:	d1de      	bne.n	8009df0 <_free_r+0x24>
 8009e32:	6818      	ldr	r0, [r3, #0]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	4401      	add	r1, r0
 8009e38:	6011      	str	r1, [r2, #0]
 8009e3a:	6053      	str	r3, [r2, #4]
 8009e3c:	e7d8      	b.n	8009df0 <_free_r+0x24>
 8009e3e:	d902      	bls.n	8009e46 <_free_r+0x7a>
 8009e40:	230c      	movs	r3, #12
 8009e42:	602b      	str	r3, [r5, #0]
 8009e44:	e7d4      	b.n	8009df0 <_free_r+0x24>
 8009e46:	6820      	ldr	r0, [r4, #0]
 8009e48:	1821      	adds	r1, r4, r0
 8009e4a:	428b      	cmp	r3, r1
 8009e4c:	bf01      	itttt	eq
 8009e4e:	6819      	ldreq	r1, [r3, #0]
 8009e50:	685b      	ldreq	r3, [r3, #4]
 8009e52:	1809      	addeq	r1, r1, r0
 8009e54:	6021      	streq	r1, [r4, #0]
 8009e56:	6063      	str	r3, [r4, #4]
 8009e58:	6054      	str	r4, [r2, #4]
 8009e5a:	e7c9      	b.n	8009df0 <_free_r+0x24>
 8009e5c:	bd38      	pop	{r3, r4, r5, pc}
 8009e5e:	bf00      	nop
 8009e60:	20001278 	.word	0x20001278

08009e64 <_realloc_r>:
 8009e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e66:	4607      	mov	r7, r0
 8009e68:	4614      	mov	r4, r2
 8009e6a:	460e      	mov	r6, r1
 8009e6c:	b921      	cbnz	r1, 8009e78 <_realloc_r+0x14>
 8009e6e:	4611      	mov	r1, r2
 8009e70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e74:	f7ff b864 	b.w	8008f40 <_malloc_r>
 8009e78:	b922      	cbnz	r2, 8009e84 <_realloc_r+0x20>
 8009e7a:	f7ff ffa7 	bl	8009dcc <_free_r>
 8009e7e:	4625      	mov	r5, r4
 8009e80:	4628      	mov	r0, r5
 8009e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e84:	f000 f848 	bl	8009f18 <_malloc_usable_size_r>
 8009e88:	42a0      	cmp	r0, r4
 8009e8a:	d20f      	bcs.n	8009eac <_realloc_r+0x48>
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	4638      	mov	r0, r7
 8009e90:	f7ff f856 	bl	8008f40 <_malloc_r>
 8009e94:	4605      	mov	r5, r0
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d0f2      	beq.n	8009e80 <_realloc_r+0x1c>
 8009e9a:	4631      	mov	r1, r6
 8009e9c:	4622      	mov	r2, r4
 8009e9e:	f7fe ff09 	bl	8008cb4 <memcpy>
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	4638      	mov	r0, r7
 8009ea6:	f7ff ff91 	bl	8009dcc <_free_r>
 8009eaa:	e7e9      	b.n	8009e80 <_realloc_r+0x1c>
 8009eac:	4635      	mov	r5, r6
 8009eae:	e7e7      	b.n	8009e80 <_realloc_r+0x1c>

08009eb0 <_read_r>:
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	4608      	mov	r0, r1
 8009eb6:	4611      	mov	r1, r2
 8009eb8:	2200      	movs	r2, #0
 8009eba:	4d05      	ldr	r5, [pc, #20]	; (8009ed0 <_read_r+0x20>)
 8009ebc:	602a      	str	r2, [r5, #0]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	f7f6 ff18 	bl	8000cf4 <_read>
 8009ec4:	1c43      	adds	r3, r0, #1
 8009ec6:	d102      	bne.n	8009ece <_read_r+0x1e>
 8009ec8:	682b      	ldr	r3, [r5, #0]
 8009eca:	b103      	cbz	r3, 8009ece <_read_r+0x1e>
 8009ecc:	6023      	str	r3, [r4, #0]
 8009ece:	bd38      	pop	{r3, r4, r5, pc}
 8009ed0:	20001520 	.word	0x20001520

08009ed4 <_fstat_r>:
 8009ed4:	b538      	push	{r3, r4, r5, lr}
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	4d06      	ldr	r5, [pc, #24]	; (8009ef4 <_fstat_r+0x20>)
 8009eda:	4604      	mov	r4, r0
 8009edc:	4608      	mov	r0, r1
 8009ede:	4611      	mov	r1, r2
 8009ee0:	602b      	str	r3, [r5, #0]
 8009ee2:	f7f6 ff4b 	bl	8000d7c <_fstat>
 8009ee6:	1c43      	adds	r3, r0, #1
 8009ee8:	d102      	bne.n	8009ef0 <_fstat_r+0x1c>
 8009eea:	682b      	ldr	r3, [r5, #0]
 8009eec:	b103      	cbz	r3, 8009ef0 <_fstat_r+0x1c>
 8009eee:	6023      	str	r3, [r4, #0]
 8009ef0:	bd38      	pop	{r3, r4, r5, pc}
 8009ef2:	bf00      	nop
 8009ef4:	20001520 	.word	0x20001520

08009ef8 <_isatty_r>:
 8009ef8:	b538      	push	{r3, r4, r5, lr}
 8009efa:	2300      	movs	r3, #0
 8009efc:	4d05      	ldr	r5, [pc, #20]	; (8009f14 <_isatty_r+0x1c>)
 8009efe:	4604      	mov	r4, r0
 8009f00:	4608      	mov	r0, r1
 8009f02:	602b      	str	r3, [r5, #0]
 8009f04:	f7f6 ff49 	bl	8000d9a <_isatty>
 8009f08:	1c43      	adds	r3, r0, #1
 8009f0a:	d102      	bne.n	8009f12 <_isatty_r+0x1a>
 8009f0c:	682b      	ldr	r3, [r5, #0]
 8009f0e:	b103      	cbz	r3, 8009f12 <_isatty_r+0x1a>
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	bd38      	pop	{r3, r4, r5, pc}
 8009f14:	20001520 	.word	0x20001520

08009f18 <_malloc_usable_size_r>:
 8009f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f1c:	1f18      	subs	r0, r3, #4
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	bfbc      	itt	lt
 8009f22:	580b      	ldrlt	r3, [r1, r0]
 8009f24:	18c0      	addlt	r0, r0, r3
 8009f26:	4770      	bx	lr

08009f28 <_init>:
 8009f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2a:	bf00      	nop
 8009f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f2e:	bc08      	pop	{r3}
 8009f30:	469e      	mov	lr, r3
 8009f32:	4770      	bx	lr

08009f34 <_fini>:
 8009f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f36:	bf00      	nop
 8009f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f3a:	bc08      	pop	{r3}
 8009f3c:	469e      	mov	lr, r3
 8009f3e:	4770      	bx	lr

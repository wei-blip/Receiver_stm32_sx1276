
sx1276_L152RE_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b6c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08009cac  08009cac  00019cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f80  08009f80  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009f80  08009f80  00019f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f88  08009f88  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f88  08009f88  00019f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f8c  08009f8c  00019f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000145c  20000090  0800a020  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014ec  0800a020  000214ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000253af  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005545  00000000  00000000  00045468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  0004a9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001868  00000000  00000000  0004c458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e26d  00000000  00000000  0004dcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e599  00000000  00000000  0006bf2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a76f4  00000000  00000000  0008a4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00131bba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075ac  00000000  00000000  00131c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000090 	.word	0x20000090
 800015c:	00000000 	.word	0x00000000
 8000160:	08009c94 	.word	0x08009c94

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000094 	.word	0x20000094
 800017c:	08009c94 	.word	0x08009c94

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b96e 	b.w	8000484 <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	460d      	mov	r5, r1
 80001c8:	4604      	mov	r4, r0
 80001ca:	468e      	mov	lr, r1
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	f040 8083 	bne.w	80002d8 <__udivmoddi4+0x118>
 80001d2:	428a      	cmp	r2, r1
 80001d4:	4617      	mov	r7, r2
 80001d6:	d947      	bls.n	8000268 <__udivmoddi4+0xa8>
 80001d8:	fab2 f382 	clz	r3, r2
 80001dc:	b14b      	cbz	r3, 80001f2 <__udivmoddi4+0x32>
 80001de:	f1c3 0120 	rsb	r1, r3, #32
 80001e2:	fa05 fe03 	lsl.w	lr, r5, r3
 80001e6:	fa20 f101 	lsr.w	r1, r0, r1
 80001ea:	409f      	lsls	r7, r3
 80001ec:	ea41 0e0e 	orr.w	lr, r1, lr
 80001f0:	409c      	lsls	r4, r3
 80001f2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001f6:	fbbe fcf8 	udiv	ip, lr, r8
 80001fa:	fa1f f987 	uxth.w	r9, r7
 80001fe:	fb08 e21c 	mls	r2, r8, ip, lr
 8000202:	fb0c f009 	mul.w	r0, ip, r9
 8000206:	0c21      	lsrs	r1, r4, #16
 8000208:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800020c:	4290      	cmp	r0, r2
 800020e:	d90a      	bls.n	8000226 <__udivmoddi4+0x66>
 8000210:	18ba      	adds	r2, r7, r2
 8000212:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000216:	f080 8118 	bcs.w	800044a <__udivmoddi4+0x28a>
 800021a:	4290      	cmp	r0, r2
 800021c:	f240 8115 	bls.w	800044a <__udivmoddi4+0x28a>
 8000220:	f1ac 0c02 	sub.w	ip, ip, #2
 8000224:	443a      	add	r2, r7
 8000226:	1a12      	subs	r2, r2, r0
 8000228:	fbb2 f0f8 	udiv	r0, r2, r8
 800022c:	fb08 2210 	mls	r2, r8, r0, r2
 8000230:	fb00 f109 	mul.w	r1, r0, r9
 8000234:	b2a4      	uxth	r4, r4
 8000236:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800023a:	42a1      	cmp	r1, r4
 800023c:	d909      	bls.n	8000252 <__udivmoddi4+0x92>
 800023e:	193c      	adds	r4, r7, r4
 8000240:	f100 32ff 	add.w	r2, r0, #4294967295
 8000244:	f080 8103 	bcs.w	800044e <__udivmoddi4+0x28e>
 8000248:	42a1      	cmp	r1, r4
 800024a:	f240 8100 	bls.w	800044e <__udivmoddi4+0x28e>
 800024e:	3802      	subs	r0, #2
 8000250:	443c      	add	r4, r7
 8000252:	1a64      	subs	r4, r4, r1
 8000254:	2100      	movs	r1, #0
 8000256:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa4>
 800025c:	2200      	movs	r2, #0
 800025e:	40dc      	lsrs	r4, r3
 8000260:	e9c6 4200 	strd	r4, r2, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	b902      	cbnz	r2, 800026c <__udivmoddi4+0xac>
 800026a:	deff      	udf	#255	; 0xff
 800026c:	fab2 f382 	clz	r3, r2
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14f      	bne.n	8000314 <__udivmoddi4+0x154>
 8000274:	1a8d      	subs	r5, r1, r2
 8000276:	2101      	movs	r1, #1
 8000278:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800027c:	fa1f f882 	uxth.w	r8, r2
 8000280:	fbb5 fcfe 	udiv	ip, r5, lr
 8000284:	fb0e 551c 	mls	r5, lr, ip, r5
 8000288:	fb08 f00c 	mul.w	r0, r8, ip
 800028c:	0c22      	lsrs	r2, r4, #16
 800028e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000292:	42a8      	cmp	r0, r5
 8000294:	d907      	bls.n	80002a6 <__udivmoddi4+0xe6>
 8000296:	197d      	adds	r5, r7, r5
 8000298:	f10c 32ff 	add.w	r2, ip, #4294967295
 800029c:	d202      	bcs.n	80002a4 <__udivmoddi4+0xe4>
 800029e:	42a8      	cmp	r0, r5
 80002a0:	f200 80e9 	bhi.w	8000476 <__udivmoddi4+0x2b6>
 80002a4:	4694      	mov	ip, r2
 80002a6:	1a2d      	subs	r5, r5, r0
 80002a8:	fbb5 f0fe 	udiv	r0, r5, lr
 80002ac:	fb0e 5510 	mls	r5, lr, r0, r5
 80002b0:	fb08 f800 	mul.w	r8, r8, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ba:	45a0      	cmp	r8, r4
 80002bc:	d907      	bls.n	80002ce <__udivmoddi4+0x10e>
 80002be:	193c      	adds	r4, r7, r4
 80002c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c4:	d202      	bcs.n	80002cc <__udivmoddi4+0x10c>
 80002c6:	45a0      	cmp	r8, r4
 80002c8:	f200 80d9 	bhi.w	800047e <__udivmoddi4+0x2be>
 80002cc:	4610      	mov	r0, r2
 80002ce:	eba4 0408 	sub.w	r4, r4, r8
 80002d2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002d6:	e7c0      	b.n	800025a <__udivmoddi4+0x9a>
 80002d8:	428b      	cmp	r3, r1
 80002da:	d908      	bls.n	80002ee <__udivmoddi4+0x12e>
 80002dc:	2e00      	cmp	r6, #0
 80002de:	f000 80b1 	beq.w	8000444 <__udivmoddi4+0x284>
 80002e2:	2100      	movs	r1, #0
 80002e4:	e9c6 0500 	strd	r0, r5, [r6]
 80002e8:	4608      	mov	r0, r1
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d14b      	bne.n	800038e <__udivmoddi4+0x1ce>
 80002f6:	42ab      	cmp	r3, r5
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0x140>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80b9 	bhi.w	8000472 <__udivmoddi4+0x2b2>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb65 0303 	sbc.w	r3, r5, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d0aa      	beq.n	8000264 <__udivmoddi4+0xa4>
 800030e:	e9c6 4e00 	strd	r4, lr, [r6]
 8000312:	e7a7      	b.n	8000264 <__udivmoddi4+0xa4>
 8000314:	409f      	lsls	r7, r3
 8000316:	f1c3 0220 	rsb	r2, r3, #32
 800031a:	40d1      	lsrs	r1, r2
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fa1f f887 	uxth.w	r8, r7
 8000328:	fb0e 1110 	mls	r1, lr, r0, r1
 800032c:	fa24 f202 	lsr.w	r2, r4, r2
 8000330:	409d      	lsls	r5, r3
 8000332:	fb00 fc08 	mul.w	ip, r0, r8
 8000336:	432a      	orrs	r2, r5
 8000338:	0c15      	lsrs	r5, r2, #16
 800033a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800033e:	45ac      	cmp	ip, r5
 8000340:	fa04 f403 	lsl.w	r4, r4, r3
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x19a>
 8000346:	197d      	adds	r5, r7, r5
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	f080 808f 	bcs.w	800046e <__udivmoddi4+0x2ae>
 8000350:	45ac      	cmp	ip, r5
 8000352:	f240 808c 	bls.w	800046e <__udivmoddi4+0x2ae>
 8000356:	3802      	subs	r0, #2
 8000358:	443d      	add	r5, r7
 800035a:	eba5 050c 	sub.w	r5, r5, ip
 800035e:	fbb5 f1fe 	udiv	r1, r5, lr
 8000362:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000366:	fb01 f908 	mul.w	r9, r1, r8
 800036a:	b295      	uxth	r5, r2
 800036c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000370:	45a9      	cmp	r9, r5
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x1c4>
 8000374:	197d      	adds	r5, r7, r5
 8000376:	f101 32ff 	add.w	r2, r1, #4294967295
 800037a:	d274      	bcs.n	8000466 <__udivmoddi4+0x2a6>
 800037c:	45a9      	cmp	r9, r5
 800037e:	d972      	bls.n	8000466 <__udivmoddi4+0x2a6>
 8000380:	3902      	subs	r1, #2
 8000382:	443d      	add	r5, r7
 8000384:	eba5 0509 	sub.w	r5, r5, r9
 8000388:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800038c:	e778      	b.n	8000280 <__udivmoddi4+0xc0>
 800038e:	f1c1 0720 	rsb	r7, r1, #32
 8000392:	408b      	lsls	r3, r1
 8000394:	fa22 fc07 	lsr.w	ip, r2, r7
 8000398:	ea4c 0c03 	orr.w	ip, ip, r3
 800039c:	fa25 f407 	lsr.w	r4, r5, r7
 80003a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a4:	fbb4 f9fe 	udiv	r9, r4, lr
 80003a8:	fa1f f88c 	uxth.w	r8, ip
 80003ac:	fb0e 4419 	mls	r4, lr, r9, r4
 80003b0:	fa20 f307 	lsr.w	r3, r0, r7
 80003b4:	fb09 fa08 	mul.w	sl, r9, r8
 80003b8:	408d      	lsls	r5, r1
 80003ba:	431d      	orrs	r5, r3
 80003bc:	0c2b      	lsrs	r3, r5, #16
 80003be:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003c2:	45a2      	cmp	sl, r4
 80003c4:	fa02 f201 	lsl.w	r2, r2, r1
 80003c8:	fa00 f301 	lsl.w	r3, r0, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0x222>
 80003ce:	eb1c 0404 	adds.w	r4, ip, r4
 80003d2:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d6:	d248      	bcs.n	800046a <__udivmoddi4+0x2aa>
 80003d8:	45a2      	cmp	sl, r4
 80003da:	d946      	bls.n	800046a <__udivmoddi4+0x2aa>
 80003dc:	f1a9 0902 	sub.w	r9, r9, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	fbb4 f0fe 	udiv	r0, r4, lr
 80003ea:	fb0e 4410 	mls	r4, lr, r0, r4
 80003ee:	fb00 fa08 	mul.w	sl, r0, r8
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x24e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 35ff 	add.w	r5, r0, #4294967295
 8000404:	d22d      	bcs.n	8000462 <__udivmoddi4+0x2a2>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d92b      	bls.n	8000462 <__udivmoddi4+0x2a2>
 800040a:	3802      	subs	r0, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c6      	mov	lr, r8
 800041e:	464d      	mov	r5, r9
 8000420:	d319      	bcc.n	8000456 <__udivmoddi4+0x296>
 8000422:	d016      	beq.n	8000452 <__udivmoddi4+0x292>
 8000424:	b15e      	cbz	r6, 800043e <__udivmoddi4+0x27e>
 8000426:	ebb3 020e 	subs.w	r2, r3, lr
 800042a:	eb64 0405 	sbc.w	r4, r4, r5
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431f      	orrs	r7, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c6 7400 	strd	r7, r4, [r6]
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	4631      	mov	r1, r6
 8000446:	4630      	mov	r0, r6
 8000448:	e70c      	b.n	8000264 <__udivmoddi4+0xa4>
 800044a:	468c      	mov	ip, r1
 800044c:	e6eb      	b.n	8000226 <__udivmoddi4+0x66>
 800044e:	4610      	mov	r0, r2
 8000450:	e6ff      	b.n	8000252 <__udivmoddi4+0x92>
 8000452:	4543      	cmp	r3, r8
 8000454:	d2e6      	bcs.n	8000424 <__udivmoddi4+0x264>
 8000456:	ebb8 0e02 	subs.w	lr, r8, r2
 800045a:	eb69 050c 	sbc.w	r5, r9, ip
 800045e:	3801      	subs	r0, #1
 8000460:	e7e0      	b.n	8000424 <__udivmoddi4+0x264>
 8000462:	4628      	mov	r0, r5
 8000464:	e7d3      	b.n	800040e <__udivmoddi4+0x24e>
 8000466:	4611      	mov	r1, r2
 8000468:	e78c      	b.n	8000384 <__udivmoddi4+0x1c4>
 800046a:	4681      	mov	r9, r0
 800046c:	e7b9      	b.n	80003e2 <__udivmoddi4+0x222>
 800046e:	4608      	mov	r0, r1
 8000470:	e773      	b.n	800035a <__udivmoddi4+0x19a>
 8000472:	4608      	mov	r0, r1
 8000474:	e749      	b.n	800030a <__udivmoddi4+0x14a>
 8000476:	f1ac 0c02 	sub.w	ip, ip, #2
 800047a:	443d      	add	r5, r7
 800047c:	e713      	b.n	80002a6 <__udivmoddi4+0xe6>
 800047e:	3802      	subs	r0, #2
 8000480:	443c      	add	r4, r7
 8000482:	e724      	b.n	80002ce <__udivmoddi4+0x10e>

08000484 <__aeabi_idiv0>:
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop

08000488 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	4a06      	ldr	r2, [pc, #24]	; (80004b0 <vApplicationGetIdleTaskMemory+0x28>)
 8000498:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	4a05      	ldr	r2, [pc, #20]	; (80004b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800049e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2280      	movs	r2, #128	; 0x80
 80004a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	200000ac 	.word	0x200000ac
 80004b4:	20000100 	.word	0x20000100

080004b8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b096      	sub	sp, #88	; 0x58
 80004bc:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	xQueueUartData = xQueueCreate( 10, sizeof(uint8_t*) );
 80004be:	2200      	movs	r2, #0
 80004c0:	2104      	movs	r1, #4
 80004c2:	200a      	movs	r0, #10
 80004c4:	f003 fd72 	bl	8003fac <xQueueGenericCreate>
 80004c8:	4603      	mov	r3, r0
 80004ca:	4a21      	ldr	r2, [pc, #132]	; (8000550 <MX_FREERTOS_Init+0x98>)
 80004cc:	6013      	str	r3, [r2, #0]
	if (xQueueUartData == NULL) {
 80004ce:	4b20      	ldr	r3, [pc, #128]	; (8000550 <MX_FREERTOS_Init+0x98>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d037      	beq.n	8000546 <MX_FREERTOS_Init+0x8e>
	}
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80004d6:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <MX_FREERTOS_Init+0x9c>)
 80004d8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80004dc:	461d      	mov	r5, r3
 80004de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80004ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004ee:	2100      	movs	r1, #0
 80004f0:	4618      	mov	r0, r3
 80004f2:	f003 fbe3 	bl	8003cbc <osThreadCreate>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a17      	ldr	r2, [pc, #92]	; (8000558 <MX_FREERTOS_Init+0xa0>)
 80004fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of vRadioChData */
  osThreadDef(vRadioChData, StartRadioChData, osPriorityNormal, 0, 128);
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_FREERTOS_Init+0xa4>)
 80004fe:	f107 0420 	add.w	r4, r7, #32
 8000502:	461d      	mov	r5, r3
 8000504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000508:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800050c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  vRadioChDataHandle = osThreadCreate(osThread(vRadioChData), NULL);
 8000510:	f107 0320 	add.w	r3, r7, #32
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f003 fbd0 	bl	8003cbc <osThreadCreate>
 800051c:	4603      	mov	r3, r0
 800051e:	4a10      	ldr	r2, [pc, #64]	; (8000560 <MX_FREERTOS_Init+0xa8>)
 8000520:	6013      	str	r3, [r2, #0]

  /* definition and creation of vUartData */
  osThreadDef(vUartData, StartUartData, osPriorityNormal, 0, 128);
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <MX_FREERTOS_Init+0xac>)
 8000524:	1d3c      	adds	r4, r7, #4
 8000526:	461d      	mov	r5, r3
 8000528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000530:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  vUartDataHandle = osThreadCreate(osThread(vUartData), NULL);
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f003 fbbf 	bl	8003cbc <osThreadCreate>
 800053e:	4603      	mov	r3, r0
 8000540:	4a09      	ldr	r2, [pc, #36]	; (8000568 <MX_FREERTOS_Init+0xb0>)
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	e000      	b.n	8000548 <MX_FREERTOS_Init+0x90>
		return;
 8000546:	bf00      	nop

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000548:	3758      	adds	r7, #88	; 0x58
 800054a:	46bd      	mov	sp, r7
 800054c:	bdb0      	pop	{r4, r5, r7, pc}
 800054e:	bf00      	nop
 8000550:	2000126c 	.word	0x2000126c
 8000554:	08009cd4 	.word	0x08009cd4
 8000558:	20001260 	.word	0x20001260
 800055c:	08009cf0 	.word	0x08009cf0
 8000560:	20001264 	.word	0x20001264
 8000564:	08009d0c 	.word	0x08009d0c
 8000568:	20001268 	.word	0x20001268

0800056c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000574:	2001      	movs	r0, #1
 8000576:	f003 fbed 	bl	8003d54 <osDelay>
 800057a:	e7fb      	b.n	8000574 <StartDefaultTask+0x8>

0800057c <StartRadioChData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRadioChData */
void StartRadioChData(void const * argument)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRadioChData */
  /* Infinite loop */
  Radio.Rx( RX_TIMEOUT_VALUE );
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <StartRadioChData+0x20>)
 8000586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800058c:	4798      	blx	r3
  for(;;)
  {
	  Radio_Rx();
 800058e:	f007 fb0f 	bl	8007bb0 <Radio_Rx>
	  osDelay(1);
 8000592:	2001      	movs	r0, #1
 8000594:	f003 fbde 	bl	8003d54 <osDelay>
	  Radio_Rx();
 8000598:	e7f9      	b.n	800058e <StartRadioChData+0x12>
 800059a:	bf00      	nop
 800059c:	08009e7c 	.word	0x08009e7c

080005a0 <StartUartData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartData */
void StartUartData(void const * argument)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUartData */
  /* Infinite loop */
  for(;;)
  {
	  UART_Tx( );
 80005a8:	f007 fad0 	bl	8007b4c <UART_Tx>
	  osDelay(1);
 80005ac:	2001      	movs	r0, #1
 80005ae:	f003 fbd1 	bl	8003d54 <osDelay>
	  UART_Tx( );
 80005b2:	e7f9      	b.n	80005a8 <StartUartData+0x8>

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	4b42      	ldr	r3, [pc, #264]	; (80006d4 <MX_GPIO_Init+0x120>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a41      	ldr	r2, [pc, #260]	; (80006d4 <MX_GPIO_Init+0x120>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <MX_GPIO_Init+0x120>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	4b3c      	ldr	r3, [pc, #240]	; (80006d4 <MX_GPIO_Init+0x120>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a3b      	ldr	r2, [pc, #236]	; (80006d4 <MX_GPIO_Init+0x120>)
 80005e8:	f043 0320 	orr.w	r3, r3, #32
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b39      	ldr	r3, [pc, #228]	; (80006d4 <MX_GPIO_Init+0x120>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 0320 	and.w	r3, r3, #32
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b36      	ldr	r3, [pc, #216]	; (80006d4 <MX_GPIO_Init+0x120>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a35      	ldr	r2, [pc, #212]	; (80006d4 <MX_GPIO_Init+0x120>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <MX_GPIO_Init+0x120>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <MX_GPIO_Init+0x120>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a2f      	ldr	r2, [pc, #188]	; (80006d4 <MX_GPIO_Init+0x120>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b2d      	ldr	r3, [pc, #180]	; (80006d4 <MX_GPIO_Init+0x120>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SX1276_RST_Pin|LED_EXT_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2109      	movs	r1, #9
 800062e:	482a      	ldr	r0, [pc, #168]	; (80006d8 <MX_GPIO_Init+0x124>)
 8000630:	f000 ffd9 	bl	80015e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2110      	movs	r1, #16
 8000638:	4828      	ldr	r0, [pc, #160]	; (80006dc <MX_GPIO_Init+0x128>)
 800063a:	f000 ffd4 	bl	80015e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = B1_Pin|DIO_4_Pin|DIO_5_Pin|DIO_3_Pin
 800063e:	f242 3360 	movw	r3, #9056	; 0x2360
 8000642:	617b      	str	r3, [r7, #20]
                          |DIO_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <MX_GPIO_Init+0x12c>)
 8000646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	4821      	ldr	r0, [pc, #132]	; (80006d8 <MX_GPIO_Init+0x124>)
 8000654:	f000 fe20 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SX1276_RST_Pin|LED_EXT_Pin;
 8000658:	2309      	movs	r3, #9
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	481a      	ldr	r0, [pc, #104]	; (80006d8 <MX_GPIO_Init+0x124>)
 8000670:	f000 fe12 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8000674:	2310      	movs	r3, #16
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4814      	ldr	r0, [pc, #80]	; (80006dc <MX_GPIO_Init+0x128>)
 800068c:	f000 fe04 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIO_1_Pin|DIO_0_Pin;
 8000690:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_GPIO_Init+0x12c>)
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <MX_GPIO_Init+0x128>)
 80006a6:	f000 fdf7 	bl	8001298 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2105      	movs	r1, #5
 80006ae:	2017      	movs	r0, #23
 80006b0:	f000 fd87 	bl	80011c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006b4:	2017      	movs	r0, #23
 80006b6:	f000 fda0 	bl	80011fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2105      	movs	r1, #5
 80006be:	2028      	movs	r0, #40	; 0x28
 80006c0:	f000 fd7f 	bl	80011c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006c4:	2028      	movs	r0, #40	; 0x28
 80006c6:	f000 fd98 	bl	80011fa <HAL_NVIC_EnableIRQ>

}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	; 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020800 	.word	0x40020800
 80006dc:	40020000 	.word	0x40020000
 80006e0:	10110000 	.word	0x10110000

080006e4 <GpioWrite>:

/* USER CODE BEGIN 2 */
void GpioWrite( Gpio_t *obj, uint32_t value ) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(obj->port, obj->pin, (GPIO_PinState) value);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6818      	ldr	r0, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	889b      	ldrh	r3, [r3, #4]
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	4619      	mov	r1, r3
 80006fc:	f000 ff73 	bl	80015e6 <HAL_GPIO_WritePin>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <GpioRead>:

uint32_t GpioRead( Gpio_t *obj ) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin( obj->port, obj->pin);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	889b      	ldrh	r3, [r3, #4]
 8000718:	4619      	mov	r1, r3
 800071a:	4610      	mov	r0, r2
 800071c:	f000 ff4c 	bl	80015b8 <HAL_GPIO_ReadPin>
 8000720:	4603      	mov	r3, r0
}
 8000722:	4618      	mov	r0, r3
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fc12 	bl	8000f56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f80f 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000736:	f7ff ff3d 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800073a:	f000 fb71 	bl	8000e20 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800073e:	f000 f883 	bl	8000848 <MX_RTC_Init>
  MX_SPI1_Init();
 8000742:	f000 f929 	bl	8000998 <MX_SPI1_Init>
  init_rf();
 8000746:	f007 f8df 	bl	8007908 <init_rf>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800074a:	f7ff feb5 	bl	80004b8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800074e:	f003 faae 	bl	8003cae <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000752:	e7fe      	b.n	8000752 <main+0x28>

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b096      	sub	sp, #88	; 0x58
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075e:	2234      	movs	r2, #52	; 0x34
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f008 f96a 	bl	8008a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <SystemClock_Config+0xc4>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800078a:	4a23      	ldr	r2, [pc, #140]	; (8000818 <SystemClock_Config+0xc4>)
 800078c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000790:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000792:	2306      	movs	r3, #6
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000796:	2301      	movs	r3, #1
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079a:	2301      	movs	r3, #1
 800079c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079e:	2310      	movs	r3, #16
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a6:	2300      	movs	r3, #0
 80007a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80007aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80007b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80007b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 ff5c 	bl	8001678 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x76>
  {
    Error_Handler();
 80007c6:	f000 f838 	bl	800083a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2303      	movs	r3, #3
 80007d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	2101      	movs	r1, #1
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 fa77 	bl	8001cd8 <HAL_RCC_ClockConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007f0:	f000 f823 	bl	800083a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007f4:	2301      	movs	r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007fc:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4618      	mov	r0, r3
 8000802:	f001 fd2d 	bl	8002260 <HAL_RCCEx_PeriphCLKConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800080c:	f000 f815 	bl	800083a <Error_Handler>
  }
}
 8000810:	bf00      	nop
 8000812:	3758      	adds	r7, #88	; 0x58
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40007000 	.word	0x40007000

0800081c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800082c:	d101      	bne.n	8000832 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800082e:	f000 fbab 	bl	8000f88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
	...

08000848 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b090      	sub	sp, #64	; 0x40
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800084e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2228      	movs	r2, #40	; 0x28
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f008 f8e7 	bl	8008a3c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800086e:	4b3a      	ldr	r3, [pc, #232]	; (8000958 <MX_RTC_Init+0x110>)
 8000870:	4a3a      	ldr	r2, [pc, #232]	; (800095c <MX_RTC_Init+0x114>)
 8000872:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000874:	4b38      	ldr	r3, [pc, #224]	; (8000958 <MX_RTC_Init+0x110>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800087a:	4b37      	ldr	r3, [pc, #220]	; (8000958 <MX_RTC_Init+0x110>)
 800087c:	227f      	movs	r2, #127	; 0x7f
 800087e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000880:	4b35      	ldr	r3, [pc, #212]	; (8000958 <MX_RTC_Init+0x110>)
 8000882:	22ff      	movs	r2, #255	; 0xff
 8000884:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000886:	4b34      	ldr	r3, [pc, #208]	; (8000958 <MX_RTC_Init+0x110>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800088c:	4b32      	ldr	r3, [pc, #200]	; (8000958 <MX_RTC_Init+0x110>)
 800088e:	2200      	movs	r2, #0
 8000890:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000892:	4b31      	ldr	r3, [pc, #196]	; (8000958 <MX_RTC_Init+0x110>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000898:	482f      	ldr	r0, [pc, #188]	; (8000958 <MX_RTC_Init+0x110>)
 800089a:	f001 fdc3 	bl	8002424 <HAL_RTC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80008a4:	f7ff ffc9 	bl	800083a <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008c6:	2201      	movs	r2, #1
 80008c8:	4619      	mov	r1, r3
 80008ca:	4823      	ldr	r0, [pc, #140]	; (8000958 <MX_RTC_Init+0x110>)
 80008cc:	f001 fe25 	bl	800251a <HAL_RTC_SetTime>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80008d6:	f7ff ffb0 	bl	800083a <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008da:	2301      	movs	r3, #1
 80008dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80008e0:	2301      	movs	r3, #1
 80008e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008f6:	2201      	movs	r2, #1
 80008f8:	4619      	mov	r1, r3
 80008fa:	4817      	ldr	r0, [pc, #92]	; (8000958 <MX_RTC_Init+0x110>)
 80008fc:	f001 ff1e 	bl	800273c <HAL_RTC_SetDate>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000906:	f7ff ff98 	bl	800083a <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800090a:	2300      	movs	r3, #0
 800090c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800090e:	2300      	movs	r3, #0
 8000910:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000912:	2300      	movs	r3, #0
 8000914:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800092e:	2301      	movs	r3, #1
 8000930:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000934:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800093a:	463b      	mov	r3, r7
 800093c:	2201      	movs	r2, #1
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_RTC_Init+0x110>)
 8000942:	f001 ffe7 	bl	8002914 <HAL_RTC_SetAlarm_IT>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800094c:	f7ff ff75 	bl	800083a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	3740      	adds	r7, #64	; 0x40
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20001270 	.word	0x20001270
 800095c:	40002800 	.word	0x40002800

08000960 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_RTC_MspInit+0x30>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d10a      	bne.n	8000988 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_RTC_MspInit+0x34>)
 8000974:	2201      	movs	r2, #1
 8000976:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2105      	movs	r1, #5
 800097c:	2029      	movs	r0, #41	; 0x29
 800097e:	f000 fc20 	bl	80011c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000982:	2029      	movs	r0, #41	; 0x29
 8000984:	f000 fc39 	bl	80011fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40002800 	.word	0x40002800
 8000994:	424706d8 	.word	0x424706d8

08000998 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_SPI1_Init+0x64>)
 800099e:	4a18      	ldr	r2, [pc, #96]	; (8000a00 <MX_SPI1_Init+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_SPI1_Init+0x64>)
 80009a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_SPI1_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_SPI1_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_SPI1_Init+0x64>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_SPI1_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_SPI1_Init+0x64>)
 80009c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_SPI1_Init+0x64>)
 80009cc:	2218      	movs	r2, #24
 80009ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <MX_SPI1_Init+0x64>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_SPI1_Init+0x64>)
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <MX_SPI1_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_SPI1_Init+0x64>)
 80009e4:	220a      	movs	r2, #10
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_SPI1_Init+0x64>)
 80009ea:	f002 fa67 	bl	8002ebc <HAL_SPI_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009f4:	f7ff ff21 	bl	800083a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20001290 	.word	0x20001290
 8000a00:	40013000 	.word	0x40013000

08000a04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <HAL_SPI_MspInit+0x7c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d127      	bne.n	8000a76 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <HAL_SPI_MspInit+0x80>)
 8000a28:	6a1b      	ldr	r3, [r3, #32]
 8000a2a:	4a16      	ldr	r2, [pc, #88]	; (8000a84 <HAL_SPI_MspInit+0x80>)
 8000a2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a30:	6213      	str	r3, [r2, #32]
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <HAL_SPI_MspInit+0x80>)
 8000a34:	6a1b      	ldr	r3, [r3, #32]
 8000a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_SPI_MspInit+0x80>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <HAL_SPI_MspInit+0x80>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	61d3      	str	r3, [r2, #28]
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_SPI_MspInit+0x80>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a56:	23e0      	movs	r3, #224	; 0xe0
 8000a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a66:	2305      	movs	r3, #5
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <HAL_SPI_MspInit+0x84>)
 8000a72:	f000 fc11 	bl	8001298 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	; 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40013000 	.word	0x40013000
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000

08000a8c <SpiInOut>:
}

/* USER CODE BEGIN 1 */

uint16_t SpiInOut( Spi_t *obj, uint16_t outData )
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	460b      	mov	r3, r1
 8000a96:	807b      	strh	r3, [r7, #2]
    uint8_t rxData = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	73fb      	strb	r3, [r7, #15]

    if( ( obj == NULL ) || ( hspi1.Instance ) == NULL )
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
    {
        assert_param( LMN_STATUS_ERROR );
    }

    __HAL_SPI_ENABLE( &hspi1 );
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <SpiInOut+0x78>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <SpiInOut+0x78>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000aae:	601a      	str	r2, [r3, #0]

    CRITICAL_SECTION_BEGIN( );
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f006 fed7 	bl	8007868 <BoardCriticalSectionBegin>

    while( __HAL_SPI_GET_FLAG( &hspi1, SPI_FLAG_TXE ) == RESET );
 8000aba:	bf00      	nop
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <SpiInOut+0x78>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d1f8      	bne.n	8000abc <SpiInOut+0x30>
    hspi1.Instance->DR = ( uint16_t ) ( outData & 0xFF );
 8000aca:	887a      	ldrh	r2, [r7, #2]
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <SpiInOut+0x78>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	60da      	str	r2, [r3, #12]

    while( __HAL_SPI_GET_FLAG( &hspi1, SPI_FLAG_RXNE ) == RESET );
 8000ad4:	bf00      	nop
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <SpiInOut+0x78>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d1f8      	bne.n	8000ad6 <SpiInOut+0x4a>
    rxData = ( uint16_t ) hspi1.Instance->DR;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <SpiInOut+0x78>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	73fb      	strb	r3, [r7, #15]

    CRITICAL_SECTION_END( );
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	4618      	mov	r0, r3
 8000af2:	f006 feca 	bl	800788a <BoardCriticalSectionEnd>

    return( rxData );
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	b29b      	uxth	r3, r3
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20001290 	.word	0x20001290

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <HAL_MspInit+0x64>)
 8000b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b12:	4a16      	ldr	r2, [pc, #88]	; (8000b6c <HAL_MspInit+0x64>)
 8000b14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b18:	6253      	str	r3, [r2, #36]	; 0x24
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <HAL_MspInit+0x64>)
 8000b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <HAL_MspInit+0x64>)
 8000b28:	6a1b      	ldr	r3, [r3, #32]
 8000b2a:	4a10      	ldr	r2, [pc, #64]	; (8000b6c <HAL_MspInit+0x64>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6213      	str	r3, [r2, #32]
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <HAL_MspInit+0x64>)
 8000b34:	6a1b      	ldr	r3, [r3, #32]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <HAL_MspInit+0x64>)
 8000b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <HAL_MspInit+0x64>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	6253      	str	r3, [r2, #36]	; 0x24
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_MspInit+0x64>)
 8000b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	210f      	movs	r1, #15
 8000b5a:	f06f 0001 	mvn.w	r0, #1
 8000b5e:	f000 fb30 	bl	80011c2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08c      	sub	sp, #48	; 0x30
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	201c      	movs	r0, #28
 8000b86:	f000 fb1c 	bl	80011c2 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b8a:	201c      	movs	r0, #28
 8000b8c:	f000 fb35 	bl	80011fa <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000b90:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <HAL_InitTick+0xa0>)
 8000b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b94:	4a1e      	ldr	r2, [pc, #120]	; (8000c10 <HAL_InitTick+0xa0>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	6253      	str	r3, [r2, #36]	; 0x24
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <HAL_InitTick+0xa0>)
 8000b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ba8:	f107 0210 	add.w	r2, r7, #16
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f001 fac4 	bl	8002140 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bb8:	f001 fa9a 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8000bbc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc0:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <HAL_InitTick+0xa4>)
 8000bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc6:	0c9b      	lsrs	r3, r3, #18
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0xa8>)
 8000bce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bd2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000bd4:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_InitTick+0xa8>)
 8000bd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bda:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <HAL_InitTick+0xa8>)
 8000bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <HAL_InitTick+0xa8>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_InitTick+0xa8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000bee:	480a      	ldr	r0, [pc, #40]	; (8000c18 <HAL_InitTick+0xa8>)
 8000bf0:	f002 f9ed 	bl	8002fce <HAL_TIM_Base_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d104      	bne.n	8000c04 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000bfa:	4807      	ldr	r0, [pc, #28]	; (8000c18 <HAL_InitTick+0xa8>)
 8000bfc:	f002 fa30 	bl	8003060 <HAL_TIM_Base_Start_IT>
 8000c00:	4603      	mov	r3, r0
 8000c02:	e000      	b.n	8000c06 <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3730      	adds	r7, #48	; 0x30
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800
 8000c14:	431bde83 	.word	0x431bde83
 8000c18:	200012e8 	.word	0x200012e8

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <NMI_Handler+0x4>

08000c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <MemManage_Handler+0x4>

08000c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c4a:	2020      	movs	r0, #32
 8000c4c:	f000 fcfc 	bl	8001648 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000c50:	2040      	movs	r0, #64	; 0x40
 8000c52:	f000 fcf9 	bl	8001648 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000c56:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c5a:	f000 fcf5 	bl	8001648 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000c5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c62:	f000 fcf1 	bl	8001648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <TIM2_IRQHandler+0x10>)
 8000c72:	f002 fa47 	bl	8003104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200012e8 	.word	0x200012e8

08000c80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <USART2_IRQHandler+0x10>)
 8000c86:	f002 fc93 	bl	80035b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20001328 	.word	0x20001328

08000c94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000c98:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c9c:	f000 fcd4 	bl	8001648 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000ca0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000ca4:	f000 fcd0 	bl	8001648 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ca8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cac:	f000 fccc 	bl	8001648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&RtcHandle);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <RTC_Alarm_IRQHandler+0x10>)
 8000cba:	f001 ffef 	bl	8002c9c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
#endif
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20001214 	.word	0x20001214

08000cc8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e00a      	b.n	8000cf0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cda:	f3af 8000 	nop.w
 8000cde:	4601      	mov	r1, r0
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	60ba      	str	r2, [r7, #8]
 8000ce6:	b2ca      	uxtb	r2, r1
 8000ce8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbf0      	blt.n	8000cda <_read+0x12>
	}

return len;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	e009      	b.n	8000d28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	60ba      	str	r2, [r7, #8]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbf1      	blt.n	8000d14 <_write+0x12>
	}
	return len;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_close>:

int _close(int file)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	return -1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d60:	605a      	str	r2, [r3, #4]
	return 0;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <_isatty>:

int _isatty(int file)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
	return 1;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b085      	sub	sp, #20
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
	return 0;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
	...

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f007 fdfe 	bl	80089cc <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20014000 	.word	0x20014000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	20000300 	.word	0x20000300
 8000e04:	200014f0 	.word	0x200014f0

08000e08 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <SystemInit+0x14>)
 8000e0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e12:	609a      	str	r2, [r3, #8]
#endif
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_USART2_UART_Init+0x4c>)
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <MX_USART2_UART_Init+0x50>)
 8000e28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <MX_USART2_UART_Init+0x4c>)
 8000e2c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000e30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <MX_USART2_UART_Init+0x4c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <MX_USART2_UART_Init+0x4c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <MX_USART2_UART_Init+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <MX_USART2_UART_Init+0x4c>)
 8000e46:	220c      	movs	r2, #12
 8000e48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <MX_USART2_UART_Init+0x4c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <MX_USART2_UART_Init+0x4c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_USART2_UART_Init+0x4c>)
 8000e58:	f002 fac4 	bl	80033e4 <HAL_UART_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e62:	f7ff fcea 	bl	800083a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20001328 	.word	0x20001328
 8000e70:	40004400 	.word	0x40004400

08000e74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <HAL_UART_MspInit+0x8c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d12f      	bne.n	8000ef6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <HAL_UART_MspInit+0x90>)
 8000e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9a:	4a1a      	ldr	r2, [pc, #104]	; (8000f04 <HAL_UART_MspInit+0x90>)
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	6253      	str	r3, [r2, #36]	; 0x24
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <HAL_UART_MspInit+0x90>)
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_UART_MspInit+0x90>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <HAL_UART_MspInit+0x90>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	61d3      	str	r3, [r2, #28]
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_UART_MspInit+0x90>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ed6:	2307      	movs	r3, #7
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <HAL_UART_MspInit+0x94>)
 8000ee2:	f000 f9d9 	bl	8001298 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2105      	movs	r1, #5
 8000eea:	2026      	movs	r0, #38	; 0x26
 8000eec:	f000 f969 	bl	80011c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ef0:	2026      	movs	r0, #38	; 0x26
 8000ef2:	f000 f982 	bl	80011fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	; 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40004400 	.word	0x40004400
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020000 	.word	0x40020000

08000f0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f0c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f0e:	e003      	b.n	8000f18 <LoopCopyDataInit>

08000f10 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f12:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f14:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f16:	3104      	adds	r1, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f18:	480a      	ldr	r0, [pc, #40]	; (8000f44 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f1c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f1e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f20:	d3f6      	bcc.n	8000f10 <CopyDataInit>
  ldr r2, =_sbss
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f24:	e002      	b.n	8000f2c <LoopFillZerobss>

08000f26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f28:	f842 3b04 	str.w	r3, [r2], #4

08000f2c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f2e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f30:	d3f9      	bcc.n	8000f26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f32:	f7ff ff69 	bl	8000e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f36:	f007 fd4f 	bl	80089d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f3a:	f7ff fbf6 	bl	800072a <main>
  bx lr
 8000f3e:	4770      	bx	lr
  ldr r3, =_sidata
 8000f40:	08009f90 	.word	0x08009f90
  ldr r0, =_sdata
 8000f44:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f48:	20000090 	.word	0x20000090
  ldr r2, =_sbss
 8000f4c:	20000090 	.word	0x20000090
  ldr r3, = _ebss
 8000f50:	200014ec 	.word	0x200014ec

08000f54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f54:	e7fe      	b.n	8000f54 <ADC1_IRQHandler>

08000f56 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 f923 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff fe02 	bl	8000b70 <HAL_InitTick>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d002      	beq.n	8000f78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	71fb      	strb	r3, [r7, #7]
 8000f76:	e001      	b.n	8000f7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f78:	f7ff fdc6 	bl	8000b08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <HAL_IncTick+0x1c>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4413      	add	r3, r2
 8000f96:	4a03      	ldr	r2, [pc, #12]	; (8000fa4 <HAL_IncTick+0x1c>)
 8000f98:	6013      	str	r3, [r2, #0]
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20001368 	.word	0x20001368
 8000fa8:	20000008 	.word	0x20000008

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b02      	ldr	r3, [pc, #8]	; (8000fbc <HAL_GetTick+0x10>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	20001368 	.word	0x20001368

08000fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc8:	f7ff fff0 	bl	8000fac <HAL_GetTick>
 8000fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd8:	d004      	beq.n	8000fe4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <HAL_Delay+0x40>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fe4:	bf00      	nop
 8000fe6:	f7ff ffe1 	bl	8000fac <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d8f7      	bhi.n	8000fe6 <HAL_Delay+0x26>
  {
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000008 	.word	0x20000008

08001004 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	4a03      	ldr	r2, [pc, #12]	; (800101c <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6053      	str	r3, [r2, #4]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	e0042000 	.word	0xe0042000

08001020 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	4a03      	ldr	r2, [pc, #12]	; (8001038 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	6053      	str	r3, [r2, #4]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	e0042000 	.word	0xe0042000

0800103c <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	4a03      	ldr	r2, [pc, #12]	; (8001054 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8001046:	f043 0304 	orr.w	r3, r3, #4
 800104a:	6053      	str	r3, [r2, #4]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	e0042000 	.word	0xe0042000

08001058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001074:	4013      	ands	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	60d3      	str	r3, [r2, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <__NVIC_GetPriorityGrouping+0x18>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	f003 0307 	and.w	r3, r3, #7
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	db0b      	blt.n	80010e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f003 021f 	and.w	r2, r3, #31
 80010d4:	4906      	ldr	r1, [pc, #24]	; (80010f0 <__NVIC_EnableIRQ+0x34>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	095b      	lsrs	r3, r3, #5
 80010dc:	2001      	movs	r0, #1
 80010de:	fa00 f202 	lsl.w	r2, r0, r2
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	e000e100 	.word	0xe000e100

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	; (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff4f 	bl	8001058 <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff64 	bl	80010a0 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ffb2 	bl	8001148 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff81 	bl	80010f4 <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff57 	bl	80010bc <__NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d005      	beq.n	800123a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2204      	movs	r2, #4
 8001232:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e029      	b.n	800128e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 020e 	bic.w	r2, r2, #14
 8001248:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 0201 	bic.w	r2, r2, #1
 8001258:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 021c 	and.w	r2, r3, #28
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001266:	2101      	movs	r1, #1
 8001268:	fa01 f202 	lsl.w	r2, r1, r2
 800126c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	4798      	blx	r3
    }
  }
  return status;
 800128e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80012ae:	e160      	b.n	8001572 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2101      	movs	r1, #1
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	4013      	ands	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 8152 	beq.w	800156c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d00b      	beq.n	80012e8 <HAL_GPIO_Init+0x50>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d007      	beq.n	80012e8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012dc:	2b11      	cmp	r3, #17
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b12      	cmp	r3, #18
 80012e6:	d130      	bne.n	800134a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800131e:	2201      	movs	r2, #1
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	f003 0201 	and.w	r2, r3, #1
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0xf2>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b12      	cmp	r3, #18
 8001388:	d123      	bne.n	80013d2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	08da      	lsrs	r2, r3, #3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3208      	adds	r2, #8
 8001392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001396:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	691a      	ldr	r2, [r3, #16]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	08da      	lsrs	r2, r3, #3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3208      	adds	r2, #8
 80013cc:	6939      	ldr	r1, [r7, #16]
 80013ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2203      	movs	r2, #3
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0203 	and.w	r2, r3, #3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 80ac 	beq.w	800156c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001414:	4b5e      	ldr	r3, [pc, #376]	; (8001590 <HAL_GPIO_Init+0x2f8>)
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	4a5d      	ldr	r2, [pc, #372]	; (8001590 <HAL_GPIO_Init+0x2f8>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6213      	str	r3, [r2, #32]
 8001420:	4b5b      	ldr	r3, [pc, #364]	; (8001590 <HAL_GPIO_Init+0x2f8>)
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800142c:	4a59      	ldr	r2, [pc, #356]	; (8001594 <HAL_GPIO_Init+0x2fc>)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	3302      	adds	r3, #2
 8001434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001438:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	220f      	movs	r2, #15
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a51      	ldr	r2, [pc, #324]	; (8001598 <HAL_GPIO_Init+0x300>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d025      	beq.n	80014a4 <HAL_GPIO_Init+0x20c>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a50      	ldr	r2, [pc, #320]	; (800159c <HAL_GPIO_Init+0x304>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d01f      	beq.n	80014a0 <HAL_GPIO_Init+0x208>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a4f      	ldr	r2, [pc, #316]	; (80015a0 <HAL_GPIO_Init+0x308>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d019      	beq.n	800149c <HAL_GPIO_Init+0x204>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a4e      	ldr	r2, [pc, #312]	; (80015a4 <HAL_GPIO_Init+0x30c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d013      	beq.n	8001498 <HAL_GPIO_Init+0x200>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a4d      	ldr	r2, [pc, #308]	; (80015a8 <HAL_GPIO_Init+0x310>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d00d      	beq.n	8001494 <HAL_GPIO_Init+0x1fc>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a4c      	ldr	r2, [pc, #304]	; (80015ac <HAL_GPIO_Init+0x314>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d007      	beq.n	8001490 <HAL_GPIO_Init+0x1f8>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a4b      	ldr	r2, [pc, #300]	; (80015b0 <HAL_GPIO_Init+0x318>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d101      	bne.n	800148c <HAL_GPIO_Init+0x1f4>
 8001488:	2306      	movs	r3, #6
 800148a:	e00c      	b.n	80014a6 <HAL_GPIO_Init+0x20e>
 800148c:	2307      	movs	r3, #7
 800148e:	e00a      	b.n	80014a6 <HAL_GPIO_Init+0x20e>
 8001490:	2305      	movs	r3, #5
 8001492:	e008      	b.n	80014a6 <HAL_GPIO_Init+0x20e>
 8001494:	2304      	movs	r3, #4
 8001496:	e006      	b.n	80014a6 <HAL_GPIO_Init+0x20e>
 8001498:	2303      	movs	r3, #3
 800149a:	e004      	b.n	80014a6 <HAL_GPIO_Init+0x20e>
 800149c:	2302      	movs	r3, #2
 800149e:	e002      	b.n	80014a6 <HAL_GPIO_Init+0x20e>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <HAL_GPIO_Init+0x20e>
 80014a4:	2300      	movs	r3, #0
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	f002 0203 	and.w	r2, r2, #3
 80014ac:	0092      	lsls	r2, r2, #2
 80014ae:	4093      	lsls	r3, r2
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014b6:	4937      	ldr	r1, [pc, #220]	; (8001594 <HAL_GPIO_Init+0x2fc>)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	3302      	adds	r3, #2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c4:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <HAL_GPIO_Init+0x31c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014e8:	4a32      	ldr	r2, [pc, #200]	; (80015b4 <HAL_GPIO_Init+0x31c>)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014ee:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <HAL_GPIO_Init+0x31c>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001512:	4a28      	ldr	r2, [pc, #160]	; (80015b4 <HAL_GPIO_Init+0x31c>)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001518:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <HAL_GPIO_Init+0x31c>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800153c:	4a1d      	ldr	r2, [pc, #116]	; (80015b4 <HAL_GPIO_Init+0x31c>)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <HAL_GPIO_Init+0x31c>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001566:	4a13      	ldr	r2, [pc, #76]	; (80015b4 <HAL_GPIO_Init+0x31c>)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	3301      	adds	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	fa22 f303 	lsr.w	r3, r2, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	f47f ae97 	bne.w	80012b0 <HAL_GPIO_Init+0x18>
  }
}
 8001582:	bf00      	nop
 8001584:	bf00      	nop
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40010000 	.word	0x40010000
 8001598:	40020000 	.word	0x40020000
 800159c:	40020400 	.word	0x40020400
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40020c00 	.word	0x40020c00
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40021400 	.word	0x40021400
 80015b0:	40021800 	.word	0x40021800
 80015b4:	40010400 	.word	0x40010400

080015b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	887b      	ldrh	r3, [r7, #2]
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	e001      	b.n	80015da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	460b      	mov	r3, r1
 80015f0:	807b      	strh	r3, [r7, #2]
 80015f2:	4613      	mov	r3, r2
 80015f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015f6:	787b      	ldrb	r3, [r7, #1]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015fc:	887a      	ldrh	r2, [r7, #2]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001602:	e003      	b.n	800160c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001604:	887b      	ldrh	r3, [r7, #2]
 8001606:	041a      	lsls	r2, r3, #16
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	619a      	str	r2, [r3, #24]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001616:	b480      	push	{r7}
 8001618:	b085      	sub	sp, #20
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	460b      	mov	r3, r1
 8001620:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001628:	887a      	ldrh	r2, [r7, #2]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4013      	ands	r3, r2
 800162e:	041a      	lsls	r2, r3, #16
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43d9      	mvns	r1, r3
 8001634:	887b      	ldrh	r3, [r7, #2]
 8001636:	400b      	ands	r3, r1
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	619a      	str	r2, [r3, #24]
}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d006      	beq.n	800166c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800165e:	4a05      	ldr	r2, [pc, #20]	; (8001674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	4618      	mov	r0, r3
 8001668:	f006 ff06 	bl	8008478 <HAL_GPIO_EXTI_Callback>
  }
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40010400 	.word	0x40010400

08001678 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e31d      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800168a:	4b94      	ldr	r3, [pc, #592]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001694:	4b91      	ldr	r3, [pc, #580]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d07b      	beq.n	80017a2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d006      	beq.n	80016be <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b0c      	cmp	r3, #12
 80016b4:	d10f      	bne.n	80016d6 <HAL_RCC_OscConfig+0x5e>
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016bc:	d10b      	bne.n	80016d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016be:	4b87      	ldr	r3, [pc, #540]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d06a      	beq.n	80017a0 <HAL_RCC_OscConfig+0x128>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d166      	bne.n	80017a0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e2f7      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d106      	bne.n	80016ec <HAL_RCC_OscConfig+0x74>
 80016de:	4b7f      	ldr	r3, [pc, #508]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a7e      	ldr	r2, [pc, #504]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e02d      	b.n	8001748 <HAL_RCC_OscConfig+0xd0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10c      	bne.n	800170e <HAL_RCC_OscConfig+0x96>
 80016f4:	4b79      	ldr	r3, [pc, #484]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a78      	ldr	r2, [pc, #480]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 80016fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b76      	ldr	r3, [pc, #472]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a75      	ldr	r2, [pc, #468]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 8001706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	e01c      	b.n	8001748 <HAL_RCC_OscConfig+0xd0>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b05      	cmp	r3, #5
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0xb8>
 8001716:	4b71      	ldr	r3, [pc, #452]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a70      	ldr	r2, [pc, #448]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b6e      	ldr	r3, [pc, #440]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a6d      	ldr	r2, [pc, #436]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0xd0>
 8001730:	4b6a      	ldr	r3, [pc, #424]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a69      	ldr	r2, [pc, #420]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 8001736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b67      	ldr	r3, [pc, #412]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a66      	ldr	r2, [pc, #408]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 8001742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fc2c 	bl	8000fac <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fc28 	bl	8000fac <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e2ad      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800176a:	4b5c      	ldr	r3, [pc, #368]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0xe0>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fc18 	bl	8000fac <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fc14 	bl	8000fac <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e299      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001792:	4b52      	ldr	r3, [pc, #328]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x108>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d05a      	beq.n	8001864 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2b0c      	cmp	r3, #12
 80017b8:	d119      	bne.n	80017ee <HAL_RCC_OscConfig+0x176>
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d116      	bne.n	80017ee <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c0:	4b46      	ldr	r3, [pc, #280]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_OscConfig+0x160>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e276      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d8:	4b40      	ldr	r3, [pc, #256]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	493d      	ldr	r1, [pc, #244]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ec:	e03a      	b.n	8001864 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d020      	beq.n	8001838 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f6:	4b3a      	ldr	r3, [pc, #232]	; (80018e0 <HAL_RCC_OscConfig+0x268>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff fbd6 	bl	8000fac <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001804:	f7ff fbd2 	bl	8000fac <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e257      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001816:	4b31      	ldr	r3, [pc, #196]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001822:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	492a      	ldr	r1, [pc, #168]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]
 8001836:	e015      	b.n	8001864 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <HAL_RCC_OscConfig+0x268>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7ff fbb5 	bl	8000fac <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001846:	f7ff fbb1 	bl	8000fac <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e236      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001858:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f0      	bne.n	8001846 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80b8 	beq.w	80019e2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d170      	bne.n	800195a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001878:	4b18      	ldr	r3, [pc, #96]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_OscConfig+0x218>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e21a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1a      	ldr	r2, [r3, #32]
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800189c:	429a      	cmp	r2, r3
 800189e:	d921      	bls.n	80018e4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fc7b 	bl	80021a0 <RCC_SetFlashLatencyFromMSIRange>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e208      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	4906      	ldr	r1, [pc, #24]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	061b      	lsls	r3, r3, #24
 80018d4:	4901      	ldr	r1, [pc, #4]	; (80018dc <HAL_RCC_OscConfig+0x264>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	604b      	str	r3, [r1, #4]
 80018da:	e020      	b.n	800191e <HAL_RCC_OscConfig+0x2a6>
 80018dc:	40023800 	.word	0x40023800
 80018e0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e4:	4ba4      	ldr	r3, [pc, #656]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	49a1      	ldr	r1, [pc, #644]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f6:	4ba0      	ldr	r3, [pc, #640]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	061b      	lsls	r3, r3, #24
 8001904:	499c      	ldr	r1, [pc, #624]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001906:	4313      	orrs	r3, r2
 8001908:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4618      	mov	r0, r3
 8001910:	f000 fc46 	bl	80021a0 <RCC_SetFlashLatencyFromMSIRange>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e1d3      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	0b5b      	lsrs	r3, r3, #13
 8001924:	3301      	adds	r3, #1
 8001926:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800192e:	4a92      	ldr	r2, [pc, #584]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001930:	6892      	ldr	r2, [r2, #8]
 8001932:	0912      	lsrs	r2, r2, #4
 8001934:	f002 020f 	and.w	r2, r2, #15
 8001938:	4990      	ldr	r1, [pc, #576]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 800193a:	5c8a      	ldrb	r2, [r1, r2]
 800193c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800193e:	4a90      	ldr	r2, [pc, #576]	; (8001b80 <HAL_RCC_OscConfig+0x508>)
 8001940:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001942:	4b90      	ldr	r3, [pc, #576]	; (8001b84 <HAL_RCC_OscConfig+0x50c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff f912 	bl	8000b70 <HAL_InitTick>
 800194c:	4603      	mov	r3, r0
 800194e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d045      	beq.n	80019e2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	e1b5      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d029      	beq.n	80019b6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001962:	4b89      	ldr	r3, [pc, #548]	; (8001b88 <HAL_RCC_OscConfig+0x510>)
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fb20 	bl	8000fac <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001970:	f7ff fb1c 	bl	8000fac <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e1a1      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001982:	4b7d      	ldr	r3, [pc, #500]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800198e:	4b7a      	ldr	r3, [pc, #488]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	4977      	ldr	r1, [pc, #476]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a0:	4b75      	ldr	r3, [pc, #468]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	061b      	lsls	r3, r3, #24
 80019ae:	4972      	ldr	r1, [pc, #456]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
 80019b4:	e015      	b.n	80019e2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019b6:	4b74      	ldr	r3, [pc, #464]	; (8001b88 <HAL_RCC_OscConfig+0x510>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff faf6 	bl	8000fac <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019c4:	f7ff faf2 	bl	8000fac <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e177      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019d6:	4b68      	ldr	r3, [pc, #416]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d030      	beq.n	8001a50 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d016      	beq.n	8001a24 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f6:	4b65      	ldr	r3, [pc, #404]	; (8001b8c <HAL_RCC_OscConfig+0x514>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fc:	f7ff fad6 	bl	8000fac <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a04:	f7ff fad2 	bl	8000fac <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e157      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a16:	4b58      	ldr	r3, [pc, #352]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0x38c>
 8001a22:	e015      	b.n	8001a50 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a24:	4b59      	ldr	r3, [pc, #356]	; (8001b8c <HAL_RCC_OscConfig+0x514>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2a:	f7ff fabf 	bl	8000fac <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a32:	f7ff fabb 	bl	8000fac <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e140      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a44:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80b5 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a62:	4b45      	ldr	r3, [pc, #276]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10d      	bne.n	8001a8a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	4b42      	ldr	r3, [pc, #264]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	4a41      	ldr	r2, [pc, #260]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a78:	6253      	str	r3, [r2, #36]	; 0x24
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a86:	2301      	movs	r3, #1
 8001a88:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8a:	4b41      	ldr	r3, [pc, #260]	; (8001b90 <HAL_RCC_OscConfig+0x518>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d118      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a96:	4b3e      	ldr	r3, [pc, #248]	; (8001b90 <HAL_RCC_OscConfig+0x518>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a3d      	ldr	r2, [pc, #244]	; (8001b90 <HAL_RCC_OscConfig+0x518>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff fa83 	bl	8000fac <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aaa:	f7ff fa7f 	bl	8000fac <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b64      	cmp	r3, #100	; 0x64
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e104      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abc:	4b34      	ldr	r3, [pc, #208]	; (8001b90 <HAL_RCC_OscConfig+0x518>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d106      	bne.n	8001ade <HAL_RCC_OscConfig+0x466>
 8001ad0:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad4:	4a28      	ldr	r2, [pc, #160]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6353      	str	r3, [r2, #52]	; 0x34
 8001adc:	e02d      	b.n	8001b3a <HAL_RCC_OscConfig+0x4c2>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x488>
 8001ae6:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aea:	4a23      	ldr	r2, [pc, #140]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001af0:	6353      	str	r3, [r2, #52]	; 0x34
 8001af2:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af6:	4a20      	ldr	r2, [pc, #128]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001af8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001afc:	6353      	str	r3, [r2, #52]	; 0x34
 8001afe:	e01c      	b.n	8001b3a <HAL_RCC_OscConfig+0x4c2>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b05      	cmp	r3, #5
 8001b06:	d10c      	bne.n	8001b22 <HAL_RCC_OscConfig+0x4aa>
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0c:	4a1a      	ldr	r2, [pc, #104]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b12:	6353      	str	r3, [r2, #52]	; 0x34
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b18:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1e:	6353      	str	r3, [r2, #52]	; 0x34
 8001b20:	e00b      	b.n	8001b3a <HAL_RCC_OscConfig+0x4c2>
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b26:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b2c:	6353      	str	r3, [r2, #52]	; 0x34
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b32:	4a11      	ldr	r2, [pc, #68]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001b34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b38:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d015      	beq.n	8001b6e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b42:	f7ff fa33 	bl	8000fac <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7ff fa2f 	bl	8000fac <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e0b2      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HAL_RCC_OscConfig+0x500>)
 8001b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0ee      	beq.n	8001b4a <HAL_RCC_OscConfig+0x4d2>
 8001b6c:	e023      	b.n	8001bb6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fa1d 	bl	8000fac <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b74:	e019      	b.n	8001baa <HAL_RCC_OscConfig+0x532>
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	08009d6c 	.word	0x08009d6c
 8001b80:	20000000 	.word	0x20000000
 8001b84:	20000004 	.word	0x20000004
 8001b88:	42470020 	.word	0x42470020
 8001b8c:	42470680 	.word	0x42470680
 8001b90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b94:	f7ff fa0a 	bl	8000fac <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e08d      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001baa:	4b49      	ldr	r3, [pc, #292]	; (8001cd0 <HAL_RCC_OscConfig+0x658>)
 8001bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1ee      	bne.n	8001b94 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bb6:	7ffb      	ldrb	r3, [r7, #31]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d105      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bbc:	4b44      	ldr	r3, [pc, #272]	; (8001cd0 <HAL_RCC_OscConfig+0x658>)
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	4a43      	ldr	r2, [pc, #268]	; (8001cd0 <HAL_RCC_OscConfig+0x658>)
 8001bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d079      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	2b0c      	cmp	r3, #12
 8001bd4:	d056      	beq.n	8001c84 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d13b      	bne.n	8001c56 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_RCC_OscConfig+0x65c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff f9e2 	bl	8000fac <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bec:	f7ff f9de 	bl	8000fac <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e063      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bfe:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <HAL_RCC_OscConfig+0x658>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c0a:	4b31      	ldr	r3, [pc, #196]	; (8001cd0 <HAL_RCC_OscConfig+0x658>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	4319      	orrs	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	430b      	orrs	r3, r1
 8001c22:	492b      	ldr	r1, [pc, #172]	; (8001cd0 <HAL_RCC_OscConfig+0x658>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c28:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <HAL_RCC_OscConfig+0x65c>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7ff f9bd 	bl	8000fac <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c36:	f7ff f9b9 	bl	8000fac <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e03e      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c48:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <HAL_RCC_OscConfig+0x658>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x5be>
 8001c54:	e036      	b.n	8001cc4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c56:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <HAL_RCC_OscConfig+0x65c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff f9a6 	bl	8000fac <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c64:	f7ff f9a2 	bl	8000fac <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e027      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c76:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_RCC_OscConfig+0x658>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x5ec>
 8001c82:	e01f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e01a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <HAL_RCC_OscConfig+0x658>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d10d      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d106      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3720      	adds	r7, #32
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	42470060 	.word	0x42470060

08001cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e11a      	b.n	8001f22 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cec:	4b8f      	ldr	r3, [pc, #572]	; (8001f2c <HAL_RCC_ClockConfig+0x254>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d919      	bls.n	8001d2e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d105      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x34>
 8001d00:	4b8a      	ldr	r3, [pc, #552]	; (8001f2c <HAL_RCC_ClockConfig+0x254>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a89      	ldr	r2, [pc, #548]	; (8001f2c <HAL_RCC_ClockConfig+0x254>)
 8001d06:	f043 0304 	orr.w	r3, r3, #4
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	4b87      	ldr	r3, [pc, #540]	; (8001f2c <HAL_RCC_ClockConfig+0x254>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 0201 	bic.w	r2, r3, #1
 8001d14:	4985      	ldr	r1, [pc, #532]	; (8001f2c <HAL_RCC_ClockConfig+0x254>)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1c:	4b83      	ldr	r3, [pc, #524]	; (8001f2c <HAL_RCC_ClockConfig+0x254>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0f9      	b.n	8001f22 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d008      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3a:	4b7d      	ldr	r3, [pc, #500]	; (8001f30 <HAL_RCC_ClockConfig+0x258>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	497a      	ldr	r1, [pc, #488]	; (8001f30 <HAL_RCC_ClockConfig+0x258>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 808e 	beq.w	8001e76 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d62:	4b73      	ldr	r3, [pc, #460]	; (8001f30 <HAL_RCC_ClockConfig+0x258>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d121      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e0d7      	b.n	8001f22 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d107      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d7a:	4b6d      	ldr	r3, [pc, #436]	; (8001f30 <HAL_RCC_ClockConfig+0x258>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d115      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e0cb      	b.n	8001f22 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d107      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d92:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <HAL_RCC_ClockConfig+0x258>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d109      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e0bf      	b.n	8001f22 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001da2:	4b63      	ldr	r3, [pc, #396]	; (8001f30 <HAL_RCC_ClockConfig+0x258>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e0b7      	b.n	8001f22 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db2:	4b5f      	ldr	r3, [pc, #380]	; (8001f30 <HAL_RCC_ClockConfig+0x258>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f023 0203 	bic.w	r2, r3, #3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	495c      	ldr	r1, [pc, #368]	; (8001f30 <HAL_RCC_ClockConfig+0x258>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dc4:	f7ff f8f2 	bl	8000fac <HAL_GetTick>
 8001dc8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d112      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd4:	f7ff f8ea 	bl	8000fac <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e09b      	b.n	8001f22 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dea:	4b51      	ldr	r3, [pc, #324]	; (8001f30 <HAL_RCC_ClockConfig+0x258>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d1ee      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0xfc>
 8001df6:	e03e      	b.n	8001e76 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d112      	bne.n	8001e26 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e00:	e00a      	b.n	8001e18 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e02:	f7ff f8d3 	bl	8000fac <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e084      	b.n	8001f22 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e18:	4b45      	ldr	r3, [pc, #276]	; (8001f30 <HAL_RCC_ClockConfig+0x258>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b0c      	cmp	r3, #12
 8001e22:	d1ee      	bne.n	8001e02 <HAL_RCC_ClockConfig+0x12a>
 8001e24:	e027      	b.n	8001e76 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d11d      	bne.n	8001e6a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e2e:	e00a      	b.n	8001e46 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e30:	f7ff f8bc 	bl	8000fac <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e06d      	b.n	8001f22 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e46:	4b3a      	ldr	r3, [pc, #232]	; (8001f30 <HAL_RCC_ClockConfig+0x258>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d1ee      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x158>
 8001e52:	e010      	b.n	8001e76 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e54:	f7ff f8aa 	bl	8000fac <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e05b      	b.n	8001f22 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e6a:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <HAL_RCC_ClockConfig+0x258>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1ee      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e76:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <HAL_RCC_ClockConfig+0x254>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d219      	bcs.n	8001eb8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d105      	bne.n	8001e96 <HAL_RCC_ClockConfig+0x1be>
 8001e8a:	4b28      	ldr	r3, [pc, #160]	; (8001f2c <HAL_RCC_ClockConfig+0x254>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a27      	ldr	r2, [pc, #156]	; (8001f2c <HAL_RCC_ClockConfig+0x254>)
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <HAL_RCC_ClockConfig+0x254>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 0201 	bic.w	r2, r3, #1
 8001e9e:	4923      	ldr	r1, [pc, #140]	; (8001f2c <HAL_RCC_ClockConfig+0x254>)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <HAL_RCC_ClockConfig+0x254>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e034      	b.n	8001f22 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_RCC_ClockConfig+0x258>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	4917      	ldr	r1, [pc, #92]	; (8001f30 <HAL_RCC_ClockConfig+0x258>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d009      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_RCC_ClockConfig+0x258>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	490f      	ldr	r1, [pc, #60]	; (8001f30 <HAL_RCC_ClockConfig+0x258>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ef6:	f000 f823 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 8001efa:	4602      	mov	r2, r0
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <HAL_RCC_ClockConfig+0x258>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	490b      	ldr	r1, [pc, #44]	; (8001f34 <HAL_RCC_ClockConfig+0x25c>)
 8001f08:	5ccb      	ldrb	r3, [r1, r3]
 8001f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fe2a 	bl	8000b70 <HAL_InitTick>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f20:	7afb      	ldrb	r3, [r7, #11]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023c00 	.word	0x40023c00
 8001f30:	40023800 	.word	0x40023800
 8001f34:	08009d6c 	.word	0x08009d6c
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	20000004 	.word	0x20000004

08001f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f40:	b5b0      	push	{r4, r5, r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f46:	4b61      	ldr	r3, [pc, #388]	; (80020cc <HAL_RCC_GetSysClockFreq+0x18c>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d00d      	beq.n	8001f72 <HAL_RCC_GetSysClockFreq+0x32>
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	f200 80a4 	bhi.w	80020a4 <HAL_RCC_GetSysClockFreq+0x164>
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d002      	beq.n	8001f66 <HAL_RCC_GetSysClockFreq+0x26>
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d003      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x2c>
 8001f64:	e09e      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f66:	4b5a      	ldr	r3, [pc, #360]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x190>)
 8001f68:	613b      	str	r3, [r7, #16]
      break;
 8001f6a:	e0a9      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f6c:	4b59      	ldr	r3, [pc, #356]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x194>)
 8001f6e:	613b      	str	r3, [r7, #16]
      break;
 8001f70:	e0a6      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	0c9b      	lsrs	r3, r3, #18
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	4a57      	ldr	r2, [pc, #348]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x198>)
 8001f7c:	5cd3      	ldrb	r3, [r2, r3]
 8001f7e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	0d9b      	lsrs	r3, r3, #22
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f8c:	4b4f      	ldr	r3, [pc, #316]	; (80020cc <HAL_RCC_GetSysClockFreq+0x18c>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d041      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	461c      	mov	r4, r3
 8001f9c:	f04f 0500 	mov.w	r5, #0
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	4629      	mov	r1, r5
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	014b      	lsls	r3, r1, #5
 8001fae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fb2:	0142      	lsls	r2, r0, #5
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	1b00      	subs	r0, r0, r4
 8001fba:	eb61 0105 	sbc.w	r1, r1, r5
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	018b      	lsls	r3, r1, #6
 8001fc8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001fcc:	0182      	lsls	r2, r0, #6
 8001fce:	1a12      	subs	r2, r2, r0
 8001fd0:	eb63 0301 	sbc.w	r3, r3, r1
 8001fd4:	f04f 0000 	mov.w	r0, #0
 8001fd8:	f04f 0100 	mov.w	r1, #0
 8001fdc:	00d9      	lsls	r1, r3, #3
 8001fde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fe2:	00d0      	lsls	r0, r2, #3
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	1912      	adds	r2, r2, r4
 8001fea:	eb45 0303 	adc.w	r3, r5, r3
 8001fee:	f04f 0000 	mov.w	r0, #0
 8001ff2:	f04f 0100 	mov.w	r1, #0
 8001ff6:	0259      	lsls	r1, r3, #9
 8001ff8:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ffc:	0250      	lsls	r0, r2, #9
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	461a      	mov	r2, r3
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	f7fe f8bf 	bl	8000190 <__aeabi_uldivmod>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4613      	mov	r3, r2
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	e040      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	461c      	mov	r4, r3
 8002020:	f04f 0500 	mov.w	r5, #0
 8002024:	4620      	mov	r0, r4
 8002026:	4629      	mov	r1, r5
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	014b      	lsls	r3, r1, #5
 8002032:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002036:	0142      	lsls	r2, r0, #5
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	1b00      	subs	r0, r0, r4
 800203e:	eb61 0105 	sbc.w	r1, r1, r5
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	018b      	lsls	r3, r1, #6
 800204c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002050:	0182      	lsls	r2, r0, #6
 8002052:	1a12      	subs	r2, r2, r0
 8002054:	eb63 0301 	sbc.w	r3, r3, r1
 8002058:	f04f 0000 	mov.w	r0, #0
 800205c:	f04f 0100 	mov.w	r1, #0
 8002060:	00d9      	lsls	r1, r3, #3
 8002062:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002066:	00d0      	lsls	r0, r2, #3
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	1912      	adds	r2, r2, r4
 800206e:	eb45 0303 	adc.w	r3, r5, r3
 8002072:	f04f 0000 	mov.w	r0, #0
 8002076:	f04f 0100 	mov.w	r1, #0
 800207a:	0299      	lsls	r1, r3, #10
 800207c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002080:	0290      	lsls	r0, r2, #10
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	461a      	mov	r2, r3
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	f7fe f87d 	bl	8000190 <__aeabi_uldivmod>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4613      	mov	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	613b      	str	r3, [r7, #16]
      break;
 80020a2:	e00d      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_RCC_GetSysClockFreq+0x18c>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	0b5b      	lsrs	r3, r3, #13
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	3301      	adds	r3, #1
 80020b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	613b      	str	r3, [r7, #16]
      break;
 80020be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020c0:	693b      	ldr	r3, [r7, #16]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bdb0      	pop	{r4, r5, r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800
 80020d0:	00f42400 	.word	0x00f42400
 80020d4:	007a1200 	.word	0x007a1200
 80020d8:	08009d60 	.word	0x08009d60

080020dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e0:	4b02      	ldr	r3, [pc, #8]	; (80020ec <HAL_RCC_GetHCLKFreq+0x10>)
 80020e2:	681b      	ldr	r3, [r3, #0]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	20000000 	.word	0x20000000

080020f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020f4:	f7ff fff2 	bl	80020dc <HAL_RCC_GetHCLKFreq>
 80020f8:	4602      	mov	r2, r0
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0a1b      	lsrs	r3, r3, #8
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	4903      	ldr	r1, [pc, #12]	; (8002114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002106:	5ccb      	ldrb	r3, [r1, r3]
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	08009d7c 	.word	0x08009d7c

08002118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800211c:	f7ff ffde 	bl	80020dc <HAL_RCC_GetHCLKFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	0adb      	lsrs	r3, r3, #11
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	4903      	ldr	r1, [pc, #12]	; (800213c <HAL_RCC_GetPCLK2Freq+0x24>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	08009d7c 	.word	0x08009d7c

08002140 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	220f      	movs	r2, #15
 800214e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_RCC_GetClockConfig+0x58>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0203 	and.w	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800215c:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <HAL_RCC_GetClockConfig+0x58>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_GetClockConfig+0x58>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <HAL_RCC_GetClockConfig+0x58>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	08db      	lsrs	r3, r3, #3
 800217a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_RCC_GetClockConfig+0x5c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0201 	and.w	r2, r3, #1
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	601a      	str	r2, [r3, #0]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	40023800 	.word	0x40023800
 800219c:	40023c00 	.word	0x40023c00

080021a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80021ac:	4b29      	ldr	r3, [pc, #164]	; (8002254 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d12c      	bne.n	8002212 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021b8:	4b26      	ldr	r3, [pc, #152]	; (8002254 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80021c4:	4b24      	ldr	r3, [pc, #144]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e016      	b.n	80021fe <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d0:	4b20      	ldr	r3, [pc, #128]	; (8002254 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	4a1f      	ldr	r2, [pc, #124]	; (8002254 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021da:	6253      	str	r3, [r2, #36]	; 0x24
 80021dc:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80021e8:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80021f0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f2:	4b18      	ldr	r3, [pc, #96]	; (8002254 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	4a17      	ldr	r2, [pc, #92]	; (8002254 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021fc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002204:	d105      	bne.n	8002212 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800220c:	d101      	bne.n	8002212 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800220e:	2301      	movs	r3, #1
 8002210:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d105      	bne.n	8002224 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002218:	4b10      	ldr	r3, [pc, #64]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0f      	ldr	r2, [pc, #60]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800221e:	f043 0304 	orr.w	r3, r3, #4
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	4b0d      	ldr	r3, [pc, #52]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f023 0201 	bic.w	r2, r3, #1
 800222c:	490b      	ldr	r1, [pc, #44]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	429a      	cmp	r2, r3
 8002240:	d001      	beq.n	8002246 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800
 8002258:	40007000 	.word	0x40007000
 800225c:	40023c00 	.word	0x40023c00

08002260 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d106      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80c6 	beq.w	800240e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002286:	4b64      	ldr	r3, [pc, #400]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10d      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	4b61      	ldr	r3, [pc, #388]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	4a60      	ldr	r2, [pc, #384]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229c:	6253      	str	r3, [r2, #36]	; 0x24
 800229e:	4b5e      	ldr	r3, [pc, #376]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022aa:	2301      	movs	r3, #1
 80022ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b5b      	ldr	r3, [pc, #364]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d118      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ba:	4b58      	ldr	r3, [pc, #352]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a57      	ldr	r2, [pc, #348]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c6:	f7fe fe71 	bl	8000fac <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	e008      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ce:	f7fe fe6d 	bl	8000fac <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b64      	cmp	r3, #100	; 0x64
 80022da:	d901      	bls.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e097      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	4b4e      	ldr	r3, [pc, #312]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80022ec:	4b4a      	ldr	r3, [pc, #296]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80022f4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	429a      	cmp	r2, r3
 8002302:	d106      	bne.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	429a      	cmp	r2, r3
 8002310:	d00f      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800231a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800231e:	d108      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002320:	4b3d      	ldr	r3, [pc, #244]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002328:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800232c:	d101      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e06e      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002332:	4b39      	ldr	r3, [pc, #228]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002336:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800233a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d041      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	429a      	cmp	r2, r3
 800234e:	d005      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10c      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	429a      	cmp	r2, r3
 8002368:	d02d      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d027      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002376:	4b28      	ldr	r3, [pc, #160]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800237e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002380:	4b27      	ldr	r3, [pc, #156]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002382:	2201      	movs	r2, #1
 8002384:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002386:	4b26      	ldr	r3, [pc, #152]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800238c:	4a22      	ldr	r2, [pc, #136]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d014      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7fe fe06 	bl	8000fac <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023a2:	e00a      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023a4:	f7fe fe02 	bl	8000fac <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e02a      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023ba:	4b17      	ldr	r3, [pc, #92]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0ee      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80023d2:	d10a      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80023d4:	4b10      	ldr	r3, [pc, #64]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80023e4:	490c      	ldr	r1, [pc, #48]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023f6:	4908      	ldr	r1, [pc, #32]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	634b      	str	r3, [r1, #52]	; 0x34

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d105      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	4a04      	ldr	r2, [pc, #16]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240c:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40023800 	.word	0x40023800
 800241c:	40007000 	.word	0x40007000
 8002420:	424706dc 	.word	0x424706dc

08002424 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e06d      	b.n	8002512 <HAL_RTC_Init+0xee>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	7f5b      	ldrb	r3, [r3, #29]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7fe fa8a 	bl	8000960 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	22ca      	movs	r2, #202	; 0xca
 8002458:	625a      	str	r2, [r3, #36]	; 0x24
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2253      	movs	r2, #83	; 0x53
 8002460:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fc8d 	bl	8002d82 <RTC_EnterInitMode>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	22ff      	movs	r2, #255	; 0xff
 8002474:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2204      	movs	r2, #4
 800247a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e048      	b.n	8002512 <HAL_RTC_Init+0xee>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6812      	ldr	r2, [r2, #0]
 800248a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800248e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002492:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6899      	ldr	r1, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68d2      	ldr	r2, [r2, #12]
 80024ba:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6919      	ldr	r1, [r3, #16]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	041a      	lsls	r2, r3, #16
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024de:	60da      	str	r2, [r3, #12]

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024ee:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	22ff      	movs	r2, #255	; 0xff
 8002508:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002510:	2300      	movs	r3, #0
  }
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800251a:	b590      	push	{r4, r7, lr}
 800251c:	b087      	sub	sp, #28
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	7f1b      	ldrb	r3, [r3, #28]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_RTC_SetTime+0x18>
 800252e:	2302      	movs	r3, #2
 8002530:	e0a3      	b.n	800267a <HAL_RTC_SetTime+0x160>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2202      	movs	r2, #2
 800253c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d126      	bne.n	8002592 <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	d102      	bne.n	8002558 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2200      	movs	r2, #0
 8002556:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f000 fc3a 	bl	8002dd6 <RTC_ByteToBcd2>
 8002562:	4603      	mov	r3, r0
 8002564:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	785b      	ldrb	r3, [r3, #1]
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fc33 	bl	8002dd6 <RTC_ByteToBcd2>
 8002570:	4603      	mov	r3, r0
 8002572:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002574:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	789b      	ldrb	r3, [r3, #2]
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fc2b 	bl	8002dd6 <RTC_ByteToBcd2>
 8002580:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002582:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	78db      	ldrb	r3, [r3, #3]
 800258a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	e018      	b.n	80025c4 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2200      	movs	r2, #0
 80025a4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	785b      	ldrb	r3, [r3, #1]
 80025b0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80025b2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80025b8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	78db      	ldrb	r3, [r3, #3]
 80025be:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80025c0:	4313      	orrs	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	22ca      	movs	r2, #202	; 0xca
 80025ca:	625a      	str	r2, [r3, #36]	; 0x24
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2253      	movs	r2, #83	; 0x53
 80025d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 fbd4 	bl	8002d82 <RTC_EnterInitMode>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00b      	beq.n	80025f8 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	22ff      	movs	r2, #255	; 0xff
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2204      	movs	r2, #4
 80025ec:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e040      	b.n	800267a <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002602:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002606:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002616:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6899      	ldr	r1, [r3, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	431a      	orrs	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800263e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 fb71 	bl	8002d28 <HAL_RTC_WaitForSynchro>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00b      	beq.n	8002664 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	22ff      	movs	r2, #255	; 0xff
 8002652:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2204      	movs	r2, #4
 8002658:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e00a      	b.n	800267a <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	22ff      	movs	r2, #255	; 0xff
 800266a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002678:	2300      	movs	r3, #0
  }
}
 800267a:	4618      	mov	r0, r3
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	bd90      	pop	{r4, r7, pc}

08002682 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	b29a      	uxth	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	609a      	str	r2, [r3, #8]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80026b2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80026b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	0c1b      	lsrs	r3, r3, #16
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d11a      	bne.n	8002732 <HAL_RTC_GetTime+0xb0>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fb87 	bl	8002e14 <RTC_Bcd2ToByte>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	785b      	ldrb	r3, [r3, #1]
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fb7e 	bl	8002e14 <RTC_Bcd2ToByte>
 8002718:	4603      	mov	r3, r0
 800271a:	461a      	mov	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	789b      	ldrb	r3, [r3, #2]
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fb75 	bl	8002e14 <RTC_Bcd2ToByte>
 800272a:	4603      	mov	r3, r0
 800272c:	461a      	mov	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	7f1b      	ldrb	r3, [r3, #28]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_RTC_SetDate+0x18>
 8002750:	2302      	movs	r3, #2
 8002752:	e08d      	b.n	8002870 <HAL_RTC_SetDate+0x134>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2202      	movs	r2, #2
 800275e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10e      	bne.n	8002784 <HAL_RTC_SetDate+0x48>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	785b      	ldrb	r3, [r3, #1]
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b00      	cmp	r3, #0
 8002770:	d008      	beq.n	8002784 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	785b      	ldrb	r3, [r3, #1]
 8002776:	f023 0310 	bic.w	r3, r3, #16
 800277a:	b2db      	uxtb	r3, r3
 800277c:	330a      	adds	r3, #10
 800277e:	b2da      	uxtb	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d11c      	bne.n	80027c4 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	78db      	ldrb	r3, [r3, #3]
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fb21 	bl	8002dd6 <RTC_ByteToBcd2>
 8002794:	4603      	mov	r3, r0
 8002796:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	785b      	ldrb	r3, [r3, #1]
 800279c:	4618      	mov	r0, r3
 800279e:	f000 fb1a 	bl	8002dd6 <RTC_ByteToBcd2>
 80027a2:	4603      	mov	r3, r0
 80027a4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80027a6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	789b      	ldrb	r3, [r3, #2]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fb12 	bl	8002dd6 <RTC_ByteToBcd2>
 80027b2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80027b4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e00e      	b.n	80027e2 <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	78db      	ldrb	r3, [r3, #3]
 80027c8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	785b      	ldrb	r3, [r3, #1]
 80027ce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80027d0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80027d6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	22ca      	movs	r2, #202	; 0xca
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2253      	movs	r2, #83	; 0x53
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 fac5 	bl	8002d82 <RTC_EnterInitMode>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	22ff      	movs	r2, #255	; 0xff
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2204      	movs	r2, #4
 800280a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e02c      	b.n	8002870 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002820:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002824:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002834:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 fa76 	bl	8002d28 <HAL_RTC_WaitForSynchro>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	22ff      	movs	r2, #255	; 0xff
 8002848:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2204      	movs	r2, #4
 800284e:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e00a      	b.n	8002870 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	22ff      	movs	r2, #255	; 0xff
 8002860:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2201      	movs	r2, #1
 8002866:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800286e:	2300      	movs	r3, #0
  }
}
 8002870:	4618      	mov	r0, r3
 8002872:	371c      	adds	r7, #28
 8002874:	46bd      	mov	sp, r7
 8002876:	bd90      	pop	{r4, r7, pc}

08002878 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800288e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002892:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	0c1b      	lsrs	r3, r3, #16
 8002898:	b2da      	uxtb	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	0a1b      	lsrs	r3, r3, #8
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	0b5b      	lsrs	r3, r3, #13
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d11a      	bne.n	8002908 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	78db      	ldrb	r3, [r3, #3]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fa9c 	bl	8002e14 <RTC_Bcd2ToByte>
 80028dc:	4603      	mov	r3, r0
 80028de:	461a      	mov	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	785b      	ldrb	r3, [r3, #1]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fa93 	bl	8002e14 <RTC_Bcd2ToByte>
 80028ee:	4603      	mov	r3, r0
 80028f0:	461a      	mov	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	789b      	ldrb	r3, [r3, #2]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fa8a 	bl	8002e14 <RTC_Bcd2ToByte>
 8002900:	4603      	mov	r3, r0
 8002902:	461a      	mov	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b089      	sub	sp, #36	; 0x24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	61fb      	str	r3, [r7, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  uint32_t subsecondtmpreg = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	7f1b      	ldrb	r3, [r3, #28]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_RTC_SetAlarm_IT+0x24>
 8002934:	2302      	movs	r3, #2
 8002936:	e11f      	b.n	8002b78 <HAL_RTC_SetAlarm_IT+0x264>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2201      	movs	r2, #1
 800293c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2202      	movs	r2, #2
 8002942:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d137      	bne.n	80029ba <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2200      	movs	r2, #0
 800295c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f000 fa37 	bl	8002dd6 <RTC_ByteToBcd2>
 8002968:	4603      	mov	r3, r0
 800296a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	785b      	ldrb	r3, [r3, #1]
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fa30 	bl	8002dd6 <RTC_ByteToBcd2>
 8002976:	4603      	mov	r3, r0
 8002978:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800297a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	789b      	ldrb	r3, [r3, #2]
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fa28 	bl	8002dd6 <RTC_ByteToBcd2>
 8002986:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002988:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	78db      	ldrb	r3, [r3, #3]
 8002990:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002992:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fa1a 	bl	8002dd6 <RTC_ByteToBcd2>
 80029a2:	4603      	mov	r3, r0
 80029a4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80029a6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80029ae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61fb      	str	r3, [r7, #28]
 80029b8:	e023      	b.n	8002a02 <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2200      	movs	r2, #0
 80029cc:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	785b      	ldrb	r3, [r3, #1]
 80029d8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80029da:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80029e0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	78db      	ldrb	r3, [r3, #3]
 80029e6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80029e8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80029f2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80029f8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61fb      	str	r3, [r7, #28]
  }
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	22ca      	movs	r2, #202	; 0xca
 8002a14:	625a      	str	r2, [r3, #36]	; 0x24
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2253      	movs	r2, #83	; 0x53
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a26:	d148      	bne.n	8002aba <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a36:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002a48:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002a4a:	f7fe faaf 	bl	8000fac <HAL_GetTick>
 8002a4e:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002a50:	e013      	b.n	8002a7a <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002a52:	f7fe faab 	bl	8000fac <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a60:	d90b      	bls.n	8002a7a <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	22ff      	movs	r2, #255	; 0xff
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e07e      	b.n	8002b78 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0e4      	beq.n	8002a52 <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	e047      	b.n	8002b4a <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ac8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002ada:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002adc:	f7fe fa66 	bl	8000fac <HAL_GetTick>
 8002ae0:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002ae2:	e013      	b.n	8002b0c <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002ae4:	f7fe fa62 	bl	8000fac <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002af2:	d90b      	bls.n	8002b0c <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	22ff      	movs	r2, #255	; 0xff
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2203      	movs	r2, #3
 8002b00:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e035      	b.n	8002b78 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0e4      	beq.n	8002ae4 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69fa      	ldr	r2, [r7, #28]
 8002b20:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b38:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b48:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a0c      	ldr	r2, [pc, #48]	; (8002b80 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b54:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b60:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	22ff      	movs	r2, #255	; 0xff
 8002b68:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3724      	adds	r7, #36	; 0x24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd90      	pop	{r4, r7, pc}
 8002b80:	40010400 	.word	0x40010400

08002b84 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	7f1b      	ldrb	r3, [r3, #28]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_RTC_DeactivateAlarm+0x16>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e07b      	b.n	8002c92 <HAL_RTC_DeactivateAlarm+0x10e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	22ca      	movs	r2, #202	; 0xca
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2253      	movs	r2, #83	; 0x53
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bbc:	d12f      	bne.n	8002c1e <HAL_RTC_DeactivateAlarm+0x9a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bcc:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bdc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8002bde:	f7fe f9e5 	bl	8000fac <HAL_GetTick>
 8002be2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002be4:	e013      	b.n	8002c0e <HAL_RTC_DeactivateAlarm+0x8a>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002be6:	f7fe f9e1 	bl	8000fac <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bf4:	d90b      	bls.n	8002c0e <HAL_RTC_DeactivateAlarm+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	22ff      	movs	r2, #255	; 0xff
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2203      	movs	r2, #3
 8002c02:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e041      	b.n	8002c92 <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0e4      	beq.n	8002be6 <HAL_RTC_DeactivateAlarm+0x62>
 8002c1c:	e02e      	b.n	8002c7c <HAL_RTC_DeactivateAlarm+0xf8>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c2c:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c3c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8002c3e:	f7fe f9b5 	bl	8000fac <HAL_GetTick>
 8002c42:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002c44:	e013      	b.n	8002c6e <HAL_RTC_DeactivateAlarm+0xea>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002c46:	f7fe f9b1 	bl	8000fac <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c54:	d90b      	bls.n	8002c6e <HAL_RTC_DeactivateAlarm+0xea>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	22ff      	movs	r2, #255	; 0xff
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2203      	movs	r2, #3
 8002c62:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e011      	b.n	8002c92 <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0e4      	beq.n	8002c46 <HAL_RTC_DeactivateAlarm+0xc2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	22ff      	movs	r2, #255	; 0xff
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d012      	beq.n	8002cd8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00b      	beq.n	8002cd8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f005 fa3b 	bl	800813c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002cd6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d012      	beq.n	8002d0c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00b      	beq.n	8002d0c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f8d8 	bl	8002eaa <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002d0a:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002d0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d12:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	775a      	strb	r2, [r3, #29]
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40010400 	.word	0x40010400

08002d28 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d11c      	bne.n	8002d78 <HAL_RTC_WaitForSynchro+0x50>
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d4c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002d4e:	f7fe f92d 	bl	8000fac <HAL_GetTick>
 8002d52:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d54:	e009      	b.n	8002d6a <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002d56:	f7fe f929 	bl	8000fac <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d64:	d901      	bls.n	8002d6a <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e007      	b.n	8002d7a <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ee      	beq.n	8002d56 <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d119      	bne.n	8002dcc <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002da0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002da2:	f7fe f903 	bl	8000fac <HAL_GetTick>
 8002da6:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002da8:	e009      	b.n	8002dbe <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002daa:	f7fe f8ff 	bl	8000fac <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002db8:	d901      	bls.n	8002dbe <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e007      	b.n	8002dce <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ee      	beq.n	8002daa <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8002de8:	e005      	b.n	8002df6 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	3301      	adds	r3, #1
 8002dee:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002df0:	7afb      	ldrb	r3, [r7, #11]
 8002df2:	3b0a      	subs	r3, #10
 8002df4:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8002df6:	7afb      	ldrb	r3, [r7, #11]
 8002df8:	2b09      	cmp	r3, #9
 8002dfa:	d8f6      	bhi.n	8002dea <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	7afb      	ldrb	r3, [r7, #11]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	b2db      	uxtb	r3, r3
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	b2db      	uxtb	r3, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	7f1b      	ldrb	r3, [r3, #28]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_RTCEx_EnableBypassShadow+0x14>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e020      	b.n	8002ea0 <HAL_RTCEx_EnableBypassShadow+0x56>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	22ca      	movs	r2, #202	; 0xca
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2253      	movs	r2, #83	; 0x53
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0220 	orr.w	r2, r2, #32
 8002e88:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	22ff      	movs	r2, #255	; 0xff
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e07b      	b.n	8002fc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d108      	bne.n	8002ee8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ede:	d009      	beq.n	8002ef4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61da      	str	r2, [r3, #28]
 8002ee6:	e005      	b.n	8002ef4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fd fd78 	bl	8000a04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f78:	ea42 0103 	orr.w	r1, r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	0c1b      	lsrs	r3, r3, #16
 8002f92:	f003 0104 	and.w	r1, r3, #4
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	f003 0210 	and.w	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e031      	b.n	8003044 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d106      	bne.n	8002ffa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f829 	bl	800304c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3304      	adds	r3, #4
 800300a:	4619      	mov	r1, r3
 800300c:	4610      	mov	r0, r2
 800300e:	f000 f979 	bl	8003304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr
	...

08003060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b01      	cmp	r3, #1
 8003072:	d001      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e03a      	b.n	80030ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003098:	d00e      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x58>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a16      	ldr	r2, [pc, #88]	; (80030f8 <HAL_TIM_Base_Start_IT+0x98>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d009      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x58>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a14      	ldr	r2, [pc, #80]	; (80030fc <HAL_TIM_Base_Start_IT+0x9c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d004      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x58>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a13      	ldr	r2, [pc, #76]	; (8003100 <HAL_TIM_Base_Start_IT+0xa0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d111      	bne.n	80030dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b06      	cmp	r3, #6
 80030c8:	d010      	beq.n	80030ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 0201 	orr.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030da:	e007      	b.n	80030ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	40000400 	.word	0x40000400
 80030fc:	40000800 	.word	0x40000800
 8003100:	40010800 	.word	0x40010800

08003104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b02      	cmp	r3, #2
 8003118:	d122      	bne.n	8003160 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b02      	cmp	r3, #2
 8003126:	d11b      	bne.n	8003160 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0202 	mvn.w	r2, #2
 8003130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f8c1 	bl	80032ce <HAL_TIM_IC_CaptureCallback>
 800314c:	e005      	b.n	800315a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f8b4 	bl	80032bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f8c3 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b04      	cmp	r3, #4
 800316c:	d122      	bne.n	80031b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b04      	cmp	r3, #4
 800317a:	d11b      	bne.n	80031b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0204 	mvn.w	r2, #4
 8003184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2202      	movs	r2, #2
 800318a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f897 	bl	80032ce <HAL_TIM_IC_CaptureCallback>
 80031a0:	e005      	b.n	80031ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f88a 	bl	80032bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f899 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d122      	bne.n	8003208 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d11b      	bne.n	8003208 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0208 	mvn.w	r2, #8
 80031d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2204      	movs	r2, #4
 80031de:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f86d 	bl	80032ce <HAL_TIM_IC_CaptureCallback>
 80031f4:	e005      	b.n	8003202 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f860 	bl	80032bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f86f 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b10      	cmp	r3, #16
 8003214:	d122      	bne.n	800325c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b10      	cmp	r3, #16
 8003222:	d11b      	bne.n	800325c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0210 	mvn.w	r2, #16
 800322c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2208      	movs	r2, #8
 8003232:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f843 	bl	80032ce <HAL_TIM_IC_CaptureCallback>
 8003248:	e005      	b.n	8003256 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f836 	bl	80032bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f845 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b01      	cmp	r3, #1
 8003268:	d10e      	bne.n	8003288 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d107      	bne.n	8003288 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0201 	mvn.w	r2, #1
 8003280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fd faca 	bl	800081c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003292:	2b40      	cmp	r3, #64	; 0x40
 8003294:	d10e      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b40      	cmp	r3, #64	; 0x40
 80032a2:	d107      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f81f 	bl	80032f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr

080032ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr

080032f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331a:	d00f      	beq.n	800333c <TIM_Base_SetConfig+0x38>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a2b      	ldr	r2, [pc, #172]	; (80033cc <TIM_Base_SetConfig+0xc8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d00b      	beq.n	800333c <TIM_Base_SetConfig+0x38>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a2a      	ldr	r2, [pc, #168]	; (80033d0 <TIM_Base_SetConfig+0xcc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d007      	beq.n	800333c <TIM_Base_SetConfig+0x38>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a29      	ldr	r2, [pc, #164]	; (80033d4 <TIM_Base_SetConfig+0xd0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d003      	beq.n	800333c <TIM_Base_SetConfig+0x38>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a28      	ldr	r2, [pc, #160]	; (80033d8 <TIM_Base_SetConfig+0xd4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d108      	bne.n	800334e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003354:	d017      	beq.n	8003386 <TIM_Base_SetConfig+0x82>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <TIM_Base_SetConfig+0xc8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <TIM_Base_SetConfig+0x82>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a1b      	ldr	r2, [pc, #108]	; (80033d0 <TIM_Base_SetConfig+0xcc>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00f      	beq.n	8003386 <TIM_Base_SetConfig+0x82>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a1a      	ldr	r2, [pc, #104]	; (80033d4 <TIM_Base_SetConfig+0xd0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00b      	beq.n	8003386 <TIM_Base_SetConfig+0x82>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a19      	ldr	r2, [pc, #100]	; (80033d8 <TIM_Base_SetConfig+0xd4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d007      	beq.n	8003386 <TIM_Base_SetConfig+0x82>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a18      	ldr	r2, [pc, #96]	; (80033dc <TIM_Base_SetConfig+0xd8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d003      	beq.n	8003386 <TIM_Base_SetConfig+0x82>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a17      	ldr	r2, [pc, #92]	; (80033e0 <TIM_Base_SetConfig+0xdc>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d108      	bne.n	8003398 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800338c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4313      	orrs	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	615a      	str	r2, [r3, #20]
}
 80033c2:	bf00      	nop
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40000800 	.word	0x40000800
 80033d4:	40000c00 	.word	0x40000c00
 80033d8:	40010800 	.word	0x40010800
 80033dc:	40010c00 	.word	0x40010c00
 80033e0:	40011000 	.word	0x40011000

080033e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e03f      	b.n	8003476 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fd fd32 	bl	8000e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2224      	movs	r2, #36	; 0x24
 8003414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003426:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fb45 	bl	8003ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800343c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800344c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800345c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b088      	sub	sp, #32
 8003482:	af02      	add	r7, sp, #8
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	4613      	mov	r3, r2
 800348c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b20      	cmp	r3, #32
 800349c:	f040 8083 	bne.w	80035a6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <HAL_UART_Transmit+0x2e>
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e07b      	b.n	80035a8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_UART_Transmit+0x40>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e074      	b.n	80035a8 <HAL_UART_Transmit+0x12a>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2221      	movs	r2, #33	; 0x21
 80034d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034d4:	f7fd fd6a 	bl	8000fac <HAL_GetTick>
 80034d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	88fa      	ldrh	r2, [r7, #6]
 80034de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	88fa      	ldrh	r2, [r7, #6]
 80034e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80034ee:	e042      	b.n	8003576 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003506:	d122      	bne.n	800354e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2200      	movs	r2, #0
 8003510:	2180      	movs	r1, #128	; 0x80
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f967 	bl	80037e6 <UART_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e042      	b.n	80035a8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003534:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d103      	bne.n	8003546 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	3302      	adds	r3, #2
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	e017      	b.n	8003576 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	3301      	adds	r3, #1
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	e013      	b.n	8003576 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2200      	movs	r2, #0
 8003556:	2180      	movs	r1, #128	; 0x80
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 f944 	bl	80037e6 <UART_WaitOnFlagUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e01f      	b.n	80035a8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	60ba      	str	r2, [r7, #8]
 800356e:	781a      	ldrb	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1b7      	bne.n	80034f0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2200      	movs	r2, #0
 8003588:	2140      	movs	r1, #64	; 0x40
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f92b 	bl	80037e6 <UART_WaitOnFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e006      	b.n	80035a8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e000      	b.n	80035a8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
  }
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10d      	bne.n	8003602 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_UART_IRQHandler+0x52>
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f9db 	bl	80039b6 <UART_Receive_IT>
      return;
 8003600:	e0d0      	b.n	80037a4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80b0 	beq.w	800376a <HAL_UART_IRQHandler+0x1ba>
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d105      	bne.n	8003620 <HAL_UART_IRQHandler+0x70>
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 80a5 	beq.w	800376a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <HAL_UART_IRQHandler+0x90>
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003638:	f043 0201 	orr.w	r2, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_UART_IRQHandler+0xb0>
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003658:	f043 0202 	orr.w	r2, r3, #2
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_UART_IRQHandler+0xd0>
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003678:	f043 0204 	orr.w	r2, r3, #4
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00f      	beq.n	80036aa <HAL_UART_IRQHandler+0xfa>
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b00      	cmp	r3, #0
 8003692:	d104      	bne.n	800369e <HAL_UART_IRQHandler+0xee>
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	f043 0208 	orr.w	r2, r3, #8
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d077      	beq.n	80037a2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d007      	beq.n	80036cc <HAL_UART_IRQHandler+0x11c>
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f975 	bl	80039b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d6:	2b40      	cmp	r3, #64	; 0x40
 80036d8:	bf0c      	ite	eq
 80036da:	2301      	moveq	r3, #1
 80036dc:	2300      	movne	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <HAL_UART_IRQHandler+0x144>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d031      	beq.n	8003758 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f8c0 	bl	800387a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003704:	2b40      	cmp	r3, #64	; 0x40
 8003706:	d123      	bne.n	8003750 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003716:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371c:	2b00      	cmp	r3, #0
 800371e:	d013      	beq.n	8003748 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003724:	4a21      	ldr	r2, [pc, #132]	; (80037ac <HAL_UART_IRQHandler+0x1fc>)
 8003726:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372c:	4618      	mov	r0, r3
 800372e:	f7fd fd72 	bl	8001216 <HAL_DMA_Abort_IT>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d016      	beq.n	8003766 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003742:	4610      	mov	r0, r2
 8003744:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003746:	e00e      	b.n	8003766 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f843 	bl	80037d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374e:	e00a      	b.n	8003766 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f83f 	bl	80037d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003756:	e006      	b.n	8003766 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f83b 	bl	80037d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003764:	e01d      	b.n	80037a2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003766:	bf00      	nop
    return;
 8003768:	e01b      	b.n	80037a2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_UART_IRQHandler+0x1d6>
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f8ac 	bl	80038dc <UART_Transmit_IT>
    return;
 8003784:	e00e      	b.n	80037a4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d009      	beq.n	80037a4 <HAL_UART_IRQHandler+0x1f4>
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003796:	2b00      	cmp	r3, #0
 8003798:	d004      	beq.n	80037a4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f8f3 	bl	8003986 <UART_EndTransmit_IT>
    return;
 80037a0:	e000      	b.n	80037a4 <HAL_UART_IRQHandler+0x1f4>
    return;
 80037a2:	bf00      	nop
  }
}
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	080038b5 	.word	0x080038b5

080037b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr

080037e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	4613      	mov	r3, r2
 80037f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f6:	e02c      	b.n	8003852 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fe:	d028      	beq.n	8003852 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <UART_WaitOnFlagUntilTimeout+0x30>
 8003806:	f7fd fbd1 	bl	8000fac <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	429a      	cmp	r2, r3
 8003814:	d21d      	bcs.n	8003852 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003824:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0201 	bic.w	r2, r2, #1
 8003834:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e00f      	b.n	8003872 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4013      	ands	r3, r2
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	429a      	cmp	r2, r3
 8003860:	bf0c      	ite	eq
 8003862:	2301      	moveq	r3, #1
 8003864:	2300      	movne	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	461a      	mov	r2, r3
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	429a      	cmp	r2, r3
 800386e:	d0c3      	beq.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003890:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0201 	bic.w	r2, r2, #1
 80038a0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f7ff ff80 	bl	80037d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038d4:	bf00      	nop
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b21      	cmp	r3, #33	; 0x21
 80038ee:	d144      	bne.n	800397a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f8:	d11a      	bne.n	8003930 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800390e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d105      	bne.n	8003924 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	1c9a      	adds	r2, r3, #2
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	621a      	str	r2, [r3, #32]
 8003922:	e00e      	b.n	8003942 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	621a      	str	r2, [r3, #32]
 800392e:	e008      	b.n	8003942 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	1c59      	adds	r1, r3, #1
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6211      	str	r1, [r2, #32]
 800393a:	781a      	ldrb	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29b      	uxth	r3, r3
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	4619      	mov	r1, r3
 8003950:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10f      	bne.n	8003976 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003964:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003974:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	e000      	b.n	800397c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800397a:	2302      	movs	r3, #2
  }
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr

08003986 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800399c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff ff02 	bl	80037b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b22      	cmp	r3, #34	; 0x22
 80039c8:	d171      	bne.n	8003aae <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d2:	d123      	bne.n	8003a1c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10e      	bne.n	8003a00 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	1c9a      	adds	r2, r3, #2
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	629a      	str	r2, [r3, #40]	; 0x28
 80039fe:	e029      	b.n	8003a54 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	629a      	str	r2, [r3, #40]	; 0x28
 8003a1a:	e01b      	b.n	8003a54 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6858      	ldr	r0, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	1c59      	adds	r1, r3, #1
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6291      	str	r1, [r2, #40]	; 0x28
 8003a34:	b2c2      	uxtb	r2, r0
 8003a36:	701a      	strb	r2, [r3, #0]
 8003a38:	e00c      	b.n	8003a54 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a46:	1c58      	adds	r0, r3, #1
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	6288      	str	r0, [r1, #40]	; 0x28
 8003a4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4619      	mov	r1, r3
 8003a62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d120      	bne.n	8003aaa <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0220 	bic.w	r2, r2, #32
 8003a76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0201 	bic.w	r2, r2, #1
 8003a96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff fe8e 	bl	80037c2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e002      	b.n	8003ab0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e000      	b.n	8003ab0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003aae:	2302      	movs	r3, #2
  }
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003af8:	f023 030c 	bic.w	r3, r3, #12
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	430b      	orrs	r3, r1
 8003b04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a55      	ldr	r2, [pc, #340]	; (8003c78 <UART_SetConfig+0x1c0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d103      	bne.n	8003b2e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b26:	f7fe faf7 	bl	8002118 <HAL_RCC_GetPCLK2Freq>
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	e002      	b.n	8003b34 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b2e:	f7fe fadf 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8003b32:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b3c:	d14c      	bne.n	8003bd8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	009a      	lsls	r2, r3, #2
 8003b48:	441a      	add	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b54:	4a49      	ldr	r2, [pc, #292]	; (8003c7c <UART_SetConfig+0x1c4>)
 8003b56:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	0119      	lsls	r1, r3, #4
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009a      	lsls	r2, r3, #2
 8003b68:	441a      	add	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b74:	4b41      	ldr	r3, [pc, #260]	; (8003c7c <UART_SetConfig+0x1c4>)
 8003b76:	fba3 0302 	umull	r0, r3, r3, r2
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	2064      	movs	r0, #100	; 0x64
 8003b7e:	fb00 f303 	mul.w	r3, r0, r3
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	3332      	adds	r3, #50	; 0x32
 8003b88:	4a3c      	ldr	r2, [pc, #240]	; (8003c7c <UART_SetConfig+0x1c4>)
 8003b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b96:	4419      	add	r1, r3
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009a      	lsls	r2, r3, #2
 8003ba2:	441a      	add	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bae:	4b33      	ldr	r3, [pc, #204]	; (8003c7c <UART_SetConfig+0x1c4>)
 8003bb0:	fba3 0302 	umull	r0, r3, r3, r2
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	2064      	movs	r0, #100	; 0x64
 8003bb8:	fb00 f303 	mul.w	r3, r0, r3
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	3332      	adds	r3, #50	; 0x32
 8003bc2:	4a2e      	ldr	r2, [pc, #184]	; (8003c7c <UART_SetConfig+0x1c4>)
 8003bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc8:	095b      	lsrs	r3, r3, #5
 8003bca:	f003 0207 	and.w	r2, r3, #7
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	440a      	add	r2, r1
 8003bd4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bd6:	e04a      	b.n	8003c6e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	009a      	lsls	r2, r3, #2
 8003be2:	441a      	add	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bee:	4a23      	ldr	r2, [pc, #140]	; (8003c7c <UART_SetConfig+0x1c4>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	0119      	lsls	r1, r3, #4
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	009a      	lsls	r2, r3, #2
 8003c02:	441a      	add	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c0e:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <UART_SetConfig+0x1c4>)
 8003c10:	fba3 0302 	umull	r0, r3, r3, r2
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	2064      	movs	r0, #100	; 0x64
 8003c18:	fb00 f303 	mul.w	r3, r0, r3
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	3332      	adds	r3, #50	; 0x32
 8003c22:	4a16      	ldr	r2, [pc, #88]	; (8003c7c <UART_SetConfig+0x1c4>)
 8003c24:	fba2 2303 	umull	r2, r3, r2, r3
 8003c28:	095b      	lsrs	r3, r3, #5
 8003c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c2e:	4419      	add	r1, r3
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	009a      	lsls	r2, r3, #2
 8003c3a:	441a      	add	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <UART_SetConfig+0x1c4>)
 8003c48:	fba3 0302 	umull	r0, r3, r3, r2
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	2064      	movs	r0, #100	; 0x64
 8003c50:	fb00 f303 	mul.w	r3, r0, r3
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	3332      	adds	r3, #50	; 0x32
 8003c5a:	4a08      	ldr	r2, [pc, #32]	; (8003c7c <UART_SetConfig+0x1c4>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	f003 020f 	and.w	r2, r3, #15
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	609a      	str	r2, [r3, #8]
}
 8003c6e:	bf00      	nop
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40013800 	.word	0x40013800
 8003c7c:	51eb851f 	.word	0x51eb851f

08003c80 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c92:	2b84      	cmp	r3, #132	; 0x84
 8003c94:	d005      	beq.n	8003ca2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003c96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3303      	adds	r3, #3
 8003ca0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr

08003cae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003cb2:	f000 fd3f 	bl	8004734 <vTaskStartScheduler>
  
  return osOK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cbe:	b089      	sub	sp, #36	; 0x24
 8003cc0:	af04      	add	r7, sp, #16
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d020      	beq.n	8003d10 <osThreadCreate+0x54>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d01c      	beq.n	8003d10 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685c      	ldr	r4, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681d      	ldr	r5, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691e      	ldr	r6, [r3, #16]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff ffc9 	bl	8003c80 <makeFreeRtosPriority>
 8003cee:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cf8:	9202      	str	r2, [sp, #8]
 8003cfa:	9301      	str	r3, [sp, #4]
 8003cfc:	9100      	str	r1, [sp, #0]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	4632      	mov	r2, r6
 8003d02:	4629      	mov	r1, r5
 8003d04:	4620      	mov	r0, r4
 8003d06:	f000 fb56 	bl	80043b6 <xTaskCreateStatic>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	e01c      	b.n	8003d4a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685c      	ldr	r4, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d1c:	b29e      	uxth	r6, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff ffab 	bl	8003c80 <makeFreeRtosPriority>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	f107 030c 	add.w	r3, r7, #12
 8003d30:	9301      	str	r3, [sp, #4]
 8003d32:	9200      	str	r2, [sp, #0]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	4632      	mov	r2, r6
 8003d38:	4629      	mov	r1, r5
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f000 fb97 	bl	800446e <xTaskCreate>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d001      	beq.n	8003d4a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	e000      	b.n	8003d4c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d54 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <osDelay+0x16>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	e000      	b.n	8003d6c <osDelay+0x18>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fcad 	bl	80046cc <vTaskDelay>
  
  return osOK;
 8003d72:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f103 0208 	add.w	r2, r3, #8
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f04f 32ff 	mov.w	r2, #4294967295
 8003d94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f103 0208 	add.w	r2, r3, #8
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f103 0208 	add.w	r2, r3, #8
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr

08003dba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr

08003dd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b085      	sub	sp, #20
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	601a      	str	r2, [r3, #0]
}
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr

08003e18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2e:	d103      	bne.n	8003e38 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	e00c      	b.n	8003e52 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3308      	adds	r3, #8
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	e002      	b.n	8003e46 <vListInsert+0x2e>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d2f6      	bcs.n	8003e40 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	601a      	str	r2, [r3, #0]
}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr

08003e88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6892      	ldr	r2, [r2, #8]
 8003e9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6852      	ldr	r2, [r2, #4]
 8003ea8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d103      	bne.n	8003ebc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	1e5a      	subs	r2, r3, #1
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr
	...

08003edc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f02:	bf00      	nop
 8003f04:	e7fe      	b.n	8003f04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f06:	f001 f951 	bl	80051ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f12:	68f9      	ldr	r1, [r7, #12]
 8003f14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f16:	fb01 f303 	mul.w	r3, r1, r3
 8003f1a:	441a      	add	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	3b01      	subs	r3, #1
 8003f38:	68f9      	ldr	r1, [r7, #12]
 8003f3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f3c:	fb01 f303 	mul.w	r3, r1, r3
 8003f40:	441a      	add	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	22ff      	movs	r2, #255	; 0xff
 8003f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	22ff      	movs	r2, #255	; 0xff
 8003f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d114      	bne.n	8003f86 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01a      	beq.n	8003f9a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	3310      	adds	r3, #16
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fe05 	bl	8004b78 <xTaskRemoveFromEventList>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d012      	beq.n	8003f9a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <xQueueGenericReset+0xcc>)
 8003f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	e009      	b.n	8003f9a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3310      	adds	r3, #16
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff fef6 	bl	8003d7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3324      	adds	r3, #36	; 0x24
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff fef1 	bl	8003d7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f9a:	f001 f937 	bl	800520c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f9e:	2301      	movs	r3, #1
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	e000ed04 	.word	0xe000ed04

08003fac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	613b      	str	r3, [r7, #16]
}
 8003fd2:	bf00      	nop
 8003fd4:	e7fe      	b.n	8003fd4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d102      	bne.n	8003fe2 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61fb      	str	r3, [r7, #28]
 8003fe0:	e004      	b.n	8003fec <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	fb02 f303 	mul.w	r3, r2, r3
 8003fea:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	3348      	adds	r3, #72	; 0x48
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f001 f9db 	bl	80053ac <pvPortMalloc>
 8003ff6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00f      	beq.n	800401e <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	3348      	adds	r3, #72	; 0x48
 8004002:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800400c:	79fa      	ldrb	r2, [r7, #7]
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	4613      	mov	r3, r2
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	68b9      	ldr	r1, [r7, #8]
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 f805 	bl	8004028 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800401e:	69bb      	ldr	r3, [r7, #24]
	}
 8004020:	4618      	mov	r0, r3
 8004022:	3720      	adds	r7, #32
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d103      	bne.n	8004044 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e002      	b.n	800404a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004056:	2101      	movs	r1, #1
 8004058:	69b8      	ldr	r0, [r7, #24]
 800405a:	f7ff ff3f 	bl	8003edc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b08e      	sub	sp, #56	; 0x38
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10a      	bne.n	8004094 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004090:	bf00      	nop
 8004092:	e7fe      	b.n	8004092 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d103      	bne.n	80040a2 <xQueueGenericSendFromISR+0x3c>
 800409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <xQueueGenericSendFromISR+0x40>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <xQueueGenericSendFromISR+0x42>
 80040a6:	2300      	movs	r3, #0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	623b      	str	r3, [r7, #32]
}
 80040be:	bf00      	nop
 80040c0:	e7fe      	b.n	80040c0 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d103      	bne.n	80040d0 <xQueueGenericSendFromISR+0x6a>
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <xQueueGenericSendFromISR+0x6e>
 80040d0:	2301      	movs	r3, #1
 80040d2:	e000      	b.n	80040d6 <xQueueGenericSendFromISR+0x70>
 80040d4:	2300      	movs	r3, #0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	61fb      	str	r3, [r7, #28]
}
 80040ec:	bf00      	nop
 80040ee:	e7fe      	b.n	80040ee <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040f0:	f001 f91e 	bl	8005330 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80040f4:	f3ef 8211 	mrs	r2, BASEPRI
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	61ba      	str	r2, [r7, #24]
 800410a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800410c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800410e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004118:	429a      	cmp	r2, r3
 800411a:	d302      	bcc.n	8004122 <xQueueGenericSendFromISR+0xbc>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d12c      	bne.n	800417c <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004124:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004132:	f000 f8b0 	bl	8004296 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004136:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413e:	d112      	bne.n	8004166 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	2b00      	cmp	r3, #0
 8004146:	d016      	beq.n	8004176 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	3324      	adds	r3, #36	; 0x24
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fd13 	bl	8004b78 <xTaskRemoveFromEventList>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00e      	beq.n	8004176 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00b      	beq.n	8004176 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	e007      	b.n	8004176 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004166:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800416a:	3301      	adds	r3, #1
 800416c:	b2db      	uxtb	r3, r3
 800416e:	b25a      	sxtb	r2, r3
 8004170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004176:	2301      	movs	r3, #1
 8004178:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800417a:	e001      	b.n	8004180 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800417c:	2300      	movs	r3, #0
 800417e:	637b      	str	r3, [r7, #52]	; 0x34
 8004180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004182:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800418a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800418c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800418e:	4618      	mov	r0, r3
 8004190:	3738      	adds	r7, #56	; 0x38
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b08e      	sub	sp, #56	; 0x38
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80041ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	623b      	str	r3, [r7, #32]
}
 80041be:	bf00      	nop
 80041c0:	e7fe      	b.n	80041c0 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d103      	bne.n	80041d0 <xQueueReceiveFromISR+0x3a>
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <xQueueReceiveFromISR+0x3e>
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <xQueueReceiveFromISR+0x40>
 80041d4:	2300      	movs	r3, #0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10a      	bne.n	80041f0 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	61fb      	str	r3, [r7, #28]
}
 80041ec:	bf00      	nop
 80041ee:	e7fe      	b.n	80041ee <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041f0:	f001 f89e 	bl	8005330 <vPortValidateInterruptPriority>
	__asm volatile
 80041f4:	f3ef 8211 	mrs	r2, BASEPRI
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	61ba      	str	r2, [r7, #24]
 800420a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800420c:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	2b00      	cmp	r3, #0
 800421a:	d02f      	beq.n	800427c <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800422a:	f000 f89e 	bl	800436a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004230:	1e5a      	subs	r2, r3, #1
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004236:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d112      	bne.n	8004266 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d016      	beq.n	8004276 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	3310      	adds	r3, #16
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fc93 	bl	8004b78 <xTaskRemoveFromEventList>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00e      	beq.n	8004276 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	e007      	b.n	8004276 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800426a:	3301      	adds	r3, #1
 800426c:	b2db      	uxtb	r3, r3
 800426e:	b25a      	sxtb	r2, r3
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004276:	2301      	movs	r3, #1
 8004278:	637b      	str	r3, [r7, #52]	; 0x34
 800427a:	e001      	b.n	8004280 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800427c:	2300      	movs	r3, #0
 800427e:	637b      	str	r3, [r7, #52]	; 0x34
 8004280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004282:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f383 8811 	msr	BASEPRI, r3
}
 800428a:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800428c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800428e:	4618      	mov	r0, r3
 8004290:	3738      	adds	r7, #56	; 0x38
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b086      	sub	sp, #24
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10d      	bne.n	80042d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d14d      	bne.n	8004358 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fd95 	bl	8004df0 <xTaskPriorityDisinherit>
 80042c6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	605a      	str	r2, [r3, #4]
 80042ce:	e043      	b.n	8004358 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d119      	bne.n	800430a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6898      	ldr	r0, [r3, #8]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	461a      	mov	r2, r3
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	f004 fb9d 	bl	8008a20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	441a      	add	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d32b      	bcc.n	8004358 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	609a      	str	r2, [r3, #8]
 8004308:	e026      	b.n	8004358 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	68d8      	ldr	r0, [r3, #12]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	461a      	mov	r2, r3
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	f004 fb83 	bl	8008a20 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	425b      	negs	r3, r3
 8004324:	441a      	add	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d207      	bcs.n	8004346 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	425b      	negs	r3, r3
 8004340:	441a      	add	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d105      	bne.n	8004358 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	3b01      	subs	r3, #1
 8004356:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004360:	697b      	ldr	r3, [r7, #20]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	2b00      	cmp	r3, #0
 800437a:	d018      	beq.n	80043ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	441a      	add	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	429a      	cmp	r2, r3
 8004394:	d303      	bcc.n	800439e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68d9      	ldr	r1, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	461a      	mov	r2, r3
 80043a8:	6838      	ldr	r0, [r7, #0]
 80043aa:	f004 fb39 	bl	8008a20 <memcpy>
	}
}
 80043ae:	bf00      	nop
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b08e      	sub	sp, #56	; 0x38
 80043ba:	af04      	add	r7, sp, #16
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10a      	bne.n	80043e0 <xTaskCreateStatic+0x2a>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	623b      	str	r3, [r7, #32]
}
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80043e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <xTaskCreateStatic+0x46>
	__asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	61fb      	str	r3, [r7, #28]
}
 80043f8:	bf00      	nop
 80043fa:	e7fe      	b.n	80043fa <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043fc:	2354      	movs	r3, #84	; 0x54
 80043fe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2b54      	cmp	r3, #84	; 0x54
 8004404:	d00a      	beq.n	800441c <xTaskCreateStatic+0x66>
	__asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	61bb      	str	r3, [r7, #24]
}
 8004418:	bf00      	nop
 800441a:	e7fe      	b.n	800441a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800441c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441e:	2b00      	cmp	r3, #0
 8004420:	d01e      	beq.n	8004460 <xTaskCreateStatic+0xaa>
 8004422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01b      	beq.n	8004460 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004430:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	2202      	movs	r2, #2
 8004436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800443a:	2300      	movs	r3, #0
 800443c:	9303      	str	r3, [sp, #12]
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	9302      	str	r3, [sp, #8]
 8004442:	f107 0314 	add.w	r3, r7, #20
 8004446:	9301      	str	r3, [sp, #4]
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f850 	bl	80044f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004458:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800445a:	f000 f8cd 	bl	80045f8 <prvAddNewTaskToReadyList>
 800445e:	e001      	b.n	8004464 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004464:	697b      	ldr	r3, [r7, #20]
	}
 8004466:	4618      	mov	r0, r3
 8004468:	3728      	adds	r7, #40	; 0x28
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800446e:	b580      	push	{r7, lr}
 8004470:	b08c      	sub	sp, #48	; 0x30
 8004472:	af04      	add	r7, sp, #16
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	603b      	str	r3, [r7, #0]
 800447a:	4613      	mov	r3, r2
 800447c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800447e:	88fb      	ldrh	r3, [r7, #6]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4618      	mov	r0, r3
 8004484:	f000 ff92 	bl	80053ac <pvPortMalloc>
 8004488:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00e      	beq.n	80044ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004490:	2054      	movs	r0, #84	; 0x54
 8004492:	f000 ff8b 	bl	80053ac <pvPortMalloc>
 8004496:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30
 80044a4:	e005      	b.n	80044b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80044a6:	6978      	ldr	r0, [r7, #20]
 80044a8:	f001 f844 	bl	8005534 <vPortFree>
 80044ac:	e001      	b.n	80044b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d017      	beq.n	80044e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044c0:	88fa      	ldrh	r2, [r7, #6]
 80044c2:	2300      	movs	r3, #0
 80044c4:	9303      	str	r3, [sp, #12]
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	9302      	str	r3, [sp, #8]
 80044ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044cc:	9301      	str	r3, [sp, #4]
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68b9      	ldr	r1, [r7, #8]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f80e 	bl	80044f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044dc:	69f8      	ldr	r0, [r7, #28]
 80044de:	f000 f88b 	bl	80045f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044e2:	2301      	movs	r3, #1
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	e002      	b.n	80044ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044e8:	f04f 33ff 	mov.w	r3, #4294967295
 80044ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044ee:	69bb      	ldr	r3, [r7, #24]
	}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3720      	adds	r7, #32
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004510:	3b01      	subs	r3, #1
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f023 0307 	bic.w	r3, r3, #7
 800451e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <prvInitialiseNewTask+0x48>
	__asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	617b      	str	r3, [r7, #20]
}
 800453c:	bf00      	nop
 800453e:	e7fe      	b.n	800453e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004540:	2300      	movs	r3, #0
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	e012      	b.n	800456c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	4413      	add	r3, r2
 800454c:	7819      	ldrb	r1, [r3, #0]
 800454e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	4413      	add	r3, r2
 8004554:	3334      	adds	r3, #52	; 0x34
 8004556:	460a      	mov	r2, r1
 8004558:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	4413      	add	r3, r2
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d006      	beq.n	8004574 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	3301      	adds	r3, #1
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	2b0f      	cmp	r3, #15
 8004570:	d9e9      	bls.n	8004546 <prvInitialiseNewTask+0x4e>
 8004572:	e000      	b.n	8004576 <prvInitialiseNewTask+0x7e>
		{
			break;
 8004574:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	2b06      	cmp	r3, #6
 8004582:	d901      	bls.n	8004588 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004584:	2306      	movs	r3, #6
 8004586:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800458c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004592:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004596:	2200      	movs	r2, #0
 8004598:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	3304      	adds	r3, #4
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff fc0b 	bl	8003dba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	3318      	adds	r3, #24
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff fc06 	bl	8003dba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b6:	f1c3 0207 	rsb	r2, r3, #7
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c6:	2200      	movs	r2, #0
 80045c8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	68f9      	ldr	r1, [r7, #12]
 80045d6:	69b8      	ldr	r0, [r7, #24]
 80045d8:	f000 fcf6 	bl	8004fc8 <pxPortInitialiseStack>
 80045dc:	4602      	mov	r2, r0
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045ee:	bf00      	nop
 80045f0:	3720      	adds	r7, #32
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004600:	f000 fdd4 	bl	80051ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004604:	4b2a      	ldr	r3, [pc, #168]	; (80046b0 <prvAddNewTaskToReadyList+0xb8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3301      	adds	r3, #1
 800460a:	4a29      	ldr	r2, [pc, #164]	; (80046b0 <prvAddNewTaskToReadyList+0xb8>)
 800460c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800460e:	4b29      	ldr	r3, [pc, #164]	; (80046b4 <prvAddNewTaskToReadyList+0xbc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004616:	4a27      	ldr	r2, [pc, #156]	; (80046b4 <prvAddNewTaskToReadyList+0xbc>)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800461c:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <prvAddNewTaskToReadyList+0xb8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d110      	bne.n	8004646 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004624:	f000 fb22 	bl	8004c6c <prvInitialiseTaskLists>
 8004628:	e00d      	b.n	8004646 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800462a:	4b23      	ldr	r3, [pc, #140]	; (80046b8 <prvAddNewTaskToReadyList+0xc0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004632:	4b20      	ldr	r3, [pc, #128]	; (80046b4 <prvAddNewTaskToReadyList+0xbc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	429a      	cmp	r2, r3
 800463e:	d802      	bhi.n	8004646 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004640:	4a1c      	ldr	r2, [pc, #112]	; (80046b4 <prvAddNewTaskToReadyList+0xbc>)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004646:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <prvAddNewTaskToReadyList+0xc4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3301      	adds	r3, #1
 800464c:	4a1b      	ldr	r2, [pc, #108]	; (80046bc <prvAddNewTaskToReadyList+0xc4>)
 800464e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	2201      	movs	r2, #1
 8004656:	409a      	lsls	r2, r3
 8004658:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <prvAddNewTaskToReadyList+0xc8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4313      	orrs	r3, r2
 800465e:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <prvAddNewTaskToReadyList+0xc8>)
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4a15      	ldr	r2, [pc, #84]	; (80046c4 <prvAddNewTaskToReadyList+0xcc>)
 8004670:	441a      	add	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3304      	adds	r3, #4
 8004676:	4619      	mov	r1, r3
 8004678:	4610      	mov	r0, r2
 800467a:	f7ff fbaa 	bl	8003dd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800467e:	f000 fdc5 	bl	800520c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004682:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <prvAddNewTaskToReadyList+0xc0>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00e      	beq.n	80046a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800468a:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <prvAddNewTaskToReadyList+0xbc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	429a      	cmp	r2, r3
 8004696:	d207      	bcs.n	80046a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <prvAddNewTaskToReadyList+0xd0>)
 800469a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046a8:	bf00      	nop
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000404 	.word	0x20000404
 80046b4:	20000304 	.word	0x20000304
 80046b8:	20000410 	.word	0x20000410
 80046bc:	20000420 	.word	0x20000420
 80046c0:	2000040c 	.word	0x2000040c
 80046c4:	20000308 	.word	0x20000308
 80046c8:	e000ed04 	.word	0xe000ed04

080046cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d017      	beq.n	800470e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <vTaskDelay+0x60>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <vTaskDelay+0x30>
	__asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	60bb      	str	r3, [r7, #8]
}
 80046f8:	bf00      	nop
 80046fa:	e7fe      	b.n	80046fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80046fc:	f000 f87a 	bl	80047f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004700:	2100      	movs	r1, #0
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fbfa 	bl	8004efc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004708:	f000 f882 	bl	8004810 <xTaskResumeAll>
 800470c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d107      	bne.n	8004724 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004714:	4b06      	ldr	r3, [pc, #24]	; (8004730 <vTaskDelay+0x64>)
 8004716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004724:	bf00      	nop
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	2000042c 	.word	0x2000042c
 8004730:	e000ed04 	.word	0xe000ed04

08004734 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	; 0x28
 8004738:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800473a:	2300      	movs	r3, #0
 800473c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800473e:	2300      	movs	r3, #0
 8004740:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004742:	463a      	mov	r2, r7
 8004744:	1d39      	adds	r1, r7, #4
 8004746:	f107 0308 	add.w	r3, r7, #8
 800474a:	4618      	mov	r0, r3
 800474c:	f7fb fe9c 	bl	8000488 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004750:	6839      	ldr	r1, [r7, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	9202      	str	r2, [sp, #8]
 8004758:	9301      	str	r3, [sp, #4]
 800475a:	2300      	movs	r3, #0
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	2300      	movs	r3, #0
 8004760:	460a      	mov	r2, r1
 8004762:	491e      	ldr	r1, [pc, #120]	; (80047dc <vTaskStartScheduler+0xa8>)
 8004764:	481e      	ldr	r0, [pc, #120]	; (80047e0 <vTaskStartScheduler+0xac>)
 8004766:	f7ff fe26 	bl	80043b6 <xTaskCreateStatic>
 800476a:	4603      	mov	r3, r0
 800476c:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <vTaskStartScheduler+0xb0>)
 800476e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004770:	4b1c      	ldr	r3, [pc, #112]	; (80047e4 <vTaskStartScheduler+0xb0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004778:	2301      	movs	r3, #1
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e001      	b.n	8004782 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d116      	bne.n	80047b6 <vTaskStartScheduler+0x82>
	__asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	613b      	str	r3, [r7, #16]
}
 800479a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800479c:	4b12      	ldr	r3, [pc, #72]	; (80047e8 <vTaskStartScheduler+0xb4>)
 800479e:	f04f 32ff 	mov.w	r2, #4294967295
 80047a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047a4:	4b11      	ldr	r3, [pc, #68]	; (80047ec <vTaskStartScheduler+0xb8>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80047aa:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <vTaskStartScheduler+0xbc>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047b0:	f000 fc8a 	bl	80050c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047b4:	e00e      	b.n	80047d4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047bc:	d10a      	bne.n	80047d4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	60fb      	str	r3, [r7, #12]
}
 80047d0:	bf00      	nop
 80047d2:	e7fe      	b.n	80047d2 <vTaskStartScheduler+0x9e>
}
 80047d4:	bf00      	nop
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	08009d28 	.word	0x08009d28
 80047e0:	08004c3d 	.word	0x08004c3d
 80047e4:	20000428 	.word	0x20000428
 80047e8:	20000424 	.word	0x20000424
 80047ec:	20000410 	.word	0x20000410
 80047f0:	20000408 	.word	0x20000408

080047f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80047f8:	4b04      	ldr	r3, [pc, #16]	; (800480c <vTaskSuspendAll+0x18>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3301      	adds	r3, #1
 80047fe:	4a03      	ldr	r2, [pc, #12]	; (800480c <vTaskSuspendAll+0x18>)
 8004800:	6013      	str	r3, [r2, #0]
}
 8004802:	bf00      	nop
 8004804:	46bd      	mov	sp, r7
 8004806:	bc80      	pop	{r7}
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	2000042c 	.word	0x2000042c

08004810 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800481a:	2300      	movs	r3, #0
 800481c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800481e:	4b41      	ldr	r3, [pc, #260]	; (8004924 <xTaskResumeAll+0x114>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <xTaskResumeAll+0x2c>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	603b      	str	r3, [r7, #0]
}
 8004838:	bf00      	nop
 800483a:	e7fe      	b.n	800483a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800483c:	f000 fcb6 	bl	80051ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004840:	4b38      	ldr	r3, [pc, #224]	; (8004924 <xTaskResumeAll+0x114>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3b01      	subs	r3, #1
 8004846:	4a37      	ldr	r2, [pc, #220]	; (8004924 <xTaskResumeAll+0x114>)
 8004848:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800484a:	4b36      	ldr	r3, [pc, #216]	; (8004924 <xTaskResumeAll+0x114>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d161      	bne.n	8004916 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004852:	4b35      	ldr	r3, [pc, #212]	; (8004928 <xTaskResumeAll+0x118>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d05d      	beq.n	8004916 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800485a:	e02e      	b.n	80048ba <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800485c:	4b33      	ldr	r3, [pc, #204]	; (800492c <xTaskResumeAll+0x11c>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3318      	adds	r3, #24
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fb0d 	bl	8003e88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3304      	adds	r3, #4
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff fb08 	bl	8003e88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	2201      	movs	r2, #1
 800487e:	409a      	lsls	r2, r3
 8004880:	4b2b      	ldr	r3, [pc, #172]	; (8004930 <xTaskResumeAll+0x120>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4313      	orrs	r3, r2
 8004886:	4a2a      	ldr	r2, [pc, #168]	; (8004930 <xTaskResumeAll+0x120>)
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4a27      	ldr	r2, [pc, #156]	; (8004934 <xTaskResumeAll+0x124>)
 8004898:	441a      	add	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	3304      	adds	r3, #4
 800489e:	4619      	mov	r1, r3
 80048a0:	4610      	mov	r0, r2
 80048a2:	f7ff fa96 	bl	8003dd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048aa:	4b23      	ldr	r3, [pc, #140]	; (8004938 <xTaskResumeAll+0x128>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d302      	bcc.n	80048ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80048b4:	4b21      	ldr	r3, [pc, #132]	; (800493c <xTaskResumeAll+0x12c>)
 80048b6:	2201      	movs	r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048ba:	4b1c      	ldr	r3, [pc, #112]	; (800492c <xTaskResumeAll+0x11c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1cc      	bne.n	800485c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048c8:	f000 fa6e 	bl	8004da8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80048cc:	4b1c      	ldr	r3, [pc, #112]	; (8004940 <xTaskResumeAll+0x130>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d010      	beq.n	80048fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048d8:	f000 f836 	bl	8004948 <xTaskIncrementTick>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80048e2:	4b16      	ldr	r3, [pc, #88]	; (800493c <xTaskResumeAll+0x12c>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1f1      	bne.n	80048d8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80048f4:	4b12      	ldr	r3, [pc, #72]	; (8004940 <xTaskResumeAll+0x130>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048fa:	4b10      	ldr	r3, [pc, #64]	; (800493c <xTaskResumeAll+0x12c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d009      	beq.n	8004916 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004902:	2301      	movs	r3, #1
 8004904:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004906:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <xTaskResumeAll+0x134>)
 8004908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004916:	f000 fc79 	bl	800520c <vPortExitCritical>

	return xAlreadyYielded;
 800491a:	68bb      	ldr	r3, [r7, #8]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	2000042c 	.word	0x2000042c
 8004928:	20000404 	.word	0x20000404
 800492c:	200003c4 	.word	0x200003c4
 8004930:	2000040c 	.word	0x2000040c
 8004934:	20000308 	.word	0x20000308
 8004938:	20000304 	.word	0x20000304
 800493c:	20000418 	.word	0x20000418
 8004940:	20000414 	.word	0x20000414
 8004944:	e000ed04 	.word	0xe000ed04

08004948 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004952:	4b51      	ldr	r3, [pc, #324]	; (8004a98 <xTaskIncrementTick+0x150>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	f040 808d 	bne.w	8004a76 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800495c:	4b4f      	ldr	r3, [pc, #316]	; (8004a9c <xTaskIncrementTick+0x154>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3301      	adds	r3, #1
 8004962:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004964:	4a4d      	ldr	r2, [pc, #308]	; (8004a9c <xTaskIncrementTick+0x154>)
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d120      	bne.n	80049b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004970:	4b4b      	ldr	r3, [pc, #300]	; (8004aa0 <xTaskIncrementTick+0x158>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <xTaskIncrementTick+0x48>
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	603b      	str	r3, [r7, #0]
}
 800498c:	bf00      	nop
 800498e:	e7fe      	b.n	800498e <xTaskIncrementTick+0x46>
 8004990:	4b43      	ldr	r3, [pc, #268]	; (8004aa0 <xTaskIncrementTick+0x158>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	4b43      	ldr	r3, [pc, #268]	; (8004aa4 <xTaskIncrementTick+0x15c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a41      	ldr	r2, [pc, #260]	; (8004aa0 <xTaskIncrementTick+0x158>)
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	4a41      	ldr	r2, [pc, #260]	; (8004aa4 <xTaskIncrementTick+0x15c>)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	4b40      	ldr	r3, [pc, #256]	; (8004aa8 <xTaskIncrementTick+0x160>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3301      	adds	r3, #1
 80049aa:	4a3f      	ldr	r2, [pc, #252]	; (8004aa8 <xTaskIncrementTick+0x160>)
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	f000 f9fb 	bl	8004da8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049b2:	4b3e      	ldr	r3, [pc, #248]	; (8004aac <xTaskIncrementTick+0x164>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d34d      	bcc.n	8004a58 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049bc:	4b38      	ldr	r3, [pc, #224]	; (8004aa0 <xTaskIncrementTick+0x158>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <xTaskIncrementTick+0x82>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <xTaskIncrementTick+0x84>
 80049ca:	2300      	movs	r3, #0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d004      	beq.n	80049da <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049d0:	4b36      	ldr	r3, [pc, #216]	; (8004aac <xTaskIncrementTick+0x164>)
 80049d2:	f04f 32ff 	mov.w	r2, #4294967295
 80049d6:	601a      	str	r2, [r3, #0]
					break;
 80049d8:	e03e      	b.n	8004a58 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049da:	4b31      	ldr	r3, [pc, #196]	; (8004aa0 <xTaskIncrementTick+0x158>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d203      	bcs.n	80049fa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049f2:	4a2e      	ldr	r2, [pc, #184]	; (8004aac <xTaskIncrementTick+0x164>)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6013      	str	r3, [r2, #0]
						break;
 80049f8:	e02e      	b.n	8004a58 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	3304      	adds	r3, #4
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff fa42 	bl	8003e88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	3318      	adds	r3, #24
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff fa39 	bl	8003e88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	409a      	lsls	r2, r3
 8004a1e:	4b24      	ldr	r3, [pc, #144]	; (8004ab0 <xTaskIncrementTick+0x168>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	4a22      	ldr	r2, [pc, #136]	; (8004ab0 <xTaskIncrementTick+0x168>)
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4a1f      	ldr	r2, [pc, #124]	; (8004ab4 <xTaskIncrementTick+0x16c>)
 8004a36:	441a      	add	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	f7ff f9c7 	bl	8003dd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a48:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <xTaskIncrementTick+0x170>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d3b4      	bcc.n	80049bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004a52:	2301      	movs	r3, #1
 8004a54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a56:	e7b1      	b.n	80049bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a58:	4b17      	ldr	r3, [pc, #92]	; (8004ab8 <xTaskIncrementTick+0x170>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5e:	4915      	ldr	r1, [pc, #84]	; (8004ab4 <xTaskIncrementTick+0x16c>)
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d907      	bls.n	8004a80 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004a70:	2301      	movs	r3, #1
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	e004      	b.n	8004a80 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a76:	4b11      	ldr	r3, [pc, #68]	; (8004abc <xTaskIncrementTick+0x174>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	4a0f      	ldr	r2, [pc, #60]	; (8004abc <xTaskIncrementTick+0x174>)
 8004a7e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a80:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <xTaskIncrementTick+0x178>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a8c:	697b      	ldr	r3, [r7, #20]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	2000042c 	.word	0x2000042c
 8004a9c:	20000408 	.word	0x20000408
 8004aa0:	200003bc 	.word	0x200003bc
 8004aa4:	200003c0 	.word	0x200003c0
 8004aa8:	2000041c 	.word	0x2000041c
 8004aac:	20000424 	.word	0x20000424
 8004ab0:	2000040c 	.word	0x2000040c
 8004ab4:	20000308 	.word	0x20000308
 8004ab8:	20000304 	.word	0x20000304
 8004abc:	20000414 	.word	0x20000414
 8004ac0:	20000418 	.word	0x20000418

08004ac4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004aca:	4b26      	ldr	r3, [pc, #152]	; (8004b64 <vTaskSwitchContext+0xa0>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ad2:	4b25      	ldr	r3, [pc, #148]	; (8004b68 <vTaskSwitchContext+0xa4>)
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ad8:	e03f      	b.n	8004b5a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004ada:	4b23      	ldr	r3, [pc, #140]	; (8004b68 <vTaskSwitchContext+0xa4>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004ae0:	4b22      	ldr	r3, [pc, #136]	; (8004b6c <vTaskSwitchContext+0xa8>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	fab3 f383 	clz	r3, r3
 8004aec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004aee:	7afb      	ldrb	r3, [r7, #11]
 8004af0:	f1c3 031f 	rsb	r3, r3, #31
 8004af4:	617b      	str	r3, [r7, #20]
 8004af6:	491e      	ldr	r1, [pc, #120]	; (8004b70 <vTaskSwitchContext+0xac>)
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	440b      	add	r3, r1
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	607b      	str	r3, [r7, #4]
}
 8004b1c:	bf00      	nop
 8004b1e:	e7fe      	b.n	8004b1e <vTaskSwitchContext+0x5a>
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4a11      	ldr	r2, [pc, #68]	; (8004b70 <vTaskSwitchContext+0xac>)
 8004b2c:	4413      	add	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	605a      	str	r2, [r3, #4]
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	3308      	adds	r3, #8
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d104      	bne.n	8004b50 <vTaskSwitchContext+0x8c>
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	605a      	str	r2, [r3, #4]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <vTaskSwitchContext+0xb0>)
 8004b58:	6013      	str	r3, [r2, #0]
}
 8004b5a:	bf00      	nop
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr
 8004b64:	2000042c 	.word	0x2000042c
 8004b68:	20000418 	.word	0x20000418
 8004b6c:	2000040c 	.word	0x2000040c
 8004b70:	20000308 	.word	0x20000308
 8004b74:	20000304 	.word	0x20000304

08004b78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	60fb      	str	r3, [r7, #12]
}
 8004ba0:	bf00      	nop
 8004ba2:	e7fe      	b.n	8004ba2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	3318      	adds	r3, #24
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff f96d 	bl	8003e88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bae:	4b1d      	ldr	r3, [pc, #116]	; (8004c24 <xTaskRemoveFromEventList+0xac>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d11c      	bne.n	8004bf0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff f964 	bl	8003e88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	4b17      	ldr	r3, [pc, #92]	; (8004c28 <xTaskRemoveFromEventList+0xb0>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	4a16      	ldr	r2, [pc, #88]	; (8004c28 <xTaskRemoveFromEventList+0xb0>)
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4a13      	ldr	r2, [pc, #76]	; (8004c2c <xTaskRemoveFromEventList+0xb4>)
 8004be0:	441a      	add	r2, r3
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	3304      	adds	r3, #4
 8004be6:	4619      	mov	r1, r3
 8004be8:	4610      	mov	r0, r2
 8004bea:	f7ff f8f2 	bl	8003dd2 <vListInsertEnd>
 8004bee:	e005      	b.n	8004bfc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	3318      	adds	r3, #24
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	480e      	ldr	r0, [pc, #56]	; (8004c30 <xTaskRemoveFromEventList+0xb8>)
 8004bf8:	f7ff f8eb 	bl	8003dd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c00:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <xTaskRemoveFromEventList+0xbc>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d905      	bls.n	8004c16 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c0e:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <xTaskRemoveFromEventList+0xc0>)
 8004c10:	2201      	movs	r2, #1
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	e001      	b.n	8004c1a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004c1a:	697b      	ldr	r3, [r7, #20]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	2000042c 	.word	0x2000042c
 8004c28:	2000040c 	.word	0x2000040c
 8004c2c:	20000308 	.word	0x20000308
 8004c30:	200003c4 	.word	0x200003c4
 8004c34:	20000304 	.word	0x20000304
 8004c38:	20000418 	.word	0x20000418

08004c3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c44:	f000 f852 	bl	8004cec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c48:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <prvIdleTask+0x28>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d9f9      	bls.n	8004c44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c50:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <prvIdleTask+0x2c>)
 8004c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c60:	e7f0      	b.n	8004c44 <prvIdleTask+0x8>
 8004c62:	bf00      	nop
 8004c64:	20000308 	.word	0x20000308
 8004c68:	e000ed04 	.word	0xe000ed04

08004c6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c72:	2300      	movs	r3, #0
 8004c74:	607b      	str	r3, [r7, #4]
 8004c76:	e00c      	b.n	8004c92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4a12      	ldr	r2, [pc, #72]	; (8004ccc <prvInitialiseTaskLists+0x60>)
 8004c84:	4413      	add	r3, r2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff f878 	bl	8003d7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	607b      	str	r3, [r7, #4]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b06      	cmp	r3, #6
 8004c96:	d9ef      	bls.n	8004c78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c98:	480d      	ldr	r0, [pc, #52]	; (8004cd0 <prvInitialiseTaskLists+0x64>)
 8004c9a:	f7ff f86f 	bl	8003d7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c9e:	480d      	ldr	r0, [pc, #52]	; (8004cd4 <prvInitialiseTaskLists+0x68>)
 8004ca0:	f7ff f86c 	bl	8003d7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ca4:	480c      	ldr	r0, [pc, #48]	; (8004cd8 <prvInitialiseTaskLists+0x6c>)
 8004ca6:	f7ff f869 	bl	8003d7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004caa:	480c      	ldr	r0, [pc, #48]	; (8004cdc <prvInitialiseTaskLists+0x70>)
 8004cac:	f7ff f866 	bl	8003d7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004cb0:	480b      	ldr	r0, [pc, #44]	; (8004ce0 <prvInitialiseTaskLists+0x74>)
 8004cb2:	f7ff f863 	bl	8003d7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <prvInitialiseTaskLists+0x78>)
 8004cb8:	4a05      	ldr	r2, [pc, #20]	; (8004cd0 <prvInitialiseTaskLists+0x64>)
 8004cba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <prvInitialiseTaskLists+0x7c>)
 8004cbe:	4a05      	ldr	r2, [pc, #20]	; (8004cd4 <prvInitialiseTaskLists+0x68>)
 8004cc0:	601a      	str	r2, [r3, #0]
}
 8004cc2:	bf00      	nop
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000308 	.word	0x20000308
 8004cd0:	20000394 	.word	0x20000394
 8004cd4:	200003a8 	.word	0x200003a8
 8004cd8:	200003c4 	.word	0x200003c4
 8004cdc:	200003d8 	.word	0x200003d8
 8004ce0:	200003f0 	.word	0x200003f0
 8004ce4:	200003bc 	.word	0x200003bc
 8004ce8:	200003c0 	.word	0x200003c0

08004cec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cf2:	e019      	b.n	8004d28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004cf4:	f000 fa5a 	bl	80051ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004cf8:	4b10      	ldr	r3, [pc, #64]	; (8004d3c <prvCheckTasksWaitingTermination+0x50>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff f8bf 	bl	8003e88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d0a:	4b0d      	ldr	r3, [pc, #52]	; (8004d40 <prvCheckTasksWaitingTermination+0x54>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	4a0b      	ldr	r2, [pc, #44]	; (8004d40 <prvCheckTasksWaitingTermination+0x54>)
 8004d12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d14:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <prvCheckTasksWaitingTermination+0x58>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	4a0a      	ldr	r2, [pc, #40]	; (8004d44 <prvCheckTasksWaitingTermination+0x58>)
 8004d1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d1e:	f000 fa75 	bl	800520c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f810 	bl	8004d48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <prvCheckTasksWaitingTermination+0x58>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e1      	bne.n	8004cf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d30:	bf00      	nop
 8004d32:	bf00      	nop
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	200003d8 	.word	0x200003d8
 8004d40:	20000404 	.word	0x20000404
 8004d44:	200003ec 	.word	0x200003ec

08004d48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d108      	bne.n	8004d6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fbe8 	bl	8005534 <vPortFree>
				vPortFree( pxTCB );
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fbe5 	bl	8005534 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d6a:	e018      	b.n	8004d9e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d103      	bne.n	8004d7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fbdc 	bl	8005534 <vPortFree>
	}
 8004d7c:	e00f      	b.n	8004d9e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d00a      	beq.n	8004d9e <prvDeleteTCB+0x56>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	60fb      	str	r3, [r7, #12]
}
 8004d9a:	bf00      	nop
 8004d9c:	e7fe      	b.n	8004d9c <prvDeleteTCB+0x54>
	}
 8004d9e:	bf00      	nop
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dae:	4b0e      	ldr	r3, [pc, #56]	; (8004de8 <prvResetNextTaskUnblockTime+0x40>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <prvResetNextTaskUnblockTime+0x14>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <prvResetNextTaskUnblockTime+0x16>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d004      	beq.n	8004dcc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <prvResetNextTaskUnblockTime+0x44>)
 8004dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004dca:	e008      	b.n	8004dde <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <prvResetNextTaskUnblockTime+0x40>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	4a04      	ldr	r2, [pc, #16]	; (8004dec <prvResetNextTaskUnblockTime+0x44>)
 8004ddc:	6013      	str	r3, [r2, #0]
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bc80      	pop	{r7}
 8004de6:	4770      	bx	lr
 8004de8:	200003bc 	.word	0x200003bc
 8004dec:	20000424 	.word	0x20000424

08004df0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d06e      	beq.n	8004ee4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e06:	4b3a      	ldr	r3, [pc, #232]	; (8004ef0 <xTaskPriorityDisinherit+0x100>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d00a      	beq.n	8004e26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	60fb      	str	r3, [r7, #12]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	60bb      	str	r3, [r7, #8]
}
 8004e40:	bf00      	nop
 8004e42:	e7fe      	b.n	8004e42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e48:	1e5a      	subs	r2, r3, #1
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d044      	beq.n	8004ee4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d140      	bne.n	8004ee4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	3304      	adds	r3, #4
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff f80e 	bl	8003e88 <uxListRemove>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d115      	bne.n	8004e9e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e76:	491f      	ldr	r1, [pc, #124]	; (8004ef4 <xTaskPriorityDisinherit+0x104>)
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10a      	bne.n	8004e9e <xTaskPriorityDisinherit+0xae>
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43da      	mvns	r2, r3
 8004e94:	4b18      	ldr	r3, [pc, #96]	; (8004ef8 <xTaskPriorityDisinherit+0x108>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <xTaskPriorityDisinherit+0x108>)
 8004e9c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	f1c3 0207 	rsb	r2, r3, #7
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	409a      	lsls	r2, r3
 8004eba:	4b0f      	ldr	r3, [pc, #60]	; (8004ef8 <xTaskPriorityDisinherit+0x108>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	4a0d      	ldr	r2, [pc, #52]	; (8004ef8 <xTaskPriorityDisinherit+0x108>)
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec8:	4613      	mov	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4a08      	ldr	r2, [pc, #32]	; (8004ef4 <xTaskPriorityDisinherit+0x104>)
 8004ed2:	441a      	add	r2, r3
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4610      	mov	r0, r2
 8004edc:	f7fe ff79 	bl	8003dd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ee4:	697b      	ldr	r3, [r7, #20]
	}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000304 	.word	0x20000304
 8004ef4:	20000308 	.word	0x20000308
 8004ef8:	2000040c 	.word	0x2000040c

08004efc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f06:	4b29      	ldr	r3, [pc, #164]	; (8004fac <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f0c:	4b28      	ldr	r3, [pc, #160]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3304      	adds	r3, #4
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe ffb8 	bl	8003e88 <uxListRemove>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10b      	bne.n	8004f36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004f1e:	4b24      	ldr	r3, [pc, #144]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	2201      	movs	r2, #1
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43da      	mvns	r2, r3
 8004f2c:	4b21      	ldr	r3, [pc, #132]	; (8004fb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4013      	ands	r3, r2
 8004f32:	4a20      	ldr	r2, [pc, #128]	; (8004fb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3c:	d10a      	bne.n	8004f54 <prvAddCurrentTaskToDelayedList+0x58>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d007      	beq.n	8004f54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f44:	4b1a      	ldr	r3, [pc, #104]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	481a      	ldr	r0, [pc, #104]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f4e:	f7fe ff40 	bl	8003dd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f52:	e026      	b.n	8004fa2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4413      	add	r3, r2
 8004f5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f5c:	4b14      	ldr	r3, [pc, #80]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d209      	bcs.n	8004f80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f6c:	4b13      	ldr	r3, [pc, #76]	; (8004fbc <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	4b0f      	ldr	r3, [pc, #60]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3304      	adds	r3, #4
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f7fe ff4d 	bl	8003e18 <vListInsert>
}
 8004f7e:	e010      	b.n	8004fa2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f80:	4b0f      	ldr	r3, [pc, #60]	; (8004fc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	4b0a      	ldr	r3, [pc, #40]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	f7fe ff43 	bl	8003e18 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f92:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d202      	bcs.n	8004fa2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f9c:	4a09      	ldr	r2, [pc, #36]	; (8004fc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	6013      	str	r3, [r2, #0]
}
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20000408 	.word	0x20000408
 8004fb0:	20000304 	.word	0x20000304
 8004fb4:	2000040c 	.word	0x2000040c
 8004fb8:	200003f0 	.word	0x200003f0
 8004fbc:	200003c0 	.word	0x200003c0
 8004fc0:	200003bc 	.word	0x200003bc
 8004fc4:	20000424 	.word	0x20000424

08004fc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3b04      	subs	r3, #4
 8004fd8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3b04      	subs	r3, #4
 8004fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f023 0201 	bic.w	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3b04      	subs	r3, #4
 8004ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ff8:	4a08      	ldr	r2, [pc, #32]	; (800501c <pxPortInitialiseStack+0x54>)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	3b14      	subs	r3, #20
 8005002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	3b20      	subs	r3, #32
 800500e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005010:	68fb      	ldr	r3, [r7, #12]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr
 800501c:	08005021 	.word	0x08005021

08005020 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005026:	2300      	movs	r3, #0
 8005028:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800502a:	4b12      	ldr	r3, [pc, #72]	; (8005074 <prvTaskExitError+0x54>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005032:	d00a      	beq.n	800504a <prvTaskExitError+0x2a>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	60fb      	str	r3, [r7, #12]
}
 8005046:	bf00      	nop
 8005048:	e7fe      	b.n	8005048 <prvTaskExitError+0x28>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	60bb      	str	r3, [r7, #8]
}
 800505c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800505e:	bf00      	nop
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0fc      	beq.n	8005060 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005066:	bf00      	nop
 8005068:	bf00      	nop
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	2000000c 	.word	0x2000000c
	...

08005080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005080:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <pxCurrentTCBConst2>)
 8005082:	6819      	ldr	r1, [r3, #0]
 8005084:	6808      	ldr	r0, [r1, #0]
 8005086:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800508a:	f380 8809 	msr	PSP, r0
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f04f 0000 	mov.w	r0, #0
 8005096:	f380 8811 	msr	BASEPRI, r0
 800509a:	f04e 0e0d 	orr.w	lr, lr, #13
 800509e:	4770      	bx	lr

080050a0 <pxCurrentTCBConst2>:
 80050a0:	20000304 	.word	0x20000304
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop

080050a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80050a8:	4806      	ldr	r0, [pc, #24]	; (80050c4 <prvPortStartFirstTask+0x1c>)
 80050aa:	6800      	ldr	r0, [r0, #0]
 80050ac:	6800      	ldr	r0, [r0, #0]
 80050ae:	f380 8808 	msr	MSP, r0
 80050b2:	b662      	cpsie	i
 80050b4:	b661      	cpsie	f
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	df00      	svc	0
 80050c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050c2:	bf00      	nop
 80050c4:	e000ed08 	.word	0xe000ed08

080050c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050ce:	4b32      	ldr	r3, [pc, #200]	; (8005198 <xPortStartScheduler+0xd0>)
 80050d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	22ff      	movs	r2, #255	; 0xff
 80050de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	4b2a      	ldr	r3, [pc, #168]	; (800519c <xPortStartScheduler+0xd4>)
 80050f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050f6:	4b2a      	ldr	r3, [pc, #168]	; (80051a0 <xPortStartScheduler+0xd8>)
 80050f8:	2207      	movs	r2, #7
 80050fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050fc:	e009      	b.n	8005112 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80050fe:	4b28      	ldr	r3, [pc, #160]	; (80051a0 <xPortStartScheduler+0xd8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3b01      	subs	r3, #1
 8005104:	4a26      	ldr	r2, [pc, #152]	; (80051a0 <xPortStartScheduler+0xd8>)
 8005106:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	b2db      	uxtb	r3, r3
 8005110:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511a:	2b80      	cmp	r3, #128	; 0x80
 800511c:	d0ef      	beq.n	80050fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800511e:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <xPortStartScheduler+0xd8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f1c3 0307 	rsb	r3, r3, #7
 8005126:	2b04      	cmp	r3, #4
 8005128:	d00a      	beq.n	8005140 <xPortStartScheduler+0x78>
	__asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	60bb      	str	r3, [r7, #8]
}
 800513c:	bf00      	nop
 800513e:	e7fe      	b.n	800513e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005140:	4b17      	ldr	r3, [pc, #92]	; (80051a0 <xPortStartScheduler+0xd8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	021b      	lsls	r3, r3, #8
 8005146:	4a16      	ldr	r2, [pc, #88]	; (80051a0 <xPortStartScheduler+0xd8>)
 8005148:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800514a:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <xPortStartScheduler+0xd8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005152:	4a13      	ldr	r2, [pc, #76]	; (80051a0 <xPortStartScheduler+0xd8>)
 8005154:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	b2da      	uxtb	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800515e:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <xPortStartScheduler+0xdc>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a10      	ldr	r2, [pc, #64]	; (80051a4 <xPortStartScheduler+0xdc>)
 8005164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005168:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800516a:	4b0e      	ldr	r3, [pc, #56]	; (80051a4 <xPortStartScheduler+0xdc>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a0d      	ldr	r2, [pc, #52]	; (80051a4 <xPortStartScheduler+0xdc>)
 8005170:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005174:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005176:	f000 f8b9 	bl	80052ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800517a:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <xPortStartScheduler+0xe0>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005180:	f7ff ff92 	bl	80050a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005184:	f7ff fc9e 	bl	8004ac4 <vTaskSwitchContext>
	prvTaskExitError();
 8005188:	f7ff ff4a 	bl	8005020 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	e000e400 	.word	0xe000e400
 800519c:	20000430 	.word	0x20000430
 80051a0:	20000434 	.word	0x20000434
 80051a4:	e000ed20 	.word	0xe000ed20
 80051a8:	2000000c 	.word	0x2000000c

080051ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	607b      	str	r3, [r7, #4]
}
 80051c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051c6:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <vPortEnterCritical+0x58>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3301      	adds	r3, #1
 80051cc:	4a0d      	ldr	r2, [pc, #52]	; (8005204 <vPortEnterCritical+0x58>)
 80051ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051d0:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <vPortEnterCritical+0x58>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d10f      	bne.n	80051f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051d8:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <vPortEnterCritical+0x5c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80051e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	603b      	str	r3, [r7, #0]
}
 80051f4:	bf00      	nop
 80051f6:	e7fe      	b.n	80051f6 <vPortEnterCritical+0x4a>
	}
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	2000000c 	.word	0x2000000c
 8005208:	e000ed04 	.word	0xe000ed04

0800520c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005212:	4b11      	ldr	r3, [pc, #68]	; (8005258 <vPortExitCritical+0x4c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10a      	bne.n	8005230 <vPortExitCritical+0x24>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	607b      	str	r3, [r7, #4]
}
 800522c:	bf00      	nop
 800522e:	e7fe      	b.n	800522e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005230:	4b09      	ldr	r3, [pc, #36]	; (8005258 <vPortExitCritical+0x4c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3b01      	subs	r3, #1
 8005236:	4a08      	ldr	r2, [pc, #32]	; (8005258 <vPortExitCritical+0x4c>)
 8005238:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800523a:	4b07      	ldr	r3, [pc, #28]	; (8005258 <vPortExitCritical+0x4c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d105      	bne.n	800524e <vPortExitCritical+0x42>
 8005242:	2300      	movs	r3, #0
 8005244:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	f383 8811 	msr	BASEPRI, r3
}
 800524c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr
 8005258:	2000000c 	.word	0x2000000c
 800525c:	00000000 	.word	0x00000000

08005260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005260:	f3ef 8009 	mrs	r0, PSP
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	4b0d      	ldr	r3, [pc, #52]	; (80052a0 <pxCurrentTCBConst>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005270:	6010      	str	r0, [r2, #0]
 8005272:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005276:	f04f 0050 	mov.w	r0, #80	; 0x50
 800527a:	f380 8811 	msr	BASEPRI, r0
 800527e:	f7ff fc21 	bl	8004ac4 <vTaskSwitchContext>
 8005282:	f04f 0000 	mov.w	r0, #0
 8005286:	f380 8811 	msr	BASEPRI, r0
 800528a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800528e:	6819      	ldr	r1, [r3, #0]
 8005290:	6808      	ldr	r0, [r1, #0]
 8005292:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005296:	f380 8809 	msr	PSP, r0
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	4770      	bx	lr

080052a0 <pxCurrentTCBConst>:
 80052a0:	20000304 	.word	0x20000304
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop

080052a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	607b      	str	r3, [r7, #4]
}
 80052c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052c2:	f7ff fb41 	bl	8004948 <xTaskIncrementTick>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <SysTick_Handler+0x40>)
 80052ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	2300      	movs	r3, #0
 80052d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	f383 8811 	msr	BASEPRI, r3
}
 80052de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052e0:	bf00      	nop
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	e000ed04 	.word	0xe000ed04

080052ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052f0:	4b0a      	ldr	r3, [pc, #40]	; (800531c <vPortSetupTimerInterrupt+0x30>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052f6:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <vPortSetupTimerInterrupt+0x34>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052fc:	4b09      	ldr	r3, [pc, #36]	; (8005324 <vPortSetupTimerInterrupt+0x38>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a09      	ldr	r2, [pc, #36]	; (8005328 <vPortSetupTimerInterrupt+0x3c>)
 8005302:	fba2 2303 	umull	r2, r3, r2, r3
 8005306:	099b      	lsrs	r3, r3, #6
 8005308:	4a08      	ldr	r2, [pc, #32]	; (800532c <vPortSetupTimerInterrupt+0x40>)
 800530a:	3b01      	subs	r3, #1
 800530c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800530e:	4b03      	ldr	r3, [pc, #12]	; (800531c <vPortSetupTimerInterrupt+0x30>)
 8005310:	2207      	movs	r2, #7
 8005312:	601a      	str	r2, [r3, #0]
}
 8005314:	bf00      	nop
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr
 800531c:	e000e010 	.word	0xe000e010
 8005320:	e000e018 	.word	0xe000e018
 8005324:	20000000 	.word	0x20000000
 8005328:	10624dd3 	.word	0x10624dd3
 800532c:	e000e014 	.word	0xe000e014

08005330 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005336:	f3ef 8305 	mrs	r3, IPSR
 800533a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b0f      	cmp	r3, #15
 8005340:	d914      	bls.n	800536c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005342:	4a16      	ldr	r2, [pc, #88]	; (800539c <vPortValidateInterruptPriority+0x6c>)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800534c:	4b14      	ldr	r3, [pc, #80]	; (80053a0 <vPortValidateInterruptPriority+0x70>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	7afa      	ldrb	r2, [r7, #11]
 8005352:	429a      	cmp	r2, r3
 8005354:	d20a      	bcs.n	800536c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	607b      	str	r3, [r7, #4]
}
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800536c:	4b0d      	ldr	r3, [pc, #52]	; (80053a4 <vPortValidateInterruptPriority+0x74>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005374:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <vPortValidateInterruptPriority+0x78>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d90a      	bls.n	8005392 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800537c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	603b      	str	r3, [r7, #0]
}
 800538e:	bf00      	nop
 8005390:	e7fe      	b.n	8005390 <vPortValidateInterruptPriority+0x60>
	}
 8005392:	bf00      	nop
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr
 800539c:	e000e3f0 	.word	0xe000e3f0
 80053a0:	20000430 	.word	0x20000430
 80053a4:	e000ed0c 	.word	0xe000ed0c
 80053a8:	20000434 	.word	0x20000434

080053ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08a      	sub	sp, #40	; 0x28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053b4:	2300      	movs	r3, #0
 80053b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053b8:	f7ff fa1c 	bl	80047f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053bc:	4b58      	ldr	r3, [pc, #352]	; (8005520 <pvPortMalloc+0x174>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053c4:	f000 f910 	bl	80055e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053c8:	4b56      	ldr	r3, [pc, #344]	; (8005524 <pvPortMalloc+0x178>)
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4013      	ands	r3, r2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f040 808e 	bne.w	80054f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d01d      	beq.n	8005418 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80053dc:	2208      	movs	r2, #8
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4413      	add	r3, r2
 80053e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d014      	beq.n	8005418 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f023 0307 	bic.w	r3, r3, #7
 80053f4:	3308      	adds	r3, #8
 80053f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <pvPortMalloc+0x6c>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	617b      	str	r3, [r7, #20]
}
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d069      	beq.n	80054f2 <pvPortMalloc+0x146>
 800541e:	4b42      	ldr	r3, [pc, #264]	; (8005528 <pvPortMalloc+0x17c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	429a      	cmp	r2, r3
 8005426:	d864      	bhi.n	80054f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005428:	4b40      	ldr	r3, [pc, #256]	; (800552c <pvPortMalloc+0x180>)
 800542a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800542c:	4b3f      	ldr	r3, [pc, #252]	; (800552c <pvPortMalloc+0x180>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005432:	e004      	b.n	800543e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	429a      	cmp	r2, r3
 8005446:	d903      	bls.n	8005450 <pvPortMalloc+0xa4>
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1f1      	bne.n	8005434 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005450:	4b33      	ldr	r3, [pc, #204]	; (8005520 <pvPortMalloc+0x174>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005456:	429a      	cmp	r2, r3
 8005458:	d04b      	beq.n	80054f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2208      	movs	r2, #8
 8005460:	4413      	add	r3, r2
 8005462:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	1ad2      	subs	r2, r2, r3
 8005474:	2308      	movs	r3, #8
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	429a      	cmp	r2, r3
 800547a:	d91f      	bls.n	80054bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800547c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4413      	add	r3, r2
 8005482:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <pvPortMalloc+0xf8>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	613b      	str	r3, [r7, #16]
}
 80054a0:	bf00      	nop
 80054a2:	e7fe      	b.n	80054a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	1ad2      	subs	r2, r2, r3
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054b6:	69b8      	ldr	r0, [r7, #24]
 80054b8:	f000 f8f8 	bl	80056ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054bc:	4b1a      	ldr	r3, [pc, #104]	; (8005528 <pvPortMalloc+0x17c>)
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	4a18      	ldr	r2, [pc, #96]	; (8005528 <pvPortMalloc+0x17c>)
 80054c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054ca:	4b17      	ldr	r3, [pc, #92]	; (8005528 <pvPortMalloc+0x17c>)
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	4b18      	ldr	r3, [pc, #96]	; (8005530 <pvPortMalloc+0x184>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d203      	bcs.n	80054de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054d6:	4b14      	ldr	r3, [pc, #80]	; (8005528 <pvPortMalloc+0x17c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a15      	ldr	r2, [pc, #84]	; (8005530 <pvPortMalloc+0x184>)
 80054dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	4b10      	ldr	r3, [pc, #64]	; (8005524 <pvPortMalloc+0x178>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	431a      	orrs	r2, r3
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054f2:	f7ff f98d 	bl	8004810 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <pvPortMalloc+0x16a>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	60fb      	str	r3, [r7, #12]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <pvPortMalloc+0x168>
	return pvReturn;
 8005516:	69fb      	ldr	r3, [r7, #28]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3728      	adds	r7, #40	; 0x28
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20001040 	.word	0x20001040
 8005524:	2000104c 	.word	0x2000104c
 8005528:	20001044 	.word	0x20001044
 800552c:	20001038 	.word	0x20001038
 8005530:	20001048 	.word	0x20001048

08005534 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d048      	beq.n	80055d8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005546:	2308      	movs	r3, #8
 8005548:	425b      	negs	r3, r3
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4413      	add	r3, r2
 800554e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	4b21      	ldr	r3, [pc, #132]	; (80055e0 <vPortFree+0xac>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4013      	ands	r3, r2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10a      	bne.n	8005578 <vPortFree+0x44>
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	60fb      	str	r3, [r7, #12]
}
 8005574:	bf00      	nop
 8005576:	e7fe      	b.n	8005576 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <vPortFree+0x62>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	60bb      	str	r3, [r7, #8]
}
 8005592:	bf00      	nop
 8005594:	e7fe      	b.n	8005594 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	4b11      	ldr	r3, [pc, #68]	; (80055e0 <vPortFree+0xac>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4013      	ands	r3, r2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d019      	beq.n	80055d8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d115      	bne.n	80055d8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <vPortFree+0xac>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	43db      	mvns	r3, r3
 80055b6:	401a      	ands	r2, r3
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055bc:	f7ff f91a 	bl	80047f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	4b07      	ldr	r3, [pc, #28]	; (80055e4 <vPortFree+0xb0>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4413      	add	r3, r2
 80055ca:	4a06      	ldr	r2, [pc, #24]	; (80055e4 <vPortFree+0xb0>)
 80055cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055ce:	6938      	ldr	r0, [r7, #16]
 80055d0:	f000 f86c 	bl	80056ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80055d4:	f7ff f91c 	bl	8004810 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055d8:	bf00      	nop
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	2000104c 	.word	0x2000104c
 80055e4:	20001044 	.word	0x20001044

080055e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80055f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055f4:	4b27      	ldr	r3, [pc, #156]	; (8005694 <prvHeapInit+0xac>)
 80055f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00c      	beq.n	800561c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3307      	adds	r3, #7
 8005606:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0307 	bic.w	r3, r3, #7
 800560e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	4a1f      	ldr	r2, [pc, #124]	; (8005694 <prvHeapInit+0xac>)
 8005618:	4413      	add	r3, r2
 800561a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005620:	4a1d      	ldr	r2, [pc, #116]	; (8005698 <prvHeapInit+0xb0>)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005626:	4b1c      	ldr	r3, [pc, #112]	; (8005698 <prvHeapInit+0xb0>)
 8005628:	2200      	movs	r2, #0
 800562a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	4413      	add	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005634:	2208      	movs	r2, #8
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	1a9b      	subs	r3, r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0307 	bic.w	r3, r3, #7
 8005642:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4a15      	ldr	r2, [pc, #84]	; (800569c <prvHeapInit+0xb4>)
 8005648:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800564a:	4b14      	ldr	r3, [pc, #80]	; (800569c <prvHeapInit+0xb4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2200      	movs	r2, #0
 8005650:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005652:	4b12      	ldr	r3, [pc, #72]	; (800569c <prvHeapInit+0xb4>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	1ad2      	subs	r2, r2, r3
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005668:	4b0c      	ldr	r3, [pc, #48]	; (800569c <prvHeapInit+0xb4>)
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	4a0a      	ldr	r2, [pc, #40]	; (80056a0 <prvHeapInit+0xb8>)
 8005676:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	4a09      	ldr	r2, [pc, #36]	; (80056a4 <prvHeapInit+0xbc>)
 800567e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005680:	4b09      	ldr	r3, [pc, #36]	; (80056a8 <prvHeapInit+0xc0>)
 8005682:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005686:	601a      	str	r2, [r3, #0]
}
 8005688:	bf00      	nop
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	20000438 	.word	0x20000438
 8005698:	20001038 	.word	0x20001038
 800569c:	20001040 	.word	0x20001040
 80056a0:	20001048 	.word	0x20001048
 80056a4:	20001044 	.word	0x20001044
 80056a8:	2000104c 	.word	0x2000104c

080056ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056b4:	4b27      	ldr	r3, [pc, #156]	; (8005754 <prvInsertBlockIntoFreeList+0xa8>)
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	e002      	b.n	80056c0 <prvInsertBlockIntoFreeList+0x14>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d8f7      	bhi.n	80056ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	4413      	add	r3, r2
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d108      	bne.n	80056ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	441a      	add	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	441a      	add	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d118      	bne.n	8005734 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	4b14      	ldr	r3, [pc, #80]	; (8005758 <prvInsertBlockIntoFreeList+0xac>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d00d      	beq.n	800572a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	441a      	add	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	e008      	b.n	800573c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800572a:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <prvInsertBlockIntoFreeList+0xac>)
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	e003      	b.n	800573c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	429a      	cmp	r2, r3
 8005742:	d002      	beq.n	800574a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr
 8005754:	20001038 	.word	0x20001038
 8005758:	20001040 	.word	0x20001040

0800575c <SX1276Init>:
/*
 * Radio driver functions implementation
 */

void SX1276Init( RadioEvents_t *events )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  // my
    SX1276.Reset.port = SX1276_RST_GPIO_Port;
 8005764:	4b2e      	ldr	r3, [pc, #184]	; (8005820 <SX1276Init+0xc4>)
 8005766:	4a2f      	ldr	r2, [pc, #188]	; (8005824 <SX1276Init+0xc8>)
 8005768:	601a      	str	r2, [r3, #0]
    SX1276.Reset.pin = SX1276_RST_Pin;
 800576a:	4b2d      	ldr	r3, [pc, #180]	; (8005820 <SX1276Init+0xc4>)
 800576c:	2201      	movs	r2, #1
 800576e:	809a      	strh	r2, [r3, #4]
//    SX1276.Spi.Nss.port = SPI2_NSS_GPIO_Port;
//    SX1276.Spi.Nss.pin  = SPI2_NSS_Pin;
//
//    SX1276.Spi.SpiId = SPI_2;

	SX1276.Spi.Nss.port = SPI1_NSS_GPIO_Port;
 8005770:	4b2b      	ldr	r3, [pc, #172]	; (8005820 <SX1276Init+0xc4>)
 8005772:	4a2d      	ldr	r2, [pc, #180]	; (8005828 <SX1276Init+0xcc>)
 8005774:	63da      	str	r2, [r3, #60]	; 0x3c
	SX1276.Spi.Nss.pin = SPI1_NSS_Pin;
 8005776:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <SX1276Init+0xc4>)
 8005778:	2210      	movs	r2, #16
 800577a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	SX1276.Spi.SpiId = SPI_1;
 800577e:	4b28      	ldr	r3, [pc, #160]	; (8005820 <SX1276Init+0xc4>)
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    uint8_t i;

    RadioEvents = events;
 8005786:	4a29      	ldr	r2, [pc, #164]	; (800582c <SX1276Init+0xd0>)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800578c:	4928      	ldr	r1, [pc, #160]	; (8005830 <SX1276Init+0xd4>)
 800578e:	4829      	ldr	r0, [pc, #164]	; (8005834 <SX1276Init+0xd8>)
 8005790:	f002 febc 	bl	800850c <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8005794:	4926      	ldr	r1, [pc, #152]	; (8005830 <SX1276Init+0xd4>)
 8005796:	4828      	ldr	r0, [pc, #160]	; (8005838 <SX1276Init+0xdc>)
 8005798:	f002 feb8 	bl	800850c <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800579c:	4924      	ldr	r1, [pc, #144]	; (8005830 <SX1276Init+0xd4>)
 800579e:	4827      	ldr	r0, [pc, #156]	; (800583c <SX1276Init+0xe0>)
 80057a0:	f002 feb4 	bl	800850c <TimerInit>

    SX1276Reset( );
 80057a4:	f002 fd3e 	bl	8008224 <SX1276Reset>

    RxChainCalibration( );
 80057a8:	f000 f8fa 	bl	80059a0 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80057ac:	2000      	movs	r0, #0
 80057ae:	f001 f8b3 	bl	8006918 <SX1276SetOpMode>

    SX1276IoInit();
 80057b2:	f002 fccd 	bl	8008150 <SX1276IoInit>

    SX1276IoIrqInit( DioIrq );
 80057b6:	4822      	ldr	r0, [pc, #136]	; (8005840 <SX1276Init+0xe4>)
 80057b8:	f002 fcfe 	bl	80081b8 <SX1276IoIrqInit>


    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80057bc:	2300      	movs	r3, #0
 80057be:	73fb      	strb	r3, [r7, #15]
 80057c0:	e020      	b.n	8005804 <SX1276Init+0xa8>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 80057c2:	7bfa      	ldrb	r2, [r7, #15]
 80057c4:	491f      	ldr	r1, [pc, #124]	; (8005844 <SX1276Init+0xe8>)
 80057c6:	4613      	mov	r3, r2
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	4413      	add	r3, r2
 80057cc:	440b      	add	r3, r1
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f001 f8cd 	bl	8006970 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80057d6:	7bfa      	ldrb	r2, [r7, #15]
 80057d8:	491a      	ldr	r1, [pc, #104]	; (8005844 <SX1276Init+0xe8>)
 80057da:	4613      	mov	r3, r2
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	4413      	add	r3, r2
 80057e0:	440b      	add	r3, r1
 80057e2:	3301      	adds	r3, #1
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	7bfa      	ldrb	r2, [r7, #15]
 80057ea:	4916      	ldr	r1, [pc, #88]	; (8005844 <SX1276Init+0xe8>)
 80057ec:	4613      	mov	r3, r2
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	4413      	add	r3, r2
 80057f2:	440b      	add	r3, r1
 80057f4:	3302      	adds	r3, #2
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	4619      	mov	r1, r3
 80057fa:	f001 f911 	bl	8006a20 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	3301      	adds	r3, #1
 8005802:	73fb      	strb	r3, [r7, #15]
 8005804:	7bfb      	ldrb	r3, [r7, #15]
 8005806:	2b0f      	cmp	r3, #15
 8005808:	d9db      	bls.n	80057c2 <SX1276Init+0x66>
    }

    SX1276SetModem( MODEM_FSK );
 800580a:	2000      	movs	r0, #0
 800580c:	f001 f8b0 	bl	8006970 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 8005810:	4b03      	ldr	r3, [pc, #12]	; (8005820 <SX1276Init+0xc4>)
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8005818:	bf00      	nop
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	2000139c 	.word	0x2000139c
 8005824:	40020800 	.word	0x40020800
 8005828:	40020000 	.word	0x40020000
 800582c:	20001050 	.word	0x20001050
 8005830:	08006ea9 	.word	0x08006ea9
 8005834:	2000136c 	.word	0x2000136c
 8005838:	20001444 	.word	0x20001444
 800583c:	20001384 	.word	0x20001384
 8005840:	20000010 	.word	0x20000010
 8005844:	08009d84 	.word	0x08009d84

08005848 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 800584c:	4b03      	ldr	r3, [pc, #12]	; (800585c <SX1276GetStatus+0x14>)
 800584e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
}
 8005852:	4618      	mov	r0, r3
 8005854:	46bd      	mov	sp, r7
 8005856:	bc80      	pop	{r7}
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	2000139c 	.word	0x2000139c

08005860 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
    uint32_t freqInPllSteps = SX1276ConvertFreqInHzToPllStep( freq );
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f001 f9f5 	bl	8006c58 <SX1276ConvertFreqInHzToPllStep>
 800586e:	60f8      	str	r0, [r7, #12]

    SX1276.Settings.Channel = freq;
 8005870:	4a0d      	ldr	r2, [pc, #52]	; (80058a8 <SX1276SetChannel+0x48>)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6493      	str	r3, [r2, #72]	; 0x48

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	0c1b      	lsrs	r3, r3, #16
 800587a:	b2db      	uxtb	r3, r3
 800587c:	4619      	mov	r1, r3
 800587e:	2006      	movs	r0, #6
 8005880:	f001 f8ce 	bl	8006a20 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	0a1b      	lsrs	r3, r3, #8
 8005888:	b2db      	uxtb	r3, r3
 800588a:	4619      	mov	r1, r3
 800588c:	2007      	movs	r0, #7
 800588e:	f001 f8c7 	bl	8006a20 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	4619      	mov	r1, r3
 8005898:	2008      	movs	r0, #8
 800589a:	f001 f8c1 	bl	8006a20 <SX1276Write>
}
 800589e:	bf00      	nop
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	2000139c 	.word	0x2000139c

080058ac <SX1276IsChannelFree>:

bool SX1276IsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	603b      	str	r3, [r7, #0]
 80058b8:	4613      	mov	r3, r2
 80058ba:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80058bc:	2301      	movs	r3, #1
 80058be:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	613b      	str	r3, [r7, #16]

    SX1276SetSleep( );
 80058c8:	f000 fd34 	bl	8006334 <SX1276SetSleep>

    SX1276SetModem( MODEM_FSK );
 80058cc:	2000      	movs	r0, #0
 80058ce:	f001 f84f 	bl	8006970 <SX1276SetModem>

    SX1276SetChannel( freq );
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f7ff ffc4 	bl	8005860 <SX1276SetChannel>

    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 80058d8:	68b8      	ldr	r0, [r7, #8]
 80058da:	f001 f9e3 	bl	8006ca4 <GetFskBandwidthRegValue>
 80058de:	4603      	mov	r3, r0
 80058e0:	4619      	mov	r1, r3
 80058e2:	2012      	movs	r0, #18
 80058e4:	f001 f89c 	bl	8006a20 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 80058e8:	68b8      	ldr	r0, [r7, #8]
 80058ea:	f001 f9db 	bl	8006ca4 <GetFskBandwidthRegValue>
 80058ee:	4603      	mov	r3, r0
 80058f0:	4619      	mov	r1, r3
 80058f2:	2013      	movs	r0, #19
 80058f4:	f001 f894 	bl	8006a20 <SX1276Write>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80058f8:	2005      	movs	r0, #5
 80058fa:	f001 f80d 	bl	8006918 <SX1276SetOpMode>

    DelayMs( 1 );
 80058fe:	2001      	movs	r0, #1
 8005900:	f001 fff6 	bl	80078f0 <DelayMs>

    carrierSenseTime = TimerGetCurrentTime( );
 8005904:	f002 fff9 	bl	80088fa <TimerGetCurrentTime>
 8005908:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800590a:	e00d      	b.n	8005928 <SX1276IsChannelFree+0x7c>
    {
        rssi = SX1276ReadRssi( MODEM_FSK );
 800590c:	2000      	movs	r0, #0
 800590e:	f000 ffc5 	bl	800689c <SX1276ReadRssi>
 8005912:	4603      	mov	r3, r0
 8005914:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8005916:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800591a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800591e:	429a      	cmp	r2, r3
 8005920:	dd02      	ble.n	8005928 <SX1276IsChannelFree+0x7c>
        {
            status = false;
 8005922:	2300      	movs	r3, #0
 8005924:	75fb      	strb	r3, [r7, #23]
            break;
 8005926:	e006      	b.n	8005936 <SX1276IsChannelFree+0x8a>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8005928:	6938      	ldr	r0, [r7, #16]
 800592a:	f002 fff4 	bl	8008916 <TimerGetElapsedTime>
 800592e:	4602      	mov	r2, r0
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	4293      	cmp	r3, r2
 8005934:	d8ea      	bhi.n	800590c <SX1276IsChannelFree+0x60>
        }
    }
    SX1276SetSleep( );
 8005936:	f000 fcfd 	bl	8006334 <SX1276SetSleep>
    return status;
 800593a:	7dfb      	ldrb	r3, [r7, #23]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <SX1276Random>:

uint32_t SX1276Random( void )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 800594e:	2001      	movs	r0, #1
 8005950:	f001 f80e 	bl	8006970 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8005954:	21ff      	movs	r1, #255	; 0xff
 8005956:	2011      	movs	r0, #17
 8005958:	f001 f862 	bl	8006a20 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800595c:	2005      	movs	r0, #5
 800595e:	f000 ffdb 	bl	8006918 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 8005962:	2300      	movs	r3, #0
 8005964:	71fb      	strb	r3, [r7, #7]
 8005966:	e011      	b.n	800598c <SX1276Random+0x48>
    {
        DelayMs( 1 );
 8005968:	2001      	movs	r0, #1
 800596a:	f001 ffc1 	bl	80078f0 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800596e:	202c      	movs	r0, #44	; 0x2c
 8005970:	f001 f866 	bl	8006a40 <SX1276Read>
 8005974:	4603      	mov	r3, r0
 8005976:	f003 0201 	and.w	r2, r3, #1
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	fa02 f303 	lsl.w	r3, r2, r3
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	4313      	orrs	r3, r2
 8005984:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	3301      	adds	r3, #1
 800598a:	71fb      	strb	r3, [r7, #7]
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	2b1f      	cmp	r3, #31
 8005990:	d9ea      	bls.n	8005968 <SX1276Random+0x24>
    }

    SX1276SetSleep( );
 8005992:	f000 fccf 	bl	8006334 <SX1276SetSleep>

    return rnd;
 8005996:	683b      	ldr	r3, [r7, #0]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 80059a0:	b590      	push	{r4, r7, lr}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 80059a6:	2009      	movs	r0, #9
 80059a8:	f001 f84a 	bl	8006a40 <SX1276Read>
 80059ac:	4603      	mov	r3, r0
 80059ae:	71fb      	strb	r3, [r7, #7]

    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80059b0:	2006      	movs	r0, #6
 80059b2:	f001 f845 	bl	8006a40 <SX1276Read>
 80059b6:	4603      	mov	r3, r0
 80059b8:	041c      	lsls	r4, r3, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80059ba:	2007      	movs	r0, #7
 80059bc:	f001 f840 	bl	8006a40 <SX1276Read>
 80059c0:	4603      	mov	r3, r0
 80059c2:	021b      	lsls	r3, r3, #8
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80059c4:	431c      	orrs	r4, r3
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 80059c6:	2008      	movs	r0, #8
 80059c8:	f001 f83a 	bl	8006a40 <SX1276Read>
 80059cc:	4603      	mov	r3, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80059ce:	4323      	orrs	r3, r4
 80059d0:	4618      	mov	r0, r3
 80059d2:	f001 f923 	bl	8006c1c <SX1276ConvertPllStepToFreqInHz>
 80059d6:	6038      	str	r0, [r7, #0]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 80059d8:	2100      	movs	r1, #0
 80059da:	2009      	movs	r0, #9
 80059dc:	f001 f820 	bl	8006a20 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80059e0:	203b      	movs	r0, #59	; 0x3b
 80059e2:	f001 f82d 	bl	8006a40 <SX1276Read>
 80059e6:	4603      	mov	r3, r0
 80059e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	4619      	mov	r1, r3
 80059f0:	203b      	movs	r0, #59	; 0x3b
 80059f2:	f001 f815 	bl	8006a20 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80059f6:	bf00      	nop
 80059f8:	203b      	movs	r0, #59	; 0x3b
 80059fa:	f001 f821 	bl	8006a40 <SX1276Read>
 80059fe:	4603      	mov	r3, r0
 8005a00:	f003 0320 	and.w	r3, r3, #32
 8005a04:	2b20      	cmp	r3, #32
 8005a06:	d0f7      	beq.n	80059f8 <RxChainCalibration+0x58>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8005a08:	4811      	ldr	r0, [pc, #68]	; (8005a50 <RxChainCalibration+0xb0>)
 8005a0a:	f7ff ff29 	bl	8005860 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8005a0e:	203b      	movs	r0, #59	; 0x3b
 8005a10:	f001 f816 	bl	8006a40 <SX1276Read>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	203b      	movs	r0, #59	; 0x3b
 8005a20:	f000 fffe 	bl	8006a20 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8005a24:	bf00      	nop
 8005a26:	203b      	movs	r0, #59	; 0x3b
 8005a28:	f001 f80a 	bl	8006a40 <SX1276Read>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b20      	cmp	r3, #32
 8005a34:	d0f7      	beq.n	8005a26 <RxChainCalibration+0x86>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	2009      	movs	r0, #9
 8005a3c:	f000 fff0 	bl	8006a20 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8005a40:	6838      	ldr	r0, [r7, #0]
 8005a42:	f7ff ff0d 	bl	8005860 <SX1276SetChannel>
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd90      	pop	{r4, r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	33bca100 	.word	0x33bca100

08005a54 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	607a      	str	r2, [r7, #4]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	4603      	mov	r3, r0
 8005a62:	73fb      	strb	r3, [r7, #15]
 8005a64:	4613      	mov	r3, r2
 8005a66:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 ff80 	bl	8006970 <SX1276SetModem>

    switch( modem )
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <SX1276SetRxConfig+0x2a>
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	f000 8099 	beq.w	8005bae <SX1276SetRxConfig+0x15a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8005a7c:	e1c3      	b.n	8005e06 <SX1276SetRxConfig+0x3b2>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8005a7e:	4a78      	ldr	r2, [pc, #480]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	6553      	str	r3, [r2, #84]	; 0x54
            SX1276.Settings.Fsk.Datarate = datarate;
 8005a84:	4a76      	ldr	r2, [pc, #472]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	65d3      	str	r3, [r2, #92]	; 0x5c
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8005a8a:	4a75      	ldr	r2, [pc, #468]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	6593      	str	r3, [r2, #88]	; 0x58
            SX1276.Settings.Fsk.FixLen = fixLen;
 8005a90:	4a73      	ldr	r2, [pc, #460]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005a92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a96:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8005a9a:	4a71      	ldr	r2, [pc, #452]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005a9c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005aa0:	f882 3063 	strb.w	r3, [r2, #99]	; 0x63
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8005aa4:	4a6e      	ldr	r2, [pc, #440]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005aa6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005aaa:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8005aae:	4a6c      	ldr	r2, [pc, #432]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005ab0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005ab4:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8005ab8:	4a69      	ldr	r2, [pc, #420]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005aba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005abe:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8005ac2:	4a67      	ldr	r2, [pc, #412]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005ac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ac6:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8005aca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005acc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005ad0:	fb02 f203 	mul.w	r2, r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ada:	4a61      	ldr	r2, [pc, #388]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005adc:	66d3      	str	r3, [r2, #108]	; 0x6c
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8005ade:	4a61      	ldr	r2, [pc, #388]	; (8005c64 <SX1276SetRxConfig+0x210>)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae6:	617b      	str	r3, [r7, #20]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	0a1b      	lsrs	r3, r3, #8
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	4619      	mov	r1, r3
 8005af0:	2002      	movs	r0, #2
 8005af2:	f000 ff95 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	4619      	mov	r1, r3
 8005afc:	2003      	movs	r0, #3
 8005afe:	f000 ff8f 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8005b02:	68b8      	ldr	r0, [r7, #8]
 8005b04:	f001 f8ce 	bl	8006ca4 <GetFskBandwidthRegValue>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	2012      	movs	r0, #18
 8005b0e:	f000 ff87 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8005b12:	6a38      	ldr	r0, [r7, #32]
 8005b14:	f001 f8c6 	bl	8006ca4 <GetFskBandwidthRegValue>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	2013      	movs	r0, #19
 8005b1e:	f000 ff7f 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8005b22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b24:	0a1b      	lsrs	r3, r3, #8
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	2025      	movs	r0, #37	; 0x25
 8005b2e:	f000 ff77 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8005b32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	4619      	mov	r1, r3
 8005b38:	2026      	movs	r0, #38	; 0x26
 8005b3a:	f000 ff71 	bl	8006a20 <SX1276Write>
            if( fixLen == 1 )
 8005b3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d006      	beq.n	8005b54 <SX1276SetRxConfig+0x100>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8005b46:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	2032      	movs	r0, #50	; 0x32
 8005b4e:	f000 ff67 	bl	8006a20 <SX1276Write>
 8005b52:	e003      	b.n	8005b5c <SX1276SetRxConfig+0x108>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8005b54:	21ff      	movs	r1, #255	; 0xff
 8005b56:	2032      	movs	r0, #50	; 0x32
 8005b58:	f000 ff62 	bl	8006a20 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8005b5c:	2030      	movs	r0, #48	; 0x30
 8005b5e:	f000 ff6f 	bl	8006a40 <SX1276Read>
 8005b62:	4603      	mov	r3, r0
 8005b64:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8005b66:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8005b6a:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8005b6c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005b70:	2a00      	cmp	r2, #0
 8005b72:	d001      	beq.n	8005b78 <SX1276SetRxConfig+0x124>
 8005b74:	2200      	movs	r2, #0
 8005b76:	e001      	b.n	8005b7c <SX1276SetRxConfig+0x128>
 8005b78:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8005b80:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005b84:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8005b86:	b25b      	sxtb	r3, r3
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	4619      	mov	r1, r3
 8005b90:	2030      	movs	r0, #48	; 0x30
 8005b92:	f000 ff45 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8005b96:	2031      	movs	r0, #49	; 0x31
 8005b98:	f000 ff52 	bl	8006a40 <SX1276Read>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	2031      	movs	r0, #49	; 0x31
 8005ba8:	f000 ff3a 	bl	8006a20 <SX1276Write>
        break;
 8005bac:	e12b      	b.n	8005e06 <SX1276SetRxConfig+0x3b2>
            if( bandwidth > 2 )
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d900      	bls.n	8005bb6 <SX1276SetRxConfig+0x162>
                while( 1 );
 8005bb4:	e7fe      	b.n	8005bb4 <SX1276SetRxConfig+0x160>
            bandwidth += 7;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	3307      	adds	r3, #7
 8005bba:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8005bbc:	4a28      	ldr	r2, [pc, #160]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            SX1276.Settings.LoRa.Datarate = datarate;
 8005bc4:	4a26      	ldr	r2, [pc, #152]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
            SX1276.Settings.LoRa.Coderate = coderate;
 8005bcc:	4a24      	ldr	r2, [pc, #144]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005bce:	7bbb      	ldrb	r3, [r7, #14]
 8005bd0:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8005bd4:	4a22      	ldr	r2, [pc, #136]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005bd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bd8:	f8a2 308e 	strh.w	r3, [r2, #142]	; 0x8e
            SX1276.Settings.LoRa.FixLen = fixLen;
 8005bdc:	4a20      	ldr	r2, [pc, #128]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005bde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005be2:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8005be6:	4a1e      	ldr	r2, [pc, #120]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005be8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005bec:	f882 3091 	strb.w	r3, [r2, #145]	; 0x91
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8005bf0:	4a1b      	ldr	r2, [pc, #108]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005bf2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005bf6:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8005bfa:	4a19      	ldr	r2, [pc, #100]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005bfc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005c00:	f882 3093 	strb.w	r3, [r2, #147]	; 0x93
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8005c04:	4a16      	ldr	r2, [pc, #88]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005c06:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005c0a:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8005c0e:	4a14      	ldr	r2, [pc, #80]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005c10:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005c14:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8005c18:	4a11      	ldr	r2, [pc, #68]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005c1a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005c1e:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
            if( datarate > 12 )
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b0c      	cmp	r3, #12
 8005c26:	d902      	bls.n	8005c2e <SX1276SetRxConfig+0x1da>
                datarate = 12;
 8005c28:	230c      	movs	r3, #12
 8005c2a:	607b      	str	r3, [r7, #4]
 8005c2c:	e004      	b.n	8005c38 <SX1276SetRxConfig+0x1e4>
            else if( datarate < 6 )
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b05      	cmp	r3, #5
 8005c32:	d801      	bhi.n	8005c38 <SX1276SetRxConfig+0x1e4>
                datarate = 6;
 8005c34:	2306      	movs	r3, #6
 8005c36:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2b07      	cmp	r3, #7
 8005c3c:	d105      	bne.n	8005c4a <SX1276SetRxConfig+0x1f6>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b0b      	cmp	r3, #11
 8005c42:	d008      	beq.n	8005c56 <SX1276SetRxConfig+0x202>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b0c      	cmp	r3, #12
 8005c48:	d005      	beq.n	8005c56 <SX1276SetRxConfig+0x202>
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d10b      	bne.n	8005c68 <SX1276SetRxConfig+0x214>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b0c      	cmp	r3, #12
 8005c54:	d108      	bne.n	8005c68 <SX1276SetRxConfig+0x214>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8005c56:	4b02      	ldr	r3, [pc, #8]	; (8005c60 <SX1276SetRxConfig+0x20c>)
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8005c5e:	e007      	b.n	8005c70 <SX1276SetRxConfig+0x21c>
 8005c60:	2000139c 	.word	0x2000139c
 8005c64:	01e84800 	.word	0x01e84800
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8005c68:	4b69      	ldr	r3, [pc, #420]	; (8005e10 <SX1276SetRxConfig+0x3bc>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8005c70:	201d      	movs	r0, #29
 8005c72:	f000 fee5 	bl	8006a40 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	7bbb      	ldrb	r3, [r7, #14]
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	4313      	orrs	r3, r2
 8005c86:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8005c88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8005c90:	4619      	mov	r1, r3
 8005c92:	201d      	movs	r0, #29
 8005c94:	f000 fec4 	bl	8006a20 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8005c98:	201e      	movs	r0, #30
 8005c9a:	f000 fed1 	bl	8006a40 <SX1276Read>
 8005c9e:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8005ca0:	f003 0308 	and.w	r3, r3, #8
 8005ca4:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8005cb2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8005cbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cc0:	0a1b      	lsrs	r3, r3, #8
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	201e      	movs	r0, #30
 8005cd4:	f000 fea4 	bl	8006a20 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8005cd8:	2026      	movs	r0, #38	; 0x26
 8005cda:	f000 feb1 	bl	8006a40 <SX1276Read>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	b25b      	sxtb	r3, r3
 8005ce2:	f023 0308 	bic.w	r3, r3, #8
 8005ce6:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8005ce8:	4b49      	ldr	r3, [pc, #292]	; (8005e10 <SX1276SetRxConfig+0x3bc>)
 8005cea:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005cee:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8005cf0:	b25b      	sxtb	r3, r3
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	2026      	movs	r0, #38	; 0x26
 8005cfc:	f000 fe90 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8005d00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	4619      	mov	r1, r3
 8005d06:	201f      	movs	r0, #31
 8005d08:	f000 fe8a 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8005d0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d0e:	0a1b      	lsrs	r3, r3, #8
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	4619      	mov	r1, r3
 8005d16:	2020      	movs	r0, #32
 8005d18:	f000 fe82 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8005d1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	4619      	mov	r1, r3
 8005d22:	2021      	movs	r0, #33	; 0x21
 8005d24:	f000 fe7c 	bl	8006a20 <SX1276Write>
            if( fixLen == 1 )
 8005d28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <SX1276SetRxConfig+0x2e8>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8005d30:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005d34:	4619      	mov	r1, r3
 8005d36:	2022      	movs	r0, #34	; 0x22
 8005d38:	f000 fe72 	bl	8006a20 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005d3c:	4b34      	ldr	r3, [pc, #208]	; (8005e10 <SX1276SetRxConfig+0x3bc>)
 8005d3e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d011      	beq.n	8005d6a <SX1276SetRxConfig+0x316>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8005d46:	2044      	movs	r0, #68	; 0x44
 8005d48:	f000 fe7a 	bl	8006a40 <SX1276Read>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	4619      	mov	r1, r3
 8005d56:	2044      	movs	r0, #68	; 0x44
 8005d58:	f000 fe62 	bl	8006a20 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8005d5c:	4b2c      	ldr	r3, [pc, #176]	; (8005e10 <SX1276SetRxConfig+0x3bc>)
 8005d5e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005d62:	4619      	mov	r1, r3
 8005d64:	2024      	movs	r0, #36	; 0x24
 8005d66:	f000 fe5b 	bl	8006a20 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b09      	cmp	r3, #9
 8005d6e:	d10d      	bne.n	8005d8c <SX1276SetRxConfig+0x338>
 8005d70:	4b27      	ldr	r3, [pc, #156]	; (8005e10 <SX1276SetRxConfig+0x3bc>)
 8005d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d74:	4a27      	ldr	r2, [pc, #156]	; (8005e14 <SX1276SetRxConfig+0x3c0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d908      	bls.n	8005d8c <SX1276SetRxConfig+0x338>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8005d7a:	2102      	movs	r1, #2
 8005d7c:	2036      	movs	r0, #54	; 0x36
 8005d7e:	f000 fe4f 	bl	8006a20 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8005d82:	2164      	movs	r1, #100	; 0x64
 8005d84:	203a      	movs	r0, #58	; 0x3a
 8005d86:	f000 fe4b 	bl	8006a20 <SX1276Write>
 8005d8a:	e00f      	b.n	8005dac <SX1276SetRxConfig+0x358>
            else if( bandwidth == 9 )
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2b09      	cmp	r3, #9
 8005d90:	d108      	bne.n	8005da4 <SX1276SetRxConfig+0x350>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8005d92:	2102      	movs	r1, #2
 8005d94:	2036      	movs	r0, #54	; 0x36
 8005d96:	f000 fe43 	bl	8006a20 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8005d9a:	217f      	movs	r1, #127	; 0x7f
 8005d9c:	203a      	movs	r0, #58	; 0x3a
 8005d9e:	f000 fe3f 	bl	8006a20 <SX1276Write>
 8005da2:	e003      	b.n	8005dac <SX1276SetRxConfig+0x358>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8005da4:	2103      	movs	r1, #3
 8005da6:	2036      	movs	r0, #54	; 0x36
 8005da8:	f000 fe3a 	bl	8006a20 <SX1276Write>
            if( datarate == 6 )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b06      	cmp	r3, #6
 8005db0:	d114      	bne.n	8005ddc <SX1276SetRxConfig+0x388>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8005db2:	2031      	movs	r0, #49	; 0x31
 8005db4:	f000 fe44 	bl	8006a40 <SX1276Read>
 8005db8:	4603      	mov	r3, r0
 8005dba:	b25b      	sxtb	r3, r3
 8005dbc:	f023 0307 	bic.w	r3, r3, #7
 8005dc0:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8005dc2:	f043 0305 	orr.w	r3, r3, #5
 8005dc6:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	4619      	mov	r1, r3
 8005dcc:	2031      	movs	r0, #49	; 0x31
 8005dce:	f000 fe27 	bl	8006a20 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8005dd2:	210c      	movs	r1, #12
 8005dd4:	2037      	movs	r0, #55	; 0x37
 8005dd6:	f000 fe23 	bl	8006a20 <SX1276Write>
        break;
 8005dda:	e013      	b.n	8005e04 <SX1276SetRxConfig+0x3b0>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8005ddc:	2031      	movs	r0, #49	; 0x31
 8005dde:	f000 fe2f 	bl	8006a40 <SX1276Read>
 8005de2:	4603      	mov	r3, r0
 8005de4:	b25b      	sxtb	r3, r3
 8005de6:	f023 0307 	bic.w	r3, r3, #7
 8005dea:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8005dec:	f043 0303 	orr.w	r3, r3, #3
 8005df0:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	4619      	mov	r1, r3
 8005df6:	2031      	movs	r0, #49	; 0x31
 8005df8:	f000 fe12 	bl	8006a20 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8005dfc:	210a      	movs	r1, #10
 8005dfe:	2037      	movs	r0, #55	; 0x37
 8005e00:	f000 fe0e 	bl	8006a20 <SX1276Write>
        break;
 8005e04:	bf00      	nop
}
 8005e06:	bf00      	nop
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	2000139c 	.word	0x2000139c
 8005e14:	1f4add40 	.word	0x1f4add40

08005e18 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60ba      	str	r2, [r7, #8]
 8005e20:	607b      	str	r3, [r7, #4]
 8005e22:	4603      	mov	r3, r0
 8005e24:	73fb      	strb	r3, [r7, #15]
 8005e26:	460b      	mov	r3, r1
 8005e28:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 fd9f 	bl	8006970 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 8005e32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f002 fa14 	bl	8008264 <SX1276SetRfTxPower>

    switch( modem )
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d002      	beq.n	8005e48 <SX1276SetTxConfig+0x30>
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d07d      	beq.n	8005f42 <SX1276SetTxConfig+0x12a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8005e46:	e16a      	b.n	800611e <SX1276SetTxConfig+0x306>
            SX1276.Settings.Fsk.Power = power;
 8005e48:	4ab7      	ldr	r2, [pc, #732]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005e4a:	7bbb      	ldrb	r3, [r7, #14]
 8005e4c:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
            SX1276.Settings.Fsk.Fdev = fdev;
 8005e50:	4ab5      	ldr	r2, [pc, #724]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	6513      	str	r3, [r2, #80]	; 0x50
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8005e56:	4ab4      	ldr	r2, [pc, #720]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6553      	str	r3, [r2, #84]	; 0x54
            SX1276.Settings.Fsk.Datarate = datarate;
 8005e5c:	4ab2      	ldr	r2, [pc, #712]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	65d3      	str	r3, [r2, #92]	; 0x5c
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8005e62:	4ab1      	ldr	r2, [pc, #708]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005e64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e66:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
            SX1276.Settings.Fsk.FixLen = fixLen;
 8005e6a:	4aaf      	ldr	r2, [pc, #700]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005e6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e70:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8005e74:	4aac      	ldr	r2, [pc, #688]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005e76:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005e7a:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8005e7e:	4aaa      	ldr	r2, [pc, #680]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005e80:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005e84:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8005e88:	4aa7      	ldr	r2, [pc, #668]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e8c:	6693      	str	r3, [r2, #104]	; 0x68
            uint32_t fdevInPllSteps = SX1276ConvertFreqInHzToPllStep( fdev );
 8005e8e:	68b8      	ldr	r0, [r7, #8]
 8005e90:	f000 fee2 	bl	8006c58 <SX1276ConvertFreqInHzToPllStep>
 8005e94:	6178      	str	r0, [r7, #20]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	0a1b      	lsrs	r3, r3, #8
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	2004      	movs	r0, #4
 8005ea0:	f000 fdbe 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	2005      	movs	r0, #5
 8005eac:	f000 fdb8 	bl	8006a20 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8005eb0:	4a9e      	ldr	r2, [pc, #632]	; (800612c <SX1276SetTxConfig+0x314>)
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb8:	613b      	str	r3, [r7, #16]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	0a1b      	lsrs	r3, r3, #8
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	2002      	movs	r0, #2
 8005ec4:	f000 fdac 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	4619      	mov	r1, r3
 8005ece:	2003      	movs	r0, #3
 8005ed0:	f000 fda6 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8005ed4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ed6:	0a1b      	lsrs	r3, r3, #8
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	4619      	mov	r1, r3
 8005ede:	2025      	movs	r0, #37	; 0x25
 8005ee0:	f000 fd9e 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8005ee4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	4619      	mov	r1, r3
 8005eea:	2026      	movs	r0, #38	; 0x26
 8005eec:	f000 fd98 	bl	8006a20 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8005ef0:	2030      	movs	r0, #48	; 0x30
 8005ef2:	f000 fda5 	bl	8006a40 <SX1276Read>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8005efa:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8005efe:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8005f00:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005f04:	2a00      	cmp	r2, #0
 8005f06:	d001      	beq.n	8005f0c <SX1276SetTxConfig+0xf4>
 8005f08:	2200      	movs	r2, #0
 8005f0a:	e001      	b.n	8005f10 <SX1276SetTxConfig+0xf8>
 8005f0c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8005f10:	4313      	orrs	r3, r2
 8005f12:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8005f14:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005f18:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8005f1a:	b25b      	sxtb	r3, r3
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	4619      	mov	r1, r3
 8005f24:	2030      	movs	r0, #48	; 0x30
 8005f26:	f000 fd7b 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8005f2a:	2031      	movs	r0, #49	; 0x31
 8005f2c:	f000 fd88 	bl	8006a40 <SX1276Read>
 8005f30:	4603      	mov	r3, r0
 8005f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	4619      	mov	r1, r3
 8005f3a:	2031      	movs	r0, #49	; 0x31
 8005f3c:	f000 fd70 	bl	8006a20 <SX1276Write>
        break;
 8005f40:	e0ed      	b.n	800611e <SX1276SetTxConfig+0x306>
            SX1276.Settings.LoRa.Power = power;
 8005f42:	4a79      	ldr	r2, [pc, #484]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005f44:	7bbb      	ldrb	r3, [r7, #14]
 8005f46:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
            if( bandwidth > 2 )
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d900      	bls.n	8005f52 <SX1276SetTxConfig+0x13a>
                while( 1 );
 8005f50:	e7fe      	b.n	8005f50 <SX1276SetTxConfig+0x138>
            bandwidth += 7;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	3307      	adds	r3, #7
 8005f56:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8005f58:	4a73      	ldr	r2, [pc, #460]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            SX1276.Settings.LoRa.Datarate = datarate;
 8005f60:	4a71      	ldr	r2, [pc, #452]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
            SX1276.Settings.LoRa.Coderate = coderate;
 8005f68:	4a6f      	ldr	r2, [pc, #444]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005f6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f6e:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8005f72:	4a6d      	ldr	r2, [pc, #436]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005f74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005f76:	f8a2 308e 	strh.w	r3, [r2, #142]	; 0x8e
            SX1276.Settings.LoRa.FixLen = fixLen;
 8005f7a:	4a6b      	ldr	r2, [pc, #428]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005f7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f80:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8005f84:	4a68      	ldr	r2, [pc, #416]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005f86:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005f8a:	f882 3093 	strb.w	r3, [r2, #147]	; 0x93
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8005f8e:	4a66      	ldr	r2, [pc, #408]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005f90:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005f94:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8005f98:	4a63      	ldr	r2, [pc, #396]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005f9a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005f9e:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8005fa2:	4a61      	ldr	r2, [pc, #388]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005fa4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005fa8:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8005fac:	4a5e      	ldr	r2, [pc, #376]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
            if( datarate > 12 )
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	2b0c      	cmp	r3, #12
 8005fb8:	d902      	bls.n	8005fc0 <SX1276SetTxConfig+0x1a8>
                datarate = 12;
 8005fba:	230c      	movs	r3, #12
 8005fbc:	623b      	str	r3, [r7, #32]
 8005fbe:	e004      	b.n	8005fca <SX1276SetTxConfig+0x1b2>
            else if( datarate < 6 )
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	2b05      	cmp	r3, #5
 8005fc4:	d801      	bhi.n	8005fca <SX1276SetTxConfig+0x1b2>
                datarate = 6;
 8005fc6:	2306      	movs	r3, #6
 8005fc8:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b07      	cmp	r3, #7
 8005fce:	d105      	bne.n	8005fdc <SX1276SetTxConfig+0x1c4>
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	2b0b      	cmp	r3, #11
 8005fd4:	d008      	beq.n	8005fe8 <SX1276SetTxConfig+0x1d0>
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	2b0c      	cmp	r3, #12
 8005fda:	d005      	beq.n	8005fe8 <SX1276SetTxConfig+0x1d0>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b08      	cmp	r3, #8
 8005fe0:	d107      	bne.n	8005ff2 <SX1276SetTxConfig+0x1da>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	2b0c      	cmp	r3, #12
 8005fe6:	d104      	bne.n	8005ff2 <SX1276SetTxConfig+0x1da>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8005fe8:	4b4f      	ldr	r3, [pc, #316]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8005ff0:	e003      	b.n	8005ffa <SX1276SetTxConfig+0x1e2>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8005ff2:	4b4d      	ldr	r3, [pc, #308]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005ffa:	4b4b      	ldr	r3, [pc, #300]	; (8006128 <SX1276SetTxConfig+0x310>)
 8005ffc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006000:	2b00      	cmp	r3, #0
 8006002:	d011      	beq.n	8006028 <SX1276SetTxConfig+0x210>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8006004:	2044      	movs	r0, #68	; 0x44
 8006006:	f000 fd1b 	bl	8006a40 <SX1276Read>
 800600a:	4603      	mov	r3, r0
 800600c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006010:	b2db      	uxtb	r3, r3
 8006012:	4619      	mov	r1, r3
 8006014:	2044      	movs	r0, #68	; 0x44
 8006016:	f000 fd03 	bl	8006a20 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800601a:	4b43      	ldr	r3, [pc, #268]	; (8006128 <SX1276SetTxConfig+0x310>)
 800601c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8006020:	4619      	mov	r1, r3
 8006022:	2024      	movs	r0, #36	; 0x24
 8006024:	f000 fcfc 	bl	8006a20 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8006028:	201d      	movs	r0, #29
 800602a:	f000 fd09 	bl	8006a40 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	b2db      	uxtb	r3, r3
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	b2da      	uxtb	r2, r3
 8006036:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	b2db      	uxtb	r3, r3
 800603e:	4313      	orrs	r3, r2
 8006040:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8006042:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006046:	4313      	orrs	r3, r2
 8006048:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800604a:	4619      	mov	r1, r3
 800604c:	201d      	movs	r0, #29
 800604e:	f000 fce7 	bl	8006a20 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8006052:	201e      	movs	r0, #30
 8006054:	f000 fcf4 	bl	8006a40 <SX1276Read>
 8006058:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 800605a:	f003 030b 	and.w	r3, r3, #11
 800605e:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	b2db      	uxtb	r3, r3
 8006064:	011b      	lsls	r3, r3, #4
 8006066:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8006068:	4313      	orrs	r3, r2
 800606a:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800606c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8006074:	4313      	orrs	r3, r2
 8006076:	b2db      	uxtb	r3, r3
 8006078:	4619      	mov	r1, r3
 800607a:	201e      	movs	r0, #30
 800607c:	f000 fcd0 	bl	8006a20 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8006080:	2026      	movs	r0, #38	; 0x26
 8006082:	f000 fcdd 	bl	8006a40 <SX1276Read>
 8006086:	4603      	mov	r3, r0
 8006088:	b25b      	sxtb	r3, r3
 800608a:	f023 0308 	bic.w	r3, r3, #8
 800608e:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8006090:	4b25      	ldr	r3, [pc, #148]	; (8006128 <SX1276SetTxConfig+0x310>)
 8006092:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8006096:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8006098:	b25b      	sxtb	r3, r3
 800609a:	4313      	orrs	r3, r2
 800609c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	4619      	mov	r1, r3
 80060a2:	2026      	movs	r0, #38	; 0x26
 80060a4:	f000 fcbc 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80060a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80060aa:	0a1b      	lsrs	r3, r3, #8
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	4619      	mov	r1, r3
 80060b2:	2020      	movs	r0, #32
 80060b4:	f000 fcb4 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80060b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	4619      	mov	r1, r3
 80060be:	2021      	movs	r0, #33	; 0x21
 80060c0:	f000 fcae 	bl	8006a20 <SX1276Write>
            if( datarate == 6 )
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	2b06      	cmp	r3, #6
 80060c8:	d114      	bne.n	80060f4 <SX1276SetTxConfig+0x2dc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80060ca:	2031      	movs	r0, #49	; 0x31
 80060cc:	f000 fcb8 	bl	8006a40 <SX1276Read>
 80060d0:	4603      	mov	r3, r0
 80060d2:	b25b      	sxtb	r3, r3
 80060d4:	f023 0307 	bic.w	r3, r3, #7
 80060d8:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80060da:	f043 0305 	orr.w	r3, r3, #5
 80060de:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	4619      	mov	r1, r3
 80060e4:	2031      	movs	r0, #49	; 0x31
 80060e6:	f000 fc9b 	bl	8006a20 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80060ea:	210c      	movs	r1, #12
 80060ec:	2037      	movs	r0, #55	; 0x37
 80060ee:	f000 fc97 	bl	8006a20 <SX1276Write>
        break;
 80060f2:	e013      	b.n	800611c <SX1276SetTxConfig+0x304>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80060f4:	2031      	movs	r0, #49	; 0x31
 80060f6:	f000 fca3 	bl	8006a40 <SX1276Read>
 80060fa:	4603      	mov	r3, r0
 80060fc:	b25b      	sxtb	r3, r3
 80060fe:	f023 0307 	bic.w	r3, r3, #7
 8006102:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006104:	f043 0303 	orr.w	r3, r3, #3
 8006108:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800610a:	b2db      	uxtb	r3, r3
 800610c:	4619      	mov	r1, r3
 800610e:	2031      	movs	r0, #49	; 0x31
 8006110:	f000 fc86 	bl	8006a20 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006114:	210a      	movs	r1, #10
 8006116:	2037      	movs	r0, #55	; 0x37
 8006118:	f000 fc82 	bl	8006a20 <SX1276Write>
        break;
 800611c:	bf00      	nop
}
 800611e:	bf00      	nop
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	2000139c 	.word	0x2000139c
 800612c:	01e84800 	.word	0x01e84800

08006130 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08a      	sub	sp, #40	; 0x28
 8006134:	af04      	add	r7, sp, #16
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	607a      	str	r2, [r7, #4]
 800613a:	461a      	mov	r2, r3
 800613c:	4603      	mov	r3, r0
 800613e:	73fb      	strb	r3, [r7, #15]
 8006140:	4613      	mov	r3, r2
 8006142:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8006144:	2300      	movs	r3, #0
 8006146:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8006148:	2301      	movs	r3, #1
 800614a:	613b      	str	r3, [r7, #16]

    switch( modem )
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <SX1276GetTimeOnAir+0x28>
 8006152:	2b01      	cmp	r3, #1
 8006154:	d012      	beq.n	800617c <SX1276GetTimeOnAir+0x4c>
 8006156:	e02c      	b.n	80061b2 <SX1276GetTimeOnAir+0x82>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8006158:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800615c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006160:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8006164:	8c38      	ldrh	r0, [r7, #32]
 8006166:	f000 fdef 	bl	8006d48 <SX1276GetGfskTimeOnAirNumerator>
 800616a:	4603      	mov	r3, r0
 800616c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006170:	fb02 f303 	mul.w	r3, r2, r3
 8006174:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	613b      	str	r3, [r7, #16]
        }
        break;
 800617a:	e01a      	b.n	80061b2 <SX1276GetTimeOnAir+0x82>
    case MODEM_LORA:
        {
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800617c:	8c39      	ldrh	r1, [r7, #32]
 800617e:	7bba      	ldrb	r2, [r7, #14]
 8006180:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006184:	9302      	str	r3, [sp, #8]
 8006186:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800618a:	9301      	str	r3, [sp, #4]
 800618c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	460b      	mov	r3, r1
 8006194:	6879      	ldr	r1, [r7, #4]
 8006196:	68b8      	ldr	r0, [r7, #8]
 8006198:	f000 fe05 	bl	8006da6 <SX1276GetLoRaTimeOnAirNumerator>
 800619c:	4603      	mov	r3, r0
 800619e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80061a2:	fb02 f303 	mul.w	r3, r2, r3
 80061a6:	617b      	str	r3, [r7, #20]
                                                                   payloadLen, crcOn );
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 80061a8:	68b8      	ldr	r0, [r7, #8]
 80061aa:	f000 fda5 	bl	8006cf8 <SX1276GetLoRaBandwidthInHz>
 80061ae:	6138      	str	r0, [r7, #16]
        }
        break;
 80061b0:	bf00      	nop
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	4413      	add	r3, r2
 80061b8:	1e5a      	subs	r2, r3, #1
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3718      	adds	r7, #24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	460b      	mov	r3, r1
 80061d2:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 80061d8:	4b54      	ldr	r3, [pc, #336]	; (800632c <SX1276Send+0x164>)
 80061da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <SX1276Send+0x20>
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d049      	beq.n	800627a <SX1276Send+0xb2>
 80061e6:	e099      	b.n	800631c <SX1276Send+0x154>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80061e8:	4b50      	ldr	r3, [pc, #320]	; (800632c <SX1276Send+0x164>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            SX1276.Settings.FskPacketHandler.Size = size;
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	4b4d      	ldr	r3, [pc, #308]	; (800632c <SX1276Send+0x164>)
 80061f6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

            if( SX1276.Settings.Fsk.FixLen == false )
 80061fa:	4b4c      	ldr	r3, [pc, #304]	; (800632c <SX1276Send+0x164>)
 80061fc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006200:	f083 0301 	eor.w	r3, r3, #1
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d005      	beq.n	8006216 <SX1276Send+0x4e>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 800620a:	1cfb      	adds	r3, r7, #3
 800620c:	2101      	movs	r1, #1
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fc90 	bl	8006b34 <SX1276WriteFifo>
 8006214:	e004      	b.n	8006220 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 8006216:	78fb      	ldrb	r3, [r7, #3]
 8006218:	4619      	mov	r1, r3
 800621a:	2032      	movs	r0, #50	; 0x32
 800621c:	f000 fc00 	bl	8006a20 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d007      	beq.n	8006236 <SX1276Send+0x6e>
 8006226:	78fb      	ldrb	r3, [r7, #3]
 8006228:	2b40      	cmp	r3, #64	; 0x40
 800622a:	d804      	bhi.n	8006236 <SX1276Send+0x6e>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800622c:	78fa      	ldrb	r2, [r7, #3]
 800622e:	4b3f      	ldr	r3, [pc, #252]	; (800632c <SX1276Send+0x164>)
 8006230:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8006234:	e00a      	b.n	800624c <SX1276Send+0x84>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 8006236:	78fb      	ldrb	r3, [r7, #3]
 8006238:	b29b      	uxth	r3, r3
 800623a:	461a      	mov	r2, r3
 800623c:	6879      	ldr	r1, [r7, #4]
 800623e:	483c      	ldr	r0, [pc, #240]	; (8006330 <SX1276Send+0x168>)
 8006240:	f002 fba8 	bl	8008994 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8006244:	4b39      	ldr	r3, [pc, #228]	; (800632c <SX1276Send+0x164>)
 8006246:	2220      	movs	r2, #32
 8006248:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800624c:	4b37      	ldr	r3, [pc, #220]	; (800632c <SX1276Send+0x164>)
 800624e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fc6d 	bl	8006b34 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800625a:	4b34      	ldr	r3, [pc, #208]	; (800632c <SX1276Send+0x164>)
 800625c:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 8006260:	4b32      	ldr	r3, [pc, #200]	; (800632c <SX1276Send+0x164>)
 8006262:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8006266:	b29b      	uxth	r3, r3
 8006268:	4413      	add	r3, r2
 800626a:	b29a      	uxth	r2, r3
 800626c:	4b2f      	ldr	r3, [pc, #188]	; (800632c <SX1276Send+0x164>)
 800626e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8006272:	4b2e      	ldr	r3, [pc, #184]	; (800632c <SX1276Send+0x164>)
 8006274:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006276:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006278:	e050      	b.n	800631c <SX1276Send+0x154>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800627a:	4b2c      	ldr	r3, [pc, #176]	; (800632c <SX1276Send+0x164>)
 800627c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00f      	beq.n	80062a4 <SX1276Send+0xdc>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8006284:	2033      	movs	r0, #51	; 0x33
 8006286:	f000 fbdb 	bl	8006a40 <SX1276Read>
 800628a:	4603      	mov	r3, r0
 800628c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8006290:	b2db      	uxtb	r3, r3
 8006292:	4619      	mov	r1, r3
 8006294:	2033      	movs	r0, #51	; 0x33
 8006296:	f000 fbc3 	bl	8006a20 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800629a:	2119      	movs	r1, #25
 800629c:	203b      	movs	r0, #59	; 0x3b
 800629e:	f000 fbbf 	bl	8006a20 <SX1276Write>
 80062a2:	e013      	b.n	80062cc <SX1276Send+0x104>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80062a4:	2033      	movs	r0, #51	; 0x33
 80062a6:	f000 fbcb 	bl	8006a40 <SX1276Read>
 80062aa:	4603      	mov	r3, r0
 80062ac:	b25b      	sxtb	r3, r3
 80062ae:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80062b2:	b25b      	sxtb	r3, r3
 80062b4:	f043 0301 	orr.w	r3, r3, #1
 80062b8:	b25b      	sxtb	r3, r3
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	4619      	mov	r1, r3
 80062be:	2033      	movs	r0, #51	; 0x33
 80062c0:	f000 fbae 	bl	8006a20 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80062c4:	211d      	movs	r1, #29
 80062c6:	203b      	movs	r0, #59	; 0x3b
 80062c8:	f000 fbaa 	bl	8006a20 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 80062cc:	78fa      	ldrb	r2, [r7, #3]
 80062ce:	4b17      	ldr	r3, [pc, #92]	; (800632c <SX1276Send+0x164>)
 80062d0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	4619      	mov	r1, r3
 80062d8:	2022      	movs	r0, #34	; 0x22
 80062da:	f000 fba1 	bl	8006a20 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 80062de:	2100      	movs	r1, #0
 80062e0:	200e      	movs	r0, #14
 80062e2:	f000 fb9d 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 80062e6:	2100      	movs	r1, #0
 80062e8:	200d      	movs	r0, #13
 80062ea:	f000 fb99 	bl	8006a20 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 80062ee:	2001      	movs	r0, #1
 80062f0:	f000 fba6 	bl	8006a40 <SX1276Read>
 80062f4:	4603      	mov	r3, r0
 80062f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d104      	bne.n	8006308 <SX1276Send+0x140>
            {
                SX1276SetStby( );
 80062fe:	f000 f839 	bl	8006374 <SX1276SetStby>
                DelayMs( 1 );
 8006302:	2001      	movs	r0, #1
 8006304:	f001 faf4 	bl	80078f0 <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8006308:	78fb      	ldrb	r3, [r7, #3]
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fc11 	bl	8006b34 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8006312:	4b06      	ldr	r3, [pc, #24]	; (800632c <SX1276Send+0x164>)
 8006314:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006318:	60fb      	str	r3, [r7, #12]
        }
        break;
 800631a:	bf00      	nop
    }

    SX1276SetTx( txTimeout );
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f9cb 	bl	80066b8 <SX1276SetTx>
}
 8006322:	bf00      	nop
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	2000139c 	.word	0x2000139c
 8006330:	20001054 	.word	0x20001054

08006334 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8006338:	480a      	ldr	r0, [pc, #40]	; (8006364 <SX1276SetSleep+0x30>)
 800633a:	f002 fa27 	bl	800878c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800633e:	480a      	ldr	r0, [pc, #40]	; (8006368 <SX1276SetSleep+0x34>)
 8006340:	f002 fa24 	bl	800878c <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8006344:	4809      	ldr	r0, [pc, #36]	; (800636c <SX1276SetSleep+0x38>)
 8006346:	f002 fa21 	bl	800878c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800634a:	2000      	movs	r0, #0
 800634c:	f000 fae4 	bl	8006918 <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    SX1276SetBoardTcxo( false );
 8006350:	2000      	movs	r0, #0
 8006352:	f001 ff55 	bl	8008200 <SX1276SetBoardTcxo>

    SX1276.Settings.State = RF_IDLE;
 8006356:	4b06      	ldr	r3, [pc, #24]	; (8006370 <SX1276SetSleep+0x3c>)
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 800635e:	bf00      	nop
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20001444 	.word	0x20001444
 8006368:	2000136c 	.word	0x2000136c
 800636c:	20001384 	.word	0x20001384
 8006370:	2000139c 	.word	0x2000139c

08006374 <SX1276SetStby>:

void SX1276SetStby( void )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8006378:	4808      	ldr	r0, [pc, #32]	; (800639c <SX1276SetStby+0x28>)
 800637a:	f002 fa07 	bl	800878c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800637e:	4808      	ldr	r0, [pc, #32]	; (80063a0 <SX1276SetStby+0x2c>)
 8006380:	f002 fa04 	bl	800878c <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8006384:	4807      	ldr	r0, [pc, #28]	; (80063a4 <SX1276SetStby+0x30>)
 8006386:	f002 fa01 	bl	800878c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 800638a:	2001      	movs	r0, #1
 800638c:	f000 fac4 	bl	8006918 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8006390:	4b05      	ldr	r3, [pc, #20]	; (80063a8 <SX1276SetStby+0x34>)
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8006398:	bf00      	nop
 800639a:	bd80      	pop	{r7, pc}
 800639c:	20001444 	.word	0x20001444
 80063a0:	2000136c 	.word	0x2000136c
 80063a4:	20001384 	.word	0x20001384
 80063a8:	2000139c 	.word	0x2000139c

080063ac <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 80063b4:	2300      	movs	r3, #0
 80063b6:	73fb      	strb	r3, [r7, #15]
    TimerStop( &TxTimeoutTimer );
 80063b8:	48ba      	ldr	r0, [pc, #744]	; (80066a4 <SX1276SetRx+0x2f8>)
 80063ba:	f002 f9e7 	bl	800878c <TimerStop>

    switch( SX1276.Settings.Modem )
 80063be:	4bba      	ldr	r3, [pc, #744]	; (80066a8 <SX1276SetRx+0x2fc>)
 80063c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <SX1276SetRx+0x22>
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d03e      	beq.n	800644a <SX1276SetRx+0x9e>
 80063cc:	e12f      	b.n	800662e <SX1276SetRx+0x282>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 80063ce:	4bb6      	ldr	r3, [pc, #728]	; (80066a8 <SX1276SetRx+0x2fc>)
 80063d0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80063d4:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80063d6:	2040      	movs	r0, #64	; 0x40
 80063d8:	f000 fb32 	bl	8006a40 <SX1276Read>
 80063dc:	4603      	mov	r3, r0
 80063de:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 80063e0:	f003 0303 	and.w	r3, r3, #3
 80063e4:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 80063e6:	f043 030c 	orr.w	r3, r3, #12
 80063ea:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	4619      	mov	r1, r3
 80063f0:	2040      	movs	r0, #64	; 0x40
 80063f2:	f000 fb15 	bl	8006a20 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80063f6:	2041      	movs	r0, #65	; 0x41
 80063f8:	f000 fb22 	bl	8006a40 <SX1276Read>
 80063fc:	4603      	mov	r3, r0
 80063fe:	f063 033e 	orn	r3, r3, #62	; 0x3e
 8006402:	b2db      	uxtb	r3, r3
 8006404:	4619      	mov	r1, r3
 8006406:	2041      	movs	r0, #65	; 0x41
 8006408:	f000 fb0a 	bl	8006a20 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800640c:	2035      	movs	r0, #53	; 0x35
 800640e:	f000 fb17 	bl	8006a40 <SX1276Read>
 8006412:	4603      	mov	r3, r0
 8006414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006418:	b2da      	uxtb	r2, r3
 800641a:	4ba3      	ldr	r3, [pc, #652]	; (80066a8 <SX1276SetRx+0x2fc>)
 800641c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8006420:	211e      	movs	r1, #30
 8006422:	200d      	movs	r0, #13
 8006424:	f000 fafc 	bl	8006a20 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006428:	4b9f      	ldr	r3, [pc, #636]	; (80066a8 <SX1276SetRx+0x2fc>)
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8006430:	4b9d      	ldr	r3, [pc, #628]	; (80066a8 <SX1276SetRx+0x2fc>)
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006438:	4b9b      	ldr	r3, [pc, #620]	; (80066a8 <SX1276SetRx+0x2fc>)
 800643a:	2200      	movs	r2, #0
 800643c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8006440:	4b99      	ldr	r3, [pc, #612]	; (80066a8 <SX1276SetRx+0x2fc>)
 8006442:	2200      	movs	r2, #0
 8006444:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
        }
        break;
 8006448:	e0f1      	b.n	800662e <SX1276SetRx+0x282>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800644a:	4b97      	ldr	r3, [pc, #604]	; (80066a8 <SX1276SetRx+0x2fc>)
 800644c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00f      	beq.n	8006474 <SX1276SetRx+0xc8>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8006454:	2033      	movs	r0, #51	; 0x33
 8006456:	f000 faf3 	bl	8006a40 <SX1276Read>
 800645a:	4603      	mov	r3, r0
 800645c:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 8006460:	b2db      	uxtb	r3, r3
 8006462:	4619      	mov	r1, r3
 8006464:	2033      	movs	r0, #51	; 0x33
 8006466:	f000 fadb 	bl	8006a20 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800646a:	2119      	movs	r1, #25
 800646c:	203b      	movs	r0, #59	; 0x3b
 800646e:	f000 fad7 	bl	8006a20 <SX1276Write>
 8006472:	e013      	b.n	800649c <SX1276SetRx+0xf0>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8006474:	2033      	movs	r0, #51	; 0x33
 8006476:	f000 fae3 	bl	8006a40 <SX1276Read>
 800647a:	4603      	mov	r3, r0
 800647c:	b25b      	sxtb	r3, r3
 800647e:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8006482:	b25b      	sxtb	r3, r3
 8006484:	f043 0301 	orr.w	r3, r3, #1
 8006488:	b25b      	sxtb	r3, r3
 800648a:	b2db      	uxtb	r3, r3
 800648c:	4619      	mov	r1, r3
 800648e:	2033      	movs	r0, #51	; 0x33
 8006490:	f000 fac6 	bl	8006a20 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8006494:	211d      	movs	r1, #29
 8006496:	203b      	movs	r0, #59	; 0x3b
 8006498:	f000 fac2 	bl	8006a20 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800649c:	4b82      	ldr	r3, [pc, #520]	; (80066a8 <SX1276SetRx+0x2fc>)
 800649e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064a2:	2b08      	cmp	r3, #8
 80064a4:	f200 8087 	bhi.w	80065b6 <SX1276SetRx+0x20a>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80064a8:	2031      	movs	r0, #49	; 0x31
 80064aa:	f000 fac9 	bl	8006a40 <SX1276Read>
 80064ae:	4603      	mov	r3, r0
 80064b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	4619      	mov	r1, r3
 80064b8:	2031      	movs	r0, #49	; 0x31
 80064ba:	f000 fab1 	bl	8006a20 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 80064be:	2100      	movs	r1, #0
 80064c0:	2030      	movs	r0, #48	; 0x30
 80064c2:	f000 faad 	bl	8006a20 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 80064c6:	4b78      	ldr	r3, [pc, #480]	; (80066a8 <SX1276SetRx+0x2fc>)
 80064c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d87d      	bhi.n	80065cc <SX1276SetRx+0x220>
 80064d0:	a201      	add	r2, pc, #4	; (adr r2, 80064d8 <SX1276SetRx+0x12c>)
 80064d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d6:	bf00      	nop
 80064d8:	080064fd 	.word	0x080064fd
 80064dc:	08006517 	.word	0x08006517
 80064e0:	08006531 	.word	0x08006531
 80064e4:	0800654b 	.word	0x0800654b
 80064e8:	08006565 	.word	0x08006565
 80064ec:	0800657f 	.word	0x0800657f
 80064f0:	08006599 	.word	0x08006599
 80064f4:	080065a3 	.word	0x080065a3
 80064f8:	080065ad 	.word	0x080065ad
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 80064fc:	2148      	movs	r1, #72	; 0x48
 80064fe:	202f      	movs	r0, #47	; 0x2f
 8006500:	f000 fa8e 	bl	8006a20 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8006504:	4b68      	ldr	r3, [pc, #416]	; (80066a8 <SX1276SetRx+0x2fc>)
 8006506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006508:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 800650c:	3302      	adds	r3, #2
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff f9a6 	bl	8005860 <SX1276SetChannel>
                    break;
 8006514:	e05a      	b.n	80065cc <SX1276SetRx+0x220>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006516:	2144      	movs	r1, #68	; 0x44
 8006518:	202f      	movs	r0, #47	; 0x2f
 800651a:	f000 fa81 	bl	8006a20 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800651e:	4b62      	ldr	r3, [pc, #392]	; (80066a8 <SX1276SetRx+0x2fc>)
 8006520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006522:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8006526:	3334      	adds	r3, #52	; 0x34
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff f999 	bl	8005860 <SX1276SetChannel>
                    break;
 800652e:	e04d      	b.n	80065cc <SX1276SetRx+0x220>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006530:	2144      	movs	r1, #68	; 0x44
 8006532:	202f      	movs	r0, #47	; 0x2f
 8006534:	f000 fa74 	bl	8006a20 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8006538:	4b5b      	ldr	r3, [pc, #364]	; (80066a8 <SX1276SetRx+0x2fc>)
 800653a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800653c:	f503 5374 	add.w	r3, r3, #15616	; 0x3d00
 8006540:	3304      	adds	r3, #4
 8006542:	4618      	mov	r0, r3
 8006544:	f7ff f98c 	bl	8005860 <SX1276SetChannel>
                    break;
 8006548:	e040      	b.n	80065cc <SX1276SetRx+0x220>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800654a:	2144      	movs	r1, #68	; 0x44
 800654c:	202f      	movs	r0, #47	; 0x2f
 800654e:	f000 fa67 	bl	8006a20 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8006552:	4b55      	ldr	r3, [pc, #340]	; (80066a8 <SX1276SetRx+0x2fc>)
 8006554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006556:	f503 43a2 	add.w	r3, r3, #20736	; 0x5100
 800655a:	335e      	adds	r3, #94	; 0x5e
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff f97f 	bl	8005860 <SX1276SetChannel>
                    break;
 8006562:	e033      	b.n	80065cc <SX1276SetRx+0x220>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006564:	2144      	movs	r1, #68	; 0x44
 8006566:	202f      	movs	r0, #47	; 0x2f
 8006568:	f000 fa5a 	bl	8006a20 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 800656c:	4b4e      	ldr	r3, [pc, #312]	; (80066a8 <SX1276SetRx+0x2fc>)
 800656e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006570:	f503 43f4 	add.w	r3, r3, #31232	; 0x7a00
 8006574:	3312      	adds	r3, #18
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff f972 	bl	8005860 <SX1276SetChannel>
                    break;
 800657c:	e026      	b.n	80065cc <SX1276SetRx+0x220>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800657e:	2144      	movs	r1, #68	; 0x44
 8006580:	202f      	movs	r0, #47	; 0x2f
 8006582:	f000 fa4d 	bl	8006a20 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8006586:	4b48      	ldr	r3, [pc, #288]	; (80066a8 <SX1276SetRx+0x2fc>)
 8006588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800658a:	f503 4322 	add.w	r3, r3, #41472	; 0xa200
 800658e:	33c6      	adds	r3, #198	; 0xc6
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff f965 	bl	8005860 <SX1276SetChannel>
                    break;
 8006596:	e019      	b.n	80065cc <SX1276SetRx+0x220>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8006598:	2140      	movs	r1, #64	; 0x40
 800659a:	202f      	movs	r0, #47	; 0x2f
 800659c:	f000 fa40 	bl	8006a20 <SX1276Write>
                    break;
 80065a0:	e014      	b.n	80065cc <SX1276SetRx+0x220>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80065a2:	2140      	movs	r1, #64	; 0x40
 80065a4:	202f      	movs	r0, #47	; 0x2f
 80065a6:	f000 fa3b 	bl	8006a20 <SX1276Write>
                    break;
 80065aa:	e00f      	b.n	80065cc <SX1276SetRx+0x220>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80065ac:	2140      	movs	r1, #64	; 0x40
 80065ae:	202f      	movs	r0, #47	; 0x2f
 80065b0:	f000 fa36 	bl	8006a20 <SX1276Write>
                    break;
 80065b4:	e00a      	b.n	80065cc <SX1276SetRx+0x220>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 80065b6:	2031      	movs	r0, #49	; 0x31
 80065b8:	f000 fa42 	bl	8006a40 <SX1276Read>
 80065bc:	4603      	mov	r3, r0
 80065be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	4619      	mov	r1, r3
 80065c6:	2031      	movs	r0, #49	; 0x31
 80065c8:	f000 fa2a 	bl	8006a20 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 80065cc:	4b36      	ldr	r3, [pc, #216]	; (80066a8 <SX1276SetRx+0x2fc>)
 80065ce:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80065d2:	73fb      	strb	r3, [r7, #15]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80065d4:	4b34      	ldr	r3, [pc, #208]	; (80066a8 <SX1276SetRx+0x2fc>)
 80065d6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00f      	beq.n	80065fe <SX1276SetRx+0x252>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80065de:	211d      	movs	r1, #29
 80065e0:	2011      	movs	r0, #17
 80065e2:	f000 fa1d 	bl	8006a20 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 80065e6:	2040      	movs	r0, #64	; 0x40
 80065e8:	f000 fa2a 	bl	8006a40 <SX1276Read>
 80065ec:	4603      	mov	r3, r0
 80065ee:	f003 0333 	and.w	r3, r3, #51	; 0x33
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	4619      	mov	r1, r3
 80065f6:	2040      	movs	r0, #64	; 0x40
 80065f8:	f000 fa12 	bl	8006a20 <SX1276Write>
 80065fc:	e00e      	b.n	800661c <SX1276SetRx+0x270>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80065fe:	211f      	movs	r1, #31
 8006600:	2011      	movs	r0, #17
 8006602:	f000 fa0d 	bl	8006a20 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8006606:	2040      	movs	r0, #64	; 0x40
 8006608:	f000 fa1a 	bl	8006a40 <SX1276Read>
 800660c:	4603      	mov	r3, r0
 800660e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006612:	b2db      	uxtb	r3, r3
 8006614:	4619      	mov	r1, r3
 8006616:	2040      	movs	r0, #64	; 0x40
 8006618:	f000 fa02 	bl	8006a20 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800661c:	2100      	movs	r1, #0
 800661e:	200f      	movs	r0, #15
 8006620:	f000 f9fe 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8006624:	2100      	movs	r1, #0
 8006626:	200d      	movs	r0, #13
 8006628:	f000 f9fa 	bl	8006a20 <SX1276Write>
        }
        break;
 800662c:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 800662e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006632:	2100      	movs	r1, #0
 8006634:	481d      	ldr	r0, [pc, #116]	; (80066ac <SX1276SetRx+0x300>)
 8006636:	f002 fa01 	bl	8008a3c <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 800663a:	4b1b      	ldr	r3, [pc, #108]	; (80066a8 <SX1276SetRx+0x2fc>)
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if( timeout != 0 )
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d006      	beq.n	8006656 <SX1276SetRx+0x2aa>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006648:	6879      	ldr	r1, [r7, #4]
 800664a:	4819      	ldr	r0, [pc, #100]	; (80066b0 <SX1276SetRx+0x304>)
 800664c:	f002 f934 	bl	80088b8 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8006650:	4817      	ldr	r0, [pc, #92]	; (80066b0 <SX1276SetRx+0x304>)
 8006652:	f001 ff7b 	bl	800854c <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 8006656:	4b14      	ldr	r3, [pc, #80]	; (80066a8 <SX1276SetRx+0x2fc>)
 8006658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800665c:	2b00      	cmp	r3, #0
 800665e:	d112      	bne.n	8006686 <SX1276SetRx+0x2da>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8006660:	2005      	movs	r0, #5
 8006662:	f000 f959 	bl	8006918 <SX1276SetOpMode>

        if( rxContinuous == false )
 8006666:	7bfb      	ldrb	r3, [r7, #15]
 8006668:	f083 0301 	eor.w	r3, r3, #1
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d013      	beq.n	800669a <SX1276SetRx+0x2ee>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8006672:	4b0d      	ldr	r3, [pc, #52]	; (80066a8 <SX1276SetRx+0x2fc>)
 8006674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006676:	4619      	mov	r1, r3
 8006678:	480e      	ldr	r0, [pc, #56]	; (80066b4 <SX1276SetRx+0x308>)
 800667a:	f002 f91d 	bl	80088b8 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 800667e:	480d      	ldr	r0, [pc, #52]	; (80066b4 <SX1276SetRx+0x308>)
 8006680:	f001 ff64 	bl	800854c <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 8006684:	e009      	b.n	800669a <SX1276SetRx+0x2ee>
        if( rxContinuous == true )
 8006686:	7bfb      	ldrb	r3, [r7, #15]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <SX1276SetRx+0x2e8>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 800668c:	2005      	movs	r0, #5
 800668e:	f000 f943 	bl	8006918 <SX1276SetOpMode>
}
 8006692:	e002      	b.n	800669a <SX1276SetRx+0x2ee>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8006694:	2006      	movs	r0, #6
 8006696:	f000 f93f 	bl	8006918 <SX1276SetOpMode>
}
 800669a:	bf00      	nop
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	2000136c 	.word	0x2000136c
 80066a8:	2000139c 	.word	0x2000139c
 80066ac:	20001054 	.word	0x20001054
 80066b0:	20001444 	.word	0x20001444
 80066b4:	20001384 	.word	0x20001384

080066b8 <SX1276SetTx>:

static void SX1276SetTx( uint32_t timeout )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 80066c0:	4836      	ldr	r0, [pc, #216]	; (800679c <SX1276SetTx+0xe4>)
 80066c2:	f002 f863 	bl	800878c <TimerStop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	4835      	ldr	r0, [pc, #212]	; (80067a0 <SX1276SetTx+0xe8>)
 80066ca:	f002 f8f5 	bl	80088b8 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 80066ce:	4b35      	ldr	r3, [pc, #212]	; (80067a4 <SX1276SetTx+0xec>)
 80066d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <SX1276SetTx+0x26>
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d021      	beq.n	8006720 <SX1276SetTx+0x68>
 80066dc:	e04f      	b.n	800677e <SX1276SetTx+0xc6>
            // DIO1=FifoLevel
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80066de:	2040      	movs	r0, #64	; 0x40
 80066e0:	f000 f9ae 	bl	8006a40 <SX1276Read>
 80066e4:	4603      	mov	r3, r0
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	4619      	mov	r1, r3
 80066ee:	2040      	movs	r0, #64	; 0x40
 80066f0:	f000 f996 	bl	8006a20 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80066f4:	2041      	movs	r0, #65	; 0x41
 80066f6:	f000 f9a3 	bl	8006a40 <SX1276Read>
 80066fa:	4603      	mov	r3, r0
 80066fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8006700:	b2db      	uxtb	r3, r3
 8006702:	4619      	mov	r1, r3
 8006704:	2041      	movs	r0, #65	; 0x41
 8006706:	f000 f98b 	bl	8006a20 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800670a:	2035      	movs	r0, #53	; 0x35
 800670c:	f000 f998 	bl	8006a40 <SX1276Read>
 8006710:	4603      	mov	r3, r0
 8006712:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006716:	b2da      	uxtb	r2, r3
 8006718:	4b22      	ldr	r3, [pc, #136]	; (80067a4 <SX1276SetTx+0xec>)
 800671a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        }
        break;
 800671e:	e02e      	b.n	800677e <SX1276SetTx+0xc6>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006720:	4b20      	ldr	r3, [pc, #128]	; (80067a4 <SX1276SetTx+0xec>)
 8006722:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006726:	2b00      	cmp	r3, #0
 8006728:	d014      	beq.n	8006754 <SX1276SetTx+0x9c>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800672a:	21f5      	movs	r1, #245	; 0xf5
 800672c:	2011      	movs	r0, #17
 800672e:	f000 f977 	bl	8006a20 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8006732:	2040      	movs	r0, #64	; 0x40
 8006734:	f000 f984 	bl	8006a40 <SX1276Read>
 8006738:	4603      	mov	r3, r0
 800673a:	b25b      	sxtb	r3, r3
 800673c:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8006740:	b25b      	sxtb	r3, r3
 8006742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006746:	b25b      	sxtb	r3, r3
 8006748:	b2db      	uxtb	r3, r3
 800674a:	4619      	mov	r1, r3
 800674c:	2040      	movs	r0, #64	; 0x40
 800674e:	f000 f967 	bl	8006a20 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8006752:	e013      	b.n	800677c <SX1276SetTx+0xc4>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006754:	21f7      	movs	r1, #247	; 0xf7
 8006756:	2011      	movs	r0, #17
 8006758:	f000 f962 	bl	8006a20 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800675c:	2040      	movs	r0, #64	; 0x40
 800675e:	f000 f96f 	bl	8006a40 <SX1276Read>
 8006762:	4603      	mov	r3, r0
 8006764:	b25b      	sxtb	r3, r3
 8006766:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800676a:	b25b      	sxtb	r3, r3
 800676c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006770:	b25b      	sxtb	r3, r3
 8006772:	b2db      	uxtb	r3, r3
 8006774:	4619      	mov	r1, r3
 8006776:	2040      	movs	r0, #64	; 0x40
 8006778:	f000 f952 	bl	8006a20 <SX1276Write>
        break;
 800677c:	bf00      	nop
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 800677e:	4b09      	ldr	r3, [pc, #36]	; (80067a4 <SX1276SetTx+0xec>)
 8006780:	2202      	movs	r2, #2
 8006782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TimerStart( &TxTimeoutTimer );
 8006786:	4806      	ldr	r0, [pc, #24]	; (80067a0 <SX1276SetTx+0xe8>)
 8006788:	f001 fee0 	bl	800854c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800678c:	2003      	movs	r0, #3
 800678e:	f000 f8c3 	bl	8006918 <SX1276SetOpMode>
}
 8006792:	bf00      	nop
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20001444 	.word	0x20001444
 80067a0:	2000136c 	.word	0x2000136c
 80067a4:	2000139c 	.word	0x2000139c

080067a8 <SX1276StartCad>:

void SX1276StartCad( void )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 80067ac:	4b10      	ldr	r3, [pc, #64]	; (80067f0 <SX1276StartCad+0x48>)
 80067ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d019      	beq.n	80067ea <SX1276StartCad+0x42>
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d000      	beq.n	80067bc <SX1276StartCad+0x14>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 80067ba:	e017      	b.n	80067ec <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80067bc:	21fa      	movs	r1, #250	; 0xfa
 80067be:	2011      	movs	r0, #17
 80067c0:	f000 f92e 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 80067c4:	2040      	movs	r0, #64	; 0x40
 80067c6:	f000 f93b 	bl	8006a40 <SX1276Read>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f023 0303 	bic.w	r3, r3, #3
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	4619      	mov	r1, r3
 80067d4:	2040      	movs	r0, #64	; 0x40
 80067d6:	f000 f923 	bl	8006a20 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 80067da:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <SX1276StartCad+0x48>)
 80067dc:	2203      	movs	r2, #3
 80067de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 80067e2:	2007      	movs	r0, #7
 80067e4:	f000 f898 	bl	8006918 <SX1276SetOpMode>
        break;
 80067e8:	e000      	b.n	80067ec <SX1276StartCad+0x44>
        break;
 80067ea:	bf00      	nop
    }
}
 80067ec:	bf00      	nop
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	2000139c 	.word	0x2000139c

080067f4 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08e      	sub	sp, #56	; 0x38
 80067f8:	af0a      	add	r7, sp, #40	; 0x28
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	70fb      	strb	r3, [r7, #3]
 8006800:	4613      	mov	r3, r2
 8006802:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8006804:	883b      	ldrh	r3, [r7, #0]
 8006806:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800680a:	fb02 f303 	mul.w	r3, r2, r3
 800680e:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff f825 	bl	8005860 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8006816:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	9308      	str	r3, [sp, #32]
 800681e:	2300      	movs	r3, #0
 8006820:	9307      	str	r3, [sp, #28]
 8006822:	2300      	movs	r3, #0
 8006824:	9306      	str	r3, [sp, #24]
 8006826:	2300      	movs	r3, #0
 8006828:	9305      	str	r3, [sp, #20]
 800682a:	2300      	movs	r3, #0
 800682c:	9304      	str	r3, [sp, #16]
 800682e:	2300      	movs	r3, #0
 8006830:	9303      	str	r3, [sp, #12]
 8006832:	2305      	movs	r3, #5
 8006834:	9302      	str	r3, [sp, #8]
 8006836:	2300      	movs	r3, #0
 8006838:	9301      	str	r3, [sp, #4]
 800683a:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	2300      	movs	r3, #0
 8006842:	2200      	movs	r2, #0
 8006844:	2000      	movs	r0, #0
 8006846:	f7ff fae7 	bl	8005e18 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800684a:	2031      	movs	r0, #49	; 0x31
 800684c:	f000 f8f8 	bl	8006a40 <SX1276Read>
 8006850:	4603      	mov	r3, r0
 8006852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006856:	b2db      	uxtb	r3, r3
 8006858:	4619      	mov	r1, r3
 800685a:	2031      	movs	r0, #49	; 0x31
 800685c:	f000 f8e0 	bl	8006a20 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8006860:	21f0      	movs	r1, #240	; 0xf0
 8006862:	2040      	movs	r0, #64	; 0x40
 8006864:	f000 f8dc 	bl	8006a20 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8006868:	21a0      	movs	r1, #160	; 0xa0
 800686a:	2041      	movs	r0, #65	; 0x41
 800686c:	f000 f8d8 	bl	8006a20 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8006870:	68f9      	ldr	r1, [r7, #12]
 8006872:	4808      	ldr	r0, [pc, #32]	; (8006894 <SX1276SetTxContinuousWave+0xa0>)
 8006874:	f002 f820 	bl	80088b8 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING; //??
 8006878:	4b07      	ldr	r3, [pc, #28]	; (8006898 <SX1276SetTxContinuousWave+0xa4>)
 800687a:	2202      	movs	r2, #2
 800687c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TimerStart( &TxTimeoutTimer );
 8006880:	4804      	ldr	r0, [pc, #16]	; (8006894 <SX1276SetTxContinuousWave+0xa0>)
 8006882:	f001 fe63 	bl	800854c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8006886:	2003      	movs	r0, #3
 8006888:	f000 f846 	bl	8006918 <SX1276SetOpMode>
}
 800688c:	bf00      	nop
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	2000136c 	.word	0x2000136c
 8006898:	2000139c 	.word	0x2000139c

0800689c <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	4603      	mov	r3, r0
 80068a4:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 80068a6:	2300      	movs	r3, #0
 80068a8:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 80068aa:	79fb      	ldrb	r3, [r7, #7]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d002      	beq.n	80068b6 <SX1276ReadRssi+0x1a>
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d00b      	beq.n	80068cc <SX1276ReadRssi+0x30>
 80068b4:	e021      	b.n	80068fa <SX1276ReadRssi+0x5e>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80068b6:	2011      	movs	r0, #17
 80068b8:	f000 f8c2 	bl	8006a40 <SX1276Read>
 80068bc:	4603      	mov	r3, r0
 80068be:	085b      	lsrs	r3, r3, #1
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	425b      	negs	r3, r3
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	81fb      	strh	r3, [r7, #14]
        break;
 80068ca:	e01a      	b.n	8006902 <SX1276ReadRssi+0x66>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80068cc:	4b10      	ldr	r3, [pc, #64]	; (8006910 <SX1276ReadRssi+0x74>)
 80068ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068d0:	4a10      	ldr	r2, [pc, #64]	; (8006914 <SX1276ReadRssi+0x78>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d908      	bls.n	80068e8 <SX1276ReadRssi+0x4c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 80068d6:	201b      	movs	r0, #27
 80068d8:	f000 f8b2 	bl	8006a40 <SX1276Read>
 80068dc:	4603      	mov	r3, r0
 80068de:	b29b      	uxth	r3, r3
 80068e0:	3b9d      	subs	r3, #157	; 0x9d
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	81fb      	strh	r3, [r7, #14]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 80068e6:	e00c      	b.n	8006902 <SX1276ReadRssi+0x66>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 80068e8:	201b      	movs	r0, #27
 80068ea:	f000 f8a9 	bl	8006a40 <SX1276Read>
 80068ee:	4603      	mov	r3, r0
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	3ba4      	subs	r3, #164	; 0xa4
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	81fb      	strh	r3, [r7, #14]
        break;
 80068f8:	e003      	b.n	8006902 <SX1276ReadRssi+0x66>
    default:
        rssi = -1;
 80068fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068fe:	81fb      	strh	r3, [r7, #14]
        break;
 8006900:	bf00      	nop
    }
    return rssi;
 8006902:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	2000139c 	.word	0x2000139c
 8006914:	1f4add40 	.word	0x1f4add40

08006918 <SX1276SetOpMode>:

static void SX1276SetOpMode( uint8_t opMode )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	4603      	mov	r3, r0
 8006920:	71fb      	strb	r3, [r7, #7]
            SX1276DbgPinTxWrite( 0 );
            SX1276DbgPinRxWrite( 0 );
            break;
    }
#endif
    if( opMode == RF_OPMODE_SLEEP )
 8006922:	79fb      	ldrb	r3, [r7, #7]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d103      	bne.n	8006930 <SX1276SetOpMode+0x18>
    {
        SX1276SetAntSwLowPower( true );
 8006928:	2001      	movs	r0, #1
 800692a:	f001 fd5d 	bl	80083e8 <SX1276SetAntSwLowPower>
 800692e:	e009      	b.n	8006944 <SX1276SetOpMode+0x2c>
    }
    else
    {
        // Enable TCXO if operating mode different from SLEEP.
        SX1276SetBoardTcxo( true );
 8006930:	2001      	movs	r0, #1
 8006932:	f001 fc65 	bl	8008200 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 8006936:	2000      	movs	r0, #0
 8006938:	f001 fd56 	bl	80083e8 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	4618      	mov	r0, r3
 8006940:	f001 fd7c 	bl	800843c <SX1276SetAntSw>
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8006944:	2001      	movs	r0, #1
 8006946:	f000 f87b 	bl	8006a40 <SX1276Read>
 800694a:	4603      	mov	r3, r0
 800694c:	b25b      	sxtb	r3, r3
 800694e:	f023 0307 	bic.w	r3, r3, #7
 8006952:	b25a      	sxtb	r2, r3
 8006954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006958:	4313      	orrs	r3, r2
 800695a:	b25b      	sxtb	r3, r3
 800695c:	b2db      	uxtb	r3, r3
 800695e:	4619      	mov	r1, r3
 8006960:	2001      	movs	r0, #1
 8006962:	f000 f85d 	bl	8006a20 <SX1276Write>
}
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
	...

08006970 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	4603      	mov	r3, r0
 8006978:	71fb      	strb	r3, [r7, #7]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 800697a:	2001      	movs	r0, #1
 800697c:	f000 f860 	bl	8006a40 <SX1276Read>
 8006980:	4603      	mov	r3, r0
 8006982:	b25b      	sxtb	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	da04      	bge.n	8006992 <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 8006988:	4b24      	ldr	r3, [pc, #144]	; (8006a1c <SX1276SetModem+0xac>)
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006990:	e003      	b.n	800699a <SX1276SetModem+0x2a>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 8006992:	4b22      	ldr	r3, [pc, #136]	; (8006a1c <SX1276SetModem+0xac>)
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }

    if( SX1276.Settings.Modem == modem )
 800699a:	4b20      	ldr	r3, [pc, #128]	; (8006a1c <SX1276SetModem+0xac>)
 800699c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069a0:	79fa      	ldrb	r2, [r7, #7]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d036      	beq.n	8006a14 <SX1276SetModem+0xa4>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 80069a6:	4a1d      	ldr	r2, [pc, #116]	; (8006a1c <SX1276SetModem+0xac>)
 80069a8:	79fb      	ldrb	r3, [r7, #7]
 80069aa:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    switch( SX1276.Settings.Modem )
 80069ae:	4b1b      	ldr	r3, [pc, #108]	; (8006a1c <SX1276SetModem+0xac>)
 80069b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d016      	beq.n	80069e6 <SX1276SetModem+0x76>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80069b8:	2000      	movs	r0, #0
 80069ba:	f7ff ffad 	bl	8006918 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 80069be:	2001      	movs	r0, #1
 80069c0:	f000 f83e 	bl	8006a40 <SX1276Read>
 80069c4:	4603      	mov	r3, r0
 80069c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	4619      	mov	r1, r3
 80069ce:	2001      	movs	r0, #1
 80069d0:	f000 f826 	bl	8006a20 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80069d4:	2100      	movs	r1, #0
 80069d6:	2040      	movs	r0, #64	; 0x40
 80069d8:	f000 f822 	bl	8006a20 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 80069dc:	2130      	movs	r1, #48	; 0x30
 80069de:	2041      	movs	r0, #65	; 0x41
 80069e0:	f000 f81e 	bl	8006a20 <SX1276Write>
        break;
 80069e4:	e017      	b.n	8006a16 <SX1276SetModem+0xa6>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80069e6:	2000      	movs	r0, #0
 80069e8:	f7ff ff96 	bl	8006918 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 80069ec:	2001      	movs	r0, #1
 80069ee:	f000 f827 	bl	8006a40 <SX1276Read>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	4619      	mov	r1, r3
 80069fc:	2001      	movs	r0, #1
 80069fe:	f000 f80f 	bl	8006a20 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8006a02:	2100      	movs	r1, #0
 8006a04:	2040      	movs	r0, #64	; 0x40
 8006a06:	f000 f80b 	bl	8006a20 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	2041      	movs	r0, #65	; 0x41
 8006a0e:	f000 f807 	bl	8006a20 <SX1276Write>
        break;
 8006a12:	e000      	b.n	8006a16 <SX1276SetModem+0xa6>
        return;
 8006a14:	bf00      	nop
    }
}
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	2000139c 	.word	0x2000139c

08006a20 <SX1276Write>:

void SX1276Write( uint32_t addr, uint8_t data )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( addr, &data, 1 );
 8006a2c:	1cfb      	adds	r3, r7, #3
 8006a2e:	2201      	movs	r2, #1
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f814 	bl	8006a60 <SX1276WriteBuffer>
}
 8006a38:	bf00      	nop
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <SX1276Read>:

uint8_t SX1276Read( uint32_t addr )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 8006a48:	f107 030f 	add.w	r3, r7, #15
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f839 	bl	8006ac8 <SX1276ReadBuffer>
    return data;
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 8006a6e:	2100      	movs	r1, #0
 8006a70:	4813      	ldr	r0, [pc, #76]	; (8006ac0 <SX1276WriteBuffer+0x60>)
 8006a72:	f7f9 fe37 	bl	80006e4 <GpioWrite>

    SpiInOut( &SX1276.Spi, addr | 0x80 );
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	4619      	mov	r1, r3
 8006a82:	4810      	ldr	r0, [pc, #64]	; (8006ac4 <SX1276WriteBuffer+0x64>)
 8006a84:	f7fa f802 	bl	8000a8c <SpiInOut>
    for( i = 0; i < size; i++ )
 8006a88:	2300      	movs	r3, #0
 8006a8a:	75fb      	strb	r3, [r7, #23]
 8006a8c:	e00b      	b.n	8006aa6 <SX1276WriteBuffer+0x46>
    {
        SpiInOut( &SX1276.Spi, buffer[i] );
 8006a8e:	7dfb      	ldrb	r3, [r7, #23]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	4413      	add	r3, r2
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	4619      	mov	r1, r3
 8006a9a:	480a      	ldr	r0, [pc, #40]	; (8006ac4 <SX1276WriteBuffer+0x64>)
 8006a9c:	f7f9 fff6 	bl	8000a8c <SpiInOut>
    for( i = 0; i < size; i++ )
 8006aa0:	7dfb      	ldrb	r3, [r7, #23]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	75fb      	strb	r3, [r7, #23]
 8006aa6:	7dfa      	ldrb	r2, [r7, #23]
 8006aa8:	79fb      	ldrb	r3, [r7, #7]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d3ef      	bcc.n	8006a8e <SX1276WriteBuffer+0x2e>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 8006aae:	2101      	movs	r1, #1
 8006ab0:	4803      	ldr	r0, [pc, #12]	; (8006ac0 <SX1276WriteBuffer+0x60>)
 8006ab2:	f7f9 fe17 	bl	80006e4 <GpioWrite>
}
 8006ab6:	bf00      	nop
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	200013d8 	.word	0x200013d8
 8006ac4:	200013d4 	.word	0x200013d4

08006ac8 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	4814      	ldr	r0, [pc, #80]	; (8006b2c <SX1276ReadBuffer+0x64>)
 8006ada:	f7f9 fe03 	bl	80006e4 <GpioWrite>

    SpiInOut( &SX1276.Spi, addr & 0x7F );
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4811      	ldr	r0, [pc, #68]	; (8006b30 <SX1276ReadBuffer+0x68>)
 8006aec:	f7f9 ffce 	bl	8000a8c <SpiInOut>

    for( i = 0; i < size; i++ )
 8006af0:	2300      	movs	r3, #0
 8006af2:	75fb      	strb	r3, [r7, #23]
 8006af4:	e00d      	b.n	8006b12 <SX1276ReadBuffer+0x4a>
    {
        buffer[i] = SpiInOut( &SX1276.Spi, 0 );
 8006af6:	2100      	movs	r1, #0
 8006af8:	480d      	ldr	r0, [pc, #52]	; (8006b30 <SX1276ReadBuffer+0x68>)
 8006afa:	f7f9 ffc7 	bl	8000a8c <SpiInOut>
 8006afe:	4603      	mov	r3, r0
 8006b00:	4619      	mov	r1, r3
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	4413      	add	r3, r2
 8006b08:	b2ca      	uxtb	r2, r1
 8006b0a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	75fb      	strb	r3, [r7, #23]
 8006b12:	7dfa      	ldrb	r2, [r7, #23]
 8006b14:	79fb      	ldrb	r3, [r7, #7]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d3ed      	bcc.n	8006af6 <SX1276ReadBuffer+0x2e>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	4803      	ldr	r0, [pc, #12]	; (8006b2c <SX1276ReadBuffer+0x64>)
 8006b1e:	f7f9 fde1 	bl	80006e4 <GpioWrite>
}
 8006b22:	bf00      	nop
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	200013d8 	.word	0x200013d8
 8006b30:	200013d4 	.word	0x200013d4

08006b34 <SX1276WriteFifo>:

static void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	461a      	mov	r2, r3
 8006b44:	6879      	ldr	r1, [r7, #4]
 8006b46:	2000      	movs	r0, #0
 8006b48:	f7ff ff8a 	bl	8006a60 <SX1276WriteBuffer>
}
 8006b4c:	bf00      	nop
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <SX1276ReadFifo>:

static void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	70fb      	strb	r3, [r7, #3]
    SX1276ReadBuffer( 0, buffer, size );
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	461a      	mov	r2, r3
 8006b64:	6879      	ldr	r1, [r7, #4]
 8006b66:	2000      	movs	r0, #0
 8006b68:	f7ff ffae 	bl	8006ac8 <SX1276ReadBuffer>
}
 8006b6c:	bf00      	nop
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	460a      	mov	r2, r1
 8006b7e:	71fb      	strb	r3, [r7, #7]
 8006b80:	4613      	mov	r3, r2
 8006b82:	71bb      	strb	r3, [r7, #6]
    SX1276SetModem( modem );
 8006b84:	79fb      	ldrb	r3, [r7, #7]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7ff fef2 	bl	8006970 <SX1276SetModem>

    switch( modem )
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <SX1276SetMaxPayloadLength+0x24>
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d00e      	beq.n	8006bb4 <SX1276SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8006b96:	e014      	b.n	8006bc2 <SX1276SetMaxPayloadLength+0x4e>
        if( SX1276.Settings.Fsk.FixLen == false )
 8006b98:	4b0c      	ldr	r3, [pc, #48]	; (8006bcc <SX1276SetMaxPayloadLength+0x58>)
 8006b9a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006b9e:	f083 0301 	eor.w	r3, r3, #1
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00b      	beq.n	8006bc0 <SX1276SetMaxPayloadLength+0x4c>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8006ba8:	79bb      	ldrb	r3, [r7, #6]
 8006baa:	4619      	mov	r1, r3
 8006bac:	2032      	movs	r0, #50	; 0x32
 8006bae:	f7ff ff37 	bl	8006a20 <SX1276Write>
        break;
 8006bb2:	e005      	b.n	8006bc0 <SX1276SetMaxPayloadLength+0x4c>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8006bb4:	79bb      	ldrb	r3, [r7, #6]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	2023      	movs	r0, #35	; 0x23
 8006bba:	f7ff ff31 	bl	8006a20 <SX1276Write>
        break;
 8006bbe:	e000      	b.n	8006bc2 <SX1276SetMaxPayloadLength+0x4e>
        break;
 8006bc0:	bf00      	nop
}
 8006bc2:	bf00      	nop
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	2000139c 	.word	0x2000139c

08006bd0 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	71fb      	strb	r3, [r7, #7]
    SX1276SetModem( MODEM_LORA );
 8006bda:	2001      	movs	r0, #1
 8006bdc:	f7ff fec8 	bl	8006970 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8006be0:	4a09      	ldr	r2, [pc, #36]	; (8006c08 <SX1276SetPublicNetwork+0x38>)
 8006be2:	79fb      	ldrb	r3, [r7, #7]
 8006be4:	f882 309c 	strb.w	r3, [r2, #156]	; 0x9c
    if( enable == true )
 8006be8:	79fb      	ldrb	r3, [r7, #7]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d004      	beq.n	8006bf8 <SX1276SetPublicNetwork+0x28>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8006bee:	2134      	movs	r1, #52	; 0x34
 8006bf0:	2039      	movs	r0, #57	; 0x39
 8006bf2:	f7ff ff15 	bl	8006a20 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 8006bf6:	e003      	b.n	8006c00 <SX1276SetPublicNetwork+0x30>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8006bf8:	2112      	movs	r1, #18
 8006bfa:	2039      	movs	r0, #57	; 0x39
 8006bfc:	f7ff ff10 	bl	8006a20 <SX1276Write>
}
 8006c00:	bf00      	nop
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	2000139c 	.word	0x2000139c

08006c0c <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 8006c10:	f001 fb00 	bl	8008214 <SX1276GetBoardTcxoWakeupTime>
 8006c14:	4603      	mov	r3, r0
 8006c16:	3301      	adds	r3, #1
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <SX1276ConvertPllStepToFreqInHz>:

static uint32_t SX1276ConvertPllStepToFreqInHz( uint32_t pllSteps )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
    uint32_t freqInHzInt;
    uint32_t freqInHzFrac;
    
    // freqInHz = pllSteps * ( SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	0a1b      	lsrs	r3, r3, #8
 8006c28:	60fb      	str	r3, [r7, #12]
    freqInHzFrac = pllSteps - ( freqInHzInt << SX1276_PLL_STEP_SHIFT_AMOUNT );
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	021b      	lsls	r3, r3, #8
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	60bb      	str	r3, [r7, #8]
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f643 5209 	movw	r2, #15625	; 0x3d09
 8006c3a:	fb02 f203 	mul.w	r2, r2, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	f643 5109 	movw	r1, #15625	; 0x3d09
 8006c44:	fb01 f303 	mul.w	r3, r1, r3
 8006c48:	3380      	adds	r3, #128	; 0x80
 8006c4a:	0a1b      	lsrs	r3, r3, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8006c4c:	4413      	add	r3, r2
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bc80      	pop	{r7}
 8006c56:	4770      	bx	lr

08006c58 <SX1276ConvertFreqInHzToPllStep>:

static uint32_t SX1276ConvertFreqInHzToPllStep( uint32_t freqInHz )
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
    uint32_t stepsInt;
    uint32_t stepsFrac;

    // pllSteps = freqInHz / (SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a0f      	ldr	r2, [pc, #60]	; (8006ca0 <SX1276ConvertFreqInHzToPllStep+0x48>)
 8006c64:	fba2 2303 	umull	r2, r3, r2, r3
 8006c68:	0b1b      	lsrs	r3, r3, #12
 8006c6a:	60fb      	str	r3, [r7, #12]
    stepsFrac = freqInHz - ( stepsInt * SX1276_PLL_STEP_SCALED );
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f643 5209 	movw	r2, #15625	; 0x3d09
 8006c72:	fb02 f303 	mul.w	r3, r2, r3
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	60bb      	str	r3, [r7, #8]
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	021a      	lsls	r2, r3, #8
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	021b      	lsls	r3, r3, #8
 8006c84:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8006c88:	3304      	adds	r3, #4
 8006c8a:	4905      	ldr	r1, [pc, #20]	; (8006ca0 <SX1276ConvertFreqInHzToPllStep+0x48>)
 8006c8c:	fba1 1303 	umull	r1, r3, r1, r3
 8006c90:	0b1b      	lsrs	r3, r3, #12
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8006c92:	4413      	add	r3, r2
             SX1276_PLL_STEP_SCALED );
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bc80      	pop	{r7}
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	431bde83 	.word	0x431bde83

08006ca4 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8006cac:	2300      	movs	r3, #0
 8006cae:	73fb      	strb	r3, [r7, #15]
 8006cb0:	e017      	b.n	8006ce2 <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
 8006cb4:	4a0f      	ldr	r2, [pc, #60]	; (8006cf4 <GetFskBandwidthRegValue+0x50>)
 8006cb6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d30d      	bcc.n	8006cdc <GetFskBandwidthRegValue+0x38>
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	4a0b      	ldr	r2, [pc, #44]	; (8006cf4 <GetFskBandwidthRegValue+0x50>)
 8006cc6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d205      	bcs.n	8006cdc <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
 8006cd2:	4a08      	ldr	r2, [pc, #32]	; (8006cf4 <GetFskBandwidthRegValue+0x50>)
 8006cd4:	00db      	lsls	r3, r3, #3
 8006cd6:	4413      	add	r3, r2
 8006cd8:	791b      	ldrb	r3, [r3, #4]
 8006cda:	e006      	b.n	8006cea <GetFskBandwidthRegValue+0x46>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	73fb      	strb	r3, [r7, #15]
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	2b14      	cmp	r3, #20
 8006ce6:	d9e4      	bls.n	8006cb2 <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8006ce8:	e7fe      	b.n	8006ce8 <GetFskBandwidthRegValue+0x44>
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bc80      	pop	{r7}
 8006cf2:	4770      	bx	lr
 8006cf4:	08009db4 	.word	0x08009db4

08006cf8 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
    uint32_t bandwidthInHz = 0;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d00f      	beq.n	8006d2a <SX1276GetLoRaBandwidthInHz+0x32>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d80f      	bhi.n	8006d30 <SX1276GetLoRaBandwidthInHz+0x38>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <SX1276GetLoRaBandwidthInHz+0x26>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d003      	beq.n	8006d24 <SX1276GetLoRaBandwidthInHz+0x2c>
 8006d1c:	e008      	b.n	8006d30 <SX1276GetLoRaBandwidthInHz+0x38>
    {
    case 0: // 125 kHz
        bandwidthInHz = 125000UL;
 8006d1e:	4b07      	ldr	r3, [pc, #28]	; (8006d3c <SX1276GetLoRaBandwidthInHz+0x44>)
 8006d20:	60fb      	str	r3, [r7, #12]
        break;
 8006d22:	e005      	b.n	8006d30 <SX1276GetLoRaBandwidthInHz+0x38>
    case 1: // 250 kHz
        bandwidthInHz = 250000UL;
 8006d24:	4b06      	ldr	r3, [pc, #24]	; (8006d40 <SX1276GetLoRaBandwidthInHz+0x48>)
 8006d26:	60fb      	str	r3, [r7, #12]
        break;
 8006d28:	e002      	b.n	8006d30 <SX1276GetLoRaBandwidthInHz+0x38>
    case 2: // 500 kHz
        bandwidthInHz = 500000UL;
 8006d2a:	4b06      	ldr	r3, [pc, #24]	; (8006d44 <SX1276GetLoRaBandwidthInHz+0x4c>)
 8006d2c:	60fb      	str	r3, [r7, #12]
        break;
 8006d2e:	bf00      	nop
    }

    return bandwidthInHz;
 8006d30:	68fb      	ldr	r3, [r7, #12]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bc80      	pop	{r7}
 8006d3a:	4770      	bx	lr
 8006d3c:	0001e848 	.word	0x0001e848
 8006d40:	0003d090 	.word	0x0003d090
 8006d44:	0007a120 	.word	0x0007a120

08006d48 <SX1276GetGfskTimeOnAirNumerator>:

static uint32_t SX1276GetGfskTimeOnAirNumerator( uint16_t preambleLen, bool fixLen,
                                                 uint8_t payloadLen, bool crcOn )
{
 8006d48:	b490      	push	{r4, r7}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4604      	mov	r4, r0
 8006d50:	4608      	mov	r0, r1
 8006d52:	4611      	mov	r1, r2
 8006d54:	461a      	mov	r2, r3
 8006d56:	4623      	mov	r3, r4
 8006d58:	80fb      	strh	r3, [r7, #6]
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	717b      	strb	r3, [r7, #5]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	713b      	strb	r3, [r7, #4]
 8006d62:	4613      	mov	r3, r2
 8006d64:	70fb      	strb	r3, [r7, #3]
    const uint8_t syncWordLength = 3;
 8006d66:	2303      	movs	r3, #3
 8006d68:	73fb      	strb	r3, [r7, #15]

    return ( preambleLen << 3 ) +
 8006d6a:	88fb      	ldrh	r3, [r7, #6]
 8006d6c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8006d6e:	797a      	ldrb	r2, [r7, #5]
 8006d70:	f082 0201 	eor.w	r2, r2, #1
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	2a00      	cmp	r2, #0
 8006d78:	d001      	beq.n	8006d7e <SX1276GetGfskTimeOnAirNumerator+0x36>
 8006d7a:	2208      	movs	r2, #8
 8006d7c:	e000      	b.n	8006d80 <SX1276GetGfskTimeOnAirNumerator+0x38>
 8006d7e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8006d80:	441a      	add	r2, r3
             ( syncWordLength << 3 ) +
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8006d86:	441a      	add	r2, r3
             ( ( payloadLen +
 8006d88:	793b      	ldrb	r3, [r7, #4]
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 8006d8a:	78f9      	ldrb	r1, [r7, #3]
 8006d8c:	2900      	cmp	r1, #0
 8006d8e:	d001      	beq.n	8006d94 <SX1276GetGfskTimeOnAirNumerator+0x4c>
 8006d90:	2102      	movs	r1, #2
 8006d92:	e000      	b.n	8006d96 <SX1276GetGfskTimeOnAirNumerator+0x4e>
 8006d94:	2100      	movs	r1, #0
               ( 0 ) + // Address filter size
 8006d96:	440b      	add	r3, r1
               ) << 3 
 8006d98:	00db      	lsls	r3, r3, #3
             ( syncWordLength << 3 ) +
 8006d9a:	4413      	add	r3, r2
             );
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bc90      	pop	{r4, r7}
 8006da4:	4770      	bx	lr

08006da6 <SX1276GetLoRaTimeOnAirNumerator>:

static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 8006da6:	b480      	push	{r7}
 8006da8:	b08b      	sub	sp, #44	; 0x2c
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	60b9      	str	r1, [r7, #8]
 8006db0:	4611      	mov	r1, r2
 8006db2:	461a      	mov	r2, r3
 8006db4:	460b      	mov	r3, r1
 8006db6:	71fb      	strb	r3, [r7, #7]
 8006db8:	4613      	mov	r3, r2
 8006dba:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8006dbc:	79fb      	ldrb	r3, [r7, #7]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2b05      	cmp	r3, #5
 8006dcc:	d002      	beq.n	8006dd4 <SX1276GetLoRaTimeOnAirNumerator+0x2e>
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	2b06      	cmp	r3, #6
 8006dd2:	d104      	bne.n	8006dde <SX1276GetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8006dd4:	88bb      	ldrh	r3, [r7, #4]
 8006dd6:	2b0b      	cmp	r3, #11
 8006dd8:	d801      	bhi.n	8006dde <SX1276GetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8006dda:	230c      	movs	r3, #12
 8006ddc:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d105      	bne.n	8006df0 <SX1276GetLoRaTimeOnAirNumerator+0x4a>
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2b0b      	cmp	r3, #11
 8006de8:	d008      	beq.n	8006dfc <SX1276GetLoRaTimeOnAirNumerator+0x56>
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	2b0c      	cmp	r3, #12
 8006dee:	d005      	beq.n	8006dfc <SX1276GetLoRaTimeOnAirNumerator+0x56>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d105      	bne.n	8006e02 <SX1276GetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b0c      	cmp	r3, #12
 8006dfa:	d102      	bne.n	8006e02 <SX1276GetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006e02:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006e06:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8006e08:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006e0c:	2a00      	cmp	r2, #0
 8006e0e:	d001      	beq.n	8006e14 <SX1276GetLoRaTimeOnAirNumerator+0x6e>
 8006e10:	2210      	movs	r2, #16
 8006e12:	e000      	b.n	8006e16 <SX1276GetLoRaTimeOnAirNumerator+0x70>
 8006e14:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006e16:	4413      	add	r3, r2
 8006e18:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8006e1e:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8006e20:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8006e24:	2a00      	cmp	r2, #0
 8006e26:	d001      	beq.n	8006e2c <SX1276GetLoRaTimeOnAirNumerator+0x86>
 8006e28:	2200      	movs	r2, #0
 8006e2a:	e000      	b.n	8006e2e <SX1276GetLoRaTimeOnAirNumerator+0x88>
 8006e2c:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8006e2e:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006e30:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2b06      	cmp	r3, #6
 8006e36:	d803      	bhi.n	8006e40 <SX1276GetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	623b      	str	r3, [r7, #32]
 8006e3e:	e00e      	b.n	8006e5e <SX1276GetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	3308      	adds	r3, #8
 8006e44:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8006e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d004      	beq.n	8006e58 <SX1276GetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	3b02      	subs	r3, #2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	623b      	str	r3, [r7, #32]
 8006e56:	e002      	b.n	8006e5e <SX1276GetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	da01      	bge.n	8006e68 <SX1276GetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8006e68:	69fa      	ldr	r2, [r7, #28]
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	1e5a      	subs	r2, r3, #1
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	fb92 f3f3 	sdiv	r3, r2, r3
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	fb02 f203 	mul.w	r2, r2, r3
 8006e7c:	88bb      	ldrh	r3, [r7, #4]
 8006e7e:	4413      	add	r3, r2
    int32_t intermediate =
 8006e80:	330c      	adds	r3, #12
 8006e82:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2b06      	cmp	r3, #6
 8006e88:	d802      	bhi.n	8006e90 <SX1276GetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	3302      	adds	r3, #2
 8006e8e:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	3b02      	subs	r3, #2
 8006e9a:	fa02 f303 	lsl.w	r3, r2, r3
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	372c      	adds	r7, #44	; 0x2c
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bc80      	pop	{r7}
 8006ea6:	4770      	bx	lr

08006ea8 <SX1276OnTimeoutIrq>:

static void SX1276OnTimeoutIrq( void* context )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 8006eb0:	4b4d      	ldr	r3, [pc, #308]	; (8006fe8 <SX1276OnTimeoutIrq+0x140>)
 8006eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d002      	beq.n	8006ec0 <SX1276OnTimeoutIrq+0x18>
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d043      	beq.n	8006f46 <SX1276OnTimeoutIrq+0x9e>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8006ebe:	e08e      	b.n	8006fde <SX1276OnTimeoutIrq+0x136>
        if( SX1276.Settings.Modem == MODEM_FSK )
 8006ec0:	4b49      	ldr	r3, [pc, #292]	; (8006fe8 <SX1276OnTimeoutIrq+0x140>)
 8006ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d12f      	bne.n	8006f2a <SX1276OnTimeoutIrq+0x82>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006eca:	4b47      	ldr	r3, [pc, #284]	; (8006fe8 <SX1276OnTimeoutIrq+0x140>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8006ed2:	4b45      	ldr	r3, [pc, #276]	; (8006fe8 <SX1276OnTimeoutIrq+0x140>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006eda:	4b43      	ldr	r3, [pc, #268]	; (8006fe8 <SX1276OnTimeoutIrq+0x140>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8006ee2:	4b41      	ldr	r3, [pc, #260]	; (8006fe8 <SX1276OnTimeoutIrq+0x140>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8006eea:	210b      	movs	r1, #11
 8006eec:	203e      	movs	r0, #62	; 0x3e
 8006eee:	f7ff fd97 	bl	8006a20 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8006ef2:	2110      	movs	r1, #16
 8006ef4:	203f      	movs	r0, #63	; 0x3f
 8006ef6:	f7ff fd93 	bl	8006a20 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8006efa:	4b3b      	ldr	r3, [pc, #236]	; (8006fe8 <SX1276OnTimeoutIrq+0x140>)
 8006efc:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00b      	beq.n	8006f1c <SX1276OnTimeoutIrq+0x74>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006f04:	200d      	movs	r0, #13
 8006f06:	f7ff fd9b 	bl	8006a40 <SX1276Read>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	4619      	mov	r1, r3
 8006f14:	200d      	movs	r0, #13
 8006f16:	f7ff fd83 	bl	8006a20 <SX1276Write>
 8006f1a:	e006      	b.n	8006f2a <SX1276OnTimeoutIrq+0x82>
                SX1276.Settings.State = RF_IDLE;
 8006f1c:	4b32      	ldr	r3, [pc, #200]	; (8006fe8 <SX1276OnTimeoutIrq+0x140>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                TimerStop( &RxTimeoutSyncWord );
 8006f24:	4831      	ldr	r0, [pc, #196]	; (8006fec <SX1276OnTimeoutIrq+0x144>)
 8006f26:	f001 fc31 	bl	800878c <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006f2a:	4b31      	ldr	r3, [pc, #196]	; (8006ff0 <SX1276OnTimeoutIrq+0x148>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d052      	beq.n	8006fd8 <SX1276OnTimeoutIrq+0x130>
 8006f32:	4b2f      	ldr	r3, [pc, #188]	; (8006ff0 <SX1276OnTimeoutIrq+0x148>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d04d      	beq.n	8006fd8 <SX1276OnTimeoutIrq+0x130>
            RadioEvents->RxTimeout( );
 8006f3c:	4b2c      	ldr	r3, [pc, #176]	; (8006ff0 <SX1276OnTimeoutIrq+0x148>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	4798      	blx	r3
        break;
 8006f44:	e048      	b.n	8006fd8 <SX1276OnTimeoutIrq+0x130>
        SX1276Reset( );
 8006f46:	f001 f96d 	bl	8008224 <SX1276Reset>
        RxChainCalibration( );
 8006f4a:	f7fe fd29 	bl	80059a0 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006f4e:	2000      	movs	r0, #0
 8006f50:	f7ff fce2 	bl	8006918 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006f54:	2300      	movs	r3, #0
 8006f56:	73fb      	strb	r3, [r7, #15]
 8006f58:	e020      	b.n	8006f9c <SX1276OnTimeoutIrq+0xf4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8006f5a:	7bfa      	ldrb	r2, [r7, #15]
 8006f5c:	4925      	ldr	r1, [pc, #148]	; (8006ff4 <SX1276OnTimeoutIrq+0x14c>)
 8006f5e:	4613      	mov	r3, r2
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	4413      	add	r3, r2
 8006f64:	440b      	add	r3, r1
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7ff fd01 	bl	8006970 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8006f6e:	7bfa      	ldrb	r2, [r7, #15]
 8006f70:	4920      	ldr	r1, [pc, #128]	; (8006ff4 <SX1276OnTimeoutIrq+0x14c>)
 8006f72:	4613      	mov	r3, r2
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	4413      	add	r3, r2
 8006f78:	440b      	add	r3, r1
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	7bfa      	ldrb	r2, [r7, #15]
 8006f82:	491c      	ldr	r1, [pc, #112]	; (8006ff4 <SX1276OnTimeoutIrq+0x14c>)
 8006f84:	4613      	mov	r3, r2
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	4413      	add	r3, r2
 8006f8a:	440b      	add	r3, r1
 8006f8c:	3302      	adds	r3, #2
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	4619      	mov	r1, r3
 8006f92:	f7ff fd45 	bl	8006a20 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	73fb      	strb	r3, [r7, #15]
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
 8006f9e:	2b0f      	cmp	r3, #15
 8006fa0:	d9db      	bls.n	8006f5a <SX1276OnTimeoutIrq+0xb2>
        SX1276SetModem( MODEM_FSK );
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	f7ff fce4 	bl	8006970 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8006fa8:	4b0f      	ldr	r3, [pc, #60]	; (8006fe8 <SX1276OnTimeoutIrq+0x140>)
 8006faa:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7ff fe0e 	bl	8006bd0 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8006fb4:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <SX1276OnTimeoutIrq+0x140>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006fbc:	4b0c      	ldr	r3, [pc, #48]	; (8006ff0 <SX1276OnTimeoutIrq+0x148>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00b      	beq.n	8006fdc <SX1276OnTimeoutIrq+0x134>
 8006fc4:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <SX1276OnTimeoutIrq+0x148>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d006      	beq.n	8006fdc <SX1276OnTimeoutIrq+0x134>
            RadioEvents->TxTimeout( );
 8006fce:	4b08      	ldr	r3, [pc, #32]	; (8006ff0 <SX1276OnTimeoutIrq+0x148>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	4798      	blx	r3
        break;
 8006fd6:	e001      	b.n	8006fdc <SX1276OnTimeoutIrq+0x134>
        break;
 8006fd8:	bf00      	nop
 8006fda:	e000      	b.n	8006fde <SX1276OnTimeoutIrq+0x136>
        break;
 8006fdc:	bf00      	nop
    }
}
 8006fde:	bf00      	nop
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	2000139c 	.word	0x2000139c
 8006fec:	20001384 	.word	0x20001384
 8006ff0:	20001050 	.word	0x20001050
 8006ff4:	08009d84 	.word	0x08009d84

08006ff8 <SX1276OnDio0Irq>:

static void SX1276OnDio0Irq( void* context )
{
 8006ff8:	b590      	push	{r4, r7, lr}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
    volatile uint8_t irqFlags = 0;
 8007000:	2300      	movs	r3, #0
 8007002:	737b      	strb	r3, [r7, #13]

    switch( SX1276.Settings.State )
 8007004:	4bae      	ldr	r3, [pc, #696]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 8007006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800700a:	2b01      	cmp	r3, #1
 800700c:	d003      	beq.n	8007016 <SX1276OnDio0Irq+0x1e>
 800700e:	2b02      	cmp	r3, #2
 8007010:	f000 81de 	beq.w	80073d0 <SX1276OnDio0Irq+0x3d8>
                }
                break;
            }
            break;
        default:
            break;
 8007014:	e1fb      	b.n	800740e <SX1276OnDio0Irq+0x416>
            switch( SX1276.Settings.Modem )
 8007016:	4baa      	ldr	r3, [pc, #680]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 8007018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800701c:	2b00      	cmp	r3, #0
 800701e:	d003      	beq.n	8007028 <SX1276OnDio0Irq+0x30>
 8007020:	2b01      	cmp	r3, #1
 8007022:	f000 80ec 	beq.w	80071fe <SX1276OnDio0Irq+0x206>
                break;
 8007026:	e1d2      	b.n	80073ce <SX1276OnDio0Irq+0x3d6>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8007028:	4ba5      	ldr	r3, [pc, #660]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 800702a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800702e:	2b00      	cmp	r3, #0
 8007030:	d04e      	beq.n	80070d0 <SX1276OnDio0Irq+0xd8>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8007032:	203f      	movs	r0, #63	; 0x3f
 8007034:	f7ff fd04 	bl	8006a40 <SX1276Read>
 8007038:	4603      	mov	r3, r0
 800703a:	737b      	strb	r3, [r7, #13]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800703c:	7b7b      	ldrb	r3, [r7, #13]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b02      	cmp	r3, #2
 8007046:	d043      	beq.n	80070d0 <SX1276OnDio0Irq+0xd8>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8007048:	210b      	movs	r1, #11
 800704a:	203e      	movs	r0, #62	; 0x3e
 800704c:	f7ff fce8 	bl	8006a20 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8007050:	2110      	movs	r1, #16
 8007052:	203f      	movs	r0, #63	; 0x3f
 8007054:	f7ff fce4 	bl	8006a20 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8007058:	489a      	ldr	r0, [pc, #616]	; (80072c4 <SX1276OnDio0Irq+0x2cc>)
 800705a:	f001 fb97 	bl	800878c <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800705e:	4b98      	ldr	r3, [pc, #608]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 8007060:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8007064:	f083 0301 	eor.w	r3, r3, #1
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d007      	beq.n	800707e <SX1276OnDio0Irq+0x86>
                            TimerStop( &RxTimeoutSyncWord );
 800706e:	4896      	ldr	r0, [pc, #600]	; (80072c8 <SX1276OnDio0Irq+0x2d0>)
 8007070:	f001 fb8c 	bl	800878c <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8007074:	4b92      	ldr	r3, [pc, #584]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 8007076:	2200      	movs	r2, #0
 8007078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800707c:	e00a      	b.n	8007094 <SX1276OnDio0Irq+0x9c>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800707e:	200d      	movs	r0, #13
 8007080:	f7ff fcde 	bl	8006a40 <SX1276Read>
 8007084:	4603      	mov	r3, r0
 8007086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800708a:	b2db      	uxtb	r3, r3
 800708c:	4619      	mov	r1, r3
 800708e:	200d      	movs	r0, #13
 8007090:	f7ff fcc6 	bl	8006a20 <SX1276Write>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8007094:	4b8d      	ldr	r3, [pc, #564]	; (80072cc <SX1276OnDio0Irq+0x2d4>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d008      	beq.n	80070ae <SX1276OnDio0Irq+0xb6>
 800709c:	4b8b      	ldr	r3, [pc, #556]	; (80072cc <SX1276OnDio0Irq+0x2d4>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <SX1276OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 80070a6:	4b89      	ldr	r3, [pc, #548]	; (80072cc <SX1276OnDio0Irq+0x2d4>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80070ae:	4b84      	ldr	r3, [pc, #528]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80070b6:	4b82      	ldr	r3, [pc, #520]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80070be:	4b80      	ldr	r3, [pc, #512]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80070c6:	4b7e      	ldr	r3, [pc, #504]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                        break;
 80070ce:	e17e      	b.n	80073ce <SX1276OnDio0Irq+0x3d6>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80070d0:	4b7b      	ldr	r3, [pc, #492]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 80070d2:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d133      	bne.n	8007142 <SX1276OnDio0Irq+0x14a>
 80070da:	4b79      	ldr	r3, [pc, #484]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 80070dc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d12e      	bne.n	8007142 <SX1276OnDio0Irq+0x14a>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80070e4:	4b76      	ldr	r3, [pc, #472]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 80070e6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80070ea:	f083 0301 	eor.w	r3, r3, #1
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d004      	beq.n	80070fe <SX1276OnDio0Irq+0x106>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80070f4:	2101      	movs	r1, #1
 80070f6:	4876      	ldr	r0, [pc, #472]	; (80072d0 <SX1276OnDio0Irq+0x2d8>)
 80070f8:	f7ff fd2c 	bl	8006b54 <SX1276ReadFifo>
 80070fc:	e007      	b.n	800710e <SX1276OnDio0Irq+0x116>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80070fe:	2032      	movs	r0, #50	; 0x32
 8007100:	f7ff fc9e 	bl	8006a40 <SX1276Read>
 8007104:	4603      	mov	r3, r0
 8007106:	b29a      	uxth	r2, r3
 8007108:	4b6d      	ldr	r3, [pc, #436]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 800710a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800710e:	4b6c      	ldr	r3, [pc, #432]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 8007110:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007114:	461a      	mov	r2, r3
 8007116:	4b6f      	ldr	r3, [pc, #444]	; (80072d4 <SX1276OnDio0Irq+0x2dc>)
 8007118:	18d0      	adds	r0, r2, r3
 800711a:	4b69      	ldr	r3, [pc, #420]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 800711c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8007120:	b2da      	uxtb	r2, r3
 8007122:	4b67      	ldr	r3, [pc, #412]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 8007124:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007128:	b2db      	uxtb	r3, r3
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	b2db      	uxtb	r3, r3
 800712e:	4619      	mov	r1, r3
 8007130:	f7ff fd10 	bl	8006b54 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8007134:	4b62      	ldr	r3, [pc, #392]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 8007136:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 800713a:	4b61      	ldr	r3, [pc, #388]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 800713c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8007140:	e018      	b.n	8007174 <SX1276OnDio0Irq+0x17c>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8007142:	4b5f      	ldr	r3, [pc, #380]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 8007144:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007148:	461a      	mov	r2, r3
 800714a:	4b62      	ldr	r3, [pc, #392]	; (80072d4 <SX1276OnDio0Irq+0x2dc>)
 800714c:	18d0      	adds	r0, r2, r3
 800714e:	4b5c      	ldr	r3, [pc, #368]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 8007150:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8007154:	b2da      	uxtb	r2, r3
 8007156:	4b5a      	ldr	r3, [pc, #360]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 8007158:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800715c:	b2db      	uxtb	r3, r3
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	b2db      	uxtb	r3, r3
 8007162:	4619      	mov	r1, r3
 8007164:	f7ff fcf6 	bl	8006b54 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8007168:	4b55      	ldr	r3, [pc, #340]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 800716a:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 800716e:	4b54      	ldr	r3, [pc, #336]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 8007170:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                TimerStop( &RxTimeoutTimer );
 8007174:	4853      	ldr	r0, [pc, #332]	; (80072c4 <SX1276OnDio0Irq+0x2cc>)
 8007176:	f001 fb09 	bl	800878c <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 800717a:	4b51      	ldr	r3, [pc, #324]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 800717c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8007180:	f083 0301 	eor.w	r3, r3, #1
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d007      	beq.n	800719a <SX1276OnDio0Irq+0x1a2>
                    SX1276.Settings.State = RF_IDLE;
 800718a:	4b4d      	ldr	r3, [pc, #308]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                    TimerStop( &RxTimeoutSyncWord );
 8007192:	484d      	ldr	r0, [pc, #308]	; (80072c8 <SX1276OnDio0Irq+0x2d0>)
 8007194:	f001 fafa 	bl	800878c <TimerStop>
 8007198:	e00a      	b.n	80071b0 <SX1276OnDio0Irq+0x1b8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800719a:	200d      	movs	r0, #13
 800719c:	f7ff fc50 	bl	8006a40 <SX1276Read>
 80071a0:	4603      	mov	r3, r0
 80071a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	4619      	mov	r1, r3
 80071aa:	200d      	movs	r0, #13
 80071ac:	f7ff fc38 	bl	8006a20 <SX1276Write>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80071b0:	4b46      	ldr	r3, [pc, #280]	; (80072cc <SX1276OnDio0Irq+0x2d4>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d011      	beq.n	80071dc <SX1276OnDio0Irq+0x1e4>
 80071b8:	4b44      	ldr	r3, [pc, #272]	; (80072cc <SX1276OnDio0Irq+0x2d4>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00c      	beq.n	80071dc <SX1276OnDio0Irq+0x1e4>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 80071c2:	4b42      	ldr	r3, [pc, #264]	; (80072cc <SX1276OnDio0Irq+0x2d4>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689c      	ldr	r4, [r3, #8]
 80071c8:	4b3d      	ldr	r3, [pc, #244]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 80071ca:	f8b3 107a 	ldrh.w	r1, [r3, #122]	; 0x7a
 80071ce:	4b3c      	ldr	r3, [pc, #240]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 80071d0:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 80071d4:	b21a      	sxth	r2, r3
 80071d6:	2300      	movs	r3, #0
 80071d8:	483e      	ldr	r0, [pc, #248]	; (80072d4 <SX1276OnDio0Irq+0x2dc>)
 80071da:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80071dc:	4b38      	ldr	r3, [pc, #224]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80071e4:	4b36      	ldr	r3, [pc, #216]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80071ec:	4b34      	ldr	r3, [pc, #208]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                SX1276.Settings.FskPacketHandler.Size = 0;
 80071f4:	4b32      	ldr	r3, [pc, #200]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                break;
 80071fc:	e0e7      	b.n	80073ce <SX1276OnDio0Irq+0x3d6>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 80071fe:	2140      	movs	r1, #64	; 0x40
 8007200:	2012      	movs	r0, #18
 8007202:	f7ff fc0d 	bl	8006a20 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8007206:	2012      	movs	r0, #18
 8007208:	f7ff fc1a 	bl	8006a40 <SX1276Read>
 800720c:	4603      	mov	r3, r0
 800720e:	737b      	strb	r3, [r7, #13]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8007210:	7b7b      	ldrb	r3, [r7, #13]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	f003 0320 	and.w	r3, r3, #32
 8007218:	2b20      	cmp	r3, #32
 800721a:	d122      	bne.n	8007262 <SX1276OnDio0Irq+0x26a>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800721c:	2120      	movs	r1, #32
 800721e:	2012      	movs	r0, #18
 8007220:	f7ff fbfe 	bl	8006a20 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8007224:	4b26      	ldr	r3, [pc, #152]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 8007226:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800722a:	f083 0301 	eor.w	r3, r3, #1
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <SX1276OnDio0Irq+0x244>
                            SX1276.Settings.State = RF_IDLE;
 8007234:	4b22      	ldr	r3, [pc, #136]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                        TimerStop( &RxTimeoutTimer );
 800723c:	4821      	ldr	r0, [pc, #132]	; (80072c4 <SX1276OnDio0Irq+0x2cc>)
 800723e:	f001 faa5 	bl	800878c <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8007242:	4b22      	ldr	r3, [pc, #136]	; (80072cc <SX1276OnDio0Irq+0x2d4>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 80be 	beq.w	80073c8 <SX1276OnDio0Irq+0x3d0>
 800724c:	4b1f      	ldr	r3, [pc, #124]	; (80072cc <SX1276OnDio0Irq+0x2d4>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 80b8 	beq.w	80073c8 <SX1276OnDio0Irq+0x3d0>
                            RadioEvents->RxError( );
 8007258:	4b1c      	ldr	r3, [pc, #112]	; (80072cc <SX1276OnDio0Irq+0x2d4>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	4798      	blx	r3
                        break;
 8007260:	e0b2      	b.n	80073c8 <SX1276OnDio0Irq+0x3d0>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8007262:	2019      	movs	r0, #25
 8007264:	f7ff fbec 	bl	8006a40 <SX1276Read>
 8007268:	4603      	mov	r3, r0
 800726a:	b25b      	sxtb	r3, r3
 800726c:	3302      	adds	r3, #2
 800726e:	109b      	asrs	r3, r3, #2
 8007270:	b25a      	sxtb	r2, r3
 8007272:	4b13      	ldr	r3, [pc, #76]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 8007274:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8007278:	201a      	movs	r0, #26
 800727a:	f7ff fbe1 	bl	8006a40 <SX1276Read>
 800727e:	4603      	mov	r3, r0
 8007280:	81fb      	strh	r3, [r7, #14]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8007282:	4b0f      	ldr	r3, [pc, #60]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 8007284:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8007288:	2b00      	cmp	r3, #0
 800728a:	da3c      	bge.n	8007306 <SX1276OnDio0Irq+0x30e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800728c:	4b0c      	ldr	r3, [pc, #48]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 800728e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007290:	4a11      	ldr	r2, [pc, #68]	; (80072d8 <SX1276OnDio0Irq+0x2e0>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d922      	bls.n	80072dc <SX1276OnDio0Irq+0x2e4>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8007296:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800729a:	111b      	asrs	r3, r3, #4
 800729c:	b21b      	sxth	r3, r3
 800729e:	b29a      	uxth	r2, r3
 80072a0:	89fb      	ldrh	r3, [r7, #14]
 80072a2:	4413      	add	r3, r2
 80072a4:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 80072a6:	4b06      	ldr	r3, [pc, #24]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 80072a8:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 80072ac:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80072ae:	4413      	add	r3, r2
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	3b9d      	subs	r3, #157	; 0x9d
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	b21a      	sxth	r2, r3
 80072b8:	4b01      	ldr	r3, [pc, #4]	; (80072c0 <SX1276OnDio0Irq+0x2c8>)
 80072ba:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 80072be:	e044      	b.n	800734a <SX1276OnDio0Irq+0x352>
 80072c0:	2000139c 	.word	0x2000139c
 80072c4:	20001444 	.word	0x20001444
 80072c8:	20001384 	.word	0x20001384
 80072cc:	20001050 	.word	0x20001050
 80072d0:	20001416 	.word	0x20001416
 80072d4:	20001054 	.word	0x20001054
 80072d8:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80072dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80072e0:	111b      	asrs	r3, r3, #4
 80072e2:	b21b      	sxth	r3, r3
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	89fb      	ldrh	r3, [r7, #14]
 80072e8:	4413      	add	r3, r2
 80072ea:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 80072ec:	4b4a      	ldr	r3, [pc, #296]	; (8007418 <SX1276OnDio0Irq+0x420>)
 80072ee:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 80072f2:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80072f4:	4413      	add	r3, r2
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	3ba4      	subs	r3, #164	; 0xa4
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	b21a      	sxth	r2, r3
 80072fe:	4b46      	ldr	r3, [pc, #280]	; (8007418 <SX1276OnDio0Irq+0x420>)
 8007300:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8007304:	e021      	b.n	800734a <SX1276OnDio0Irq+0x352>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8007306:	4b44      	ldr	r3, [pc, #272]	; (8007418 <SX1276OnDio0Irq+0x420>)
 8007308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800730a:	4a44      	ldr	r2, [pc, #272]	; (800741c <SX1276OnDio0Irq+0x424>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d90e      	bls.n	800732e <SX1276OnDio0Irq+0x336>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8007310:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007314:	111b      	asrs	r3, r3, #4
 8007316:	b21b      	sxth	r3, r3
 8007318:	b29a      	uxth	r2, r3
 800731a:	89fb      	ldrh	r3, [r7, #14]
 800731c:	4413      	add	r3, r2
 800731e:	b29b      	uxth	r3, r3
 8007320:	3b9d      	subs	r3, #157	; 0x9d
 8007322:	b29b      	uxth	r3, r3
 8007324:	b21a      	sxth	r2, r3
 8007326:	4b3c      	ldr	r3, [pc, #240]	; (8007418 <SX1276OnDio0Irq+0x420>)
 8007328:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 800732c:	e00d      	b.n	800734a <SX1276OnDio0Irq+0x352>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800732e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007332:	111b      	asrs	r3, r3, #4
 8007334:	b21b      	sxth	r3, r3
 8007336:	b29a      	uxth	r2, r3
 8007338:	89fb      	ldrh	r3, [r7, #14]
 800733a:	4413      	add	r3, r2
 800733c:	b29b      	uxth	r3, r3
 800733e:	3ba4      	subs	r3, #164	; 0xa4
 8007340:	b29b      	uxth	r3, r3
 8007342:	b21a      	sxth	r2, r3
 8007344:	4b34      	ldr	r3, [pc, #208]	; (8007418 <SX1276OnDio0Irq+0x420>)
 8007346:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800734a:	2013      	movs	r0, #19
 800734c:	f7ff fb78 	bl	8006a40 <SX1276Read>
 8007350:	4603      	mov	r3, r0
 8007352:	461a      	mov	r2, r3
 8007354:	4b30      	ldr	r3, [pc, #192]	; (8007418 <SX1276OnDio0Irq+0x420>)
 8007356:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 800735a:	2010      	movs	r0, #16
 800735c:	f7ff fb70 	bl	8006a40 <SX1276Read>
 8007360:	4603      	mov	r3, r0
 8007362:	4619      	mov	r1, r3
 8007364:	200d      	movs	r0, #13
 8007366:	f7ff fb5b 	bl	8006a20 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 800736a:	4b2b      	ldr	r3, [pc, #172]	; (8007418 <SX1276OnDio0Irq+0x420>)
 800736c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8007370:	4619      	mov	r1, r3
 8007372:	482b      	ldr	r0, [pc, #172]	; (8007420 <SX1276OnDio0Irq+0x428>)
 8007374:	f7ff fbee 	bl	8006b54 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8007378:	4b27      	ldr	r3, [pc, #156]	; (8007418 <SX1276OnDio0Irq+0x420>)
 800737a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800737e:	f083 0301 	eor.w	r3, r3, #1
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <SX1276OnDio0Irq+0x398>
                        SX1276.Settings.State = RF_IDLE;
 8007388:	4b23      	ldr	r3, [pc, #140]	; (8007418 <SX1276OnDio0Irq+0x420>)
 800738a:	2200      	movs	r2, #0
 800738c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                    TimerStop( &RxTimeoutTimer );
 8007390:	4824      	ldr	r0, [pc, #144]	; (8007424 <SX1276OnDio0Irq+0x42c>)
 8007392:	f001 f9fb 	bl	800878c <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8007396:	4b24      	ldr	r3, [pc, #144]	; (8007428 <SX1276OnDio0Irq+0x430>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d016      	beq.n	80073cc <SX1276OnDio0Irq+0x3d4>
 800739e:	4b22      	ldr	r3, [pc, #136]	; (8007428 <SX1276OnDio0Irq+0x430>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d011      	beq.n	80073cc <SX1276OnDio0Irq+0x3d4>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80073a8:	4b1f      	ldr	r3, [pc, #124]	; (8007428 <SX1276OnDio0Irq+0x430>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689c      	ldr	r4, [r3, #8]
 80073ae:	4b1a      	ldr	r3, [pc, #104]	; (8007418 <SX1276OnDio0Irq+0x420>)
 80073b0:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80073b4:	b299      	uxth	r1, r3
 80073b6:	4b18      	ldr	r3, [pc, #96]	; (8007418 <SX1276OnDio0Irq+0x420>)
 80073b8:	f9b3 20a2 	ldrsh.w	r2, [r3, #162]	; 0xa2
 80073bc:	4b16      	ldr	r3, [pc, #88]	; (8007418 <SX1276OnDio0Irq+0x420>)
 80073be:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 80073c2:	4817      	ldr	r0, [pc, #92]	; (8007420 <SX1276OnDio0Irq+0x428>)
 80073c4:	47a0      	blx	r4
                break;
 80073c6:	e001      	b.n	80073cc <SX1276OnDio0Irq+0x3d4>
                        break;
 80073c8:	bf00      	nop
 80073ca:	e020      	b.n	800740e <SX1276OnDio0Irq+0x416>
                break;
 80073cc:	bf00      	nop
            break;
 80073ce:	e01e      	b.n	800740e <SX1276OnDio0Irq+0x416>
            TimerStop( &TxTimeoutTimer );
 80073d0:	4816      	ldr	r0, [pc, #88]	; (800742c <SX1276OnDio0Irq+0x434>)
 80073d2:	f001 f9db 	bl	800878c <TimerStop>
            switch( SX1276.Settings.Modem )
 80073d6:	4b10      	ldr	r3, [pc, #64]	; (8007418 <SX1276OnDio0Irq+0x420>)
 80073d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d103      	bne.n	80073e8 <SX1276OnDio0Irq+0x3f0>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 80073e0:	2108      	movs	r1, #8
 80073e2:	2012      	movs	r0, #18
 80073e4:	f7ff fb1c 	bl	8006a20 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80073e8:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <SX1276OnDio0Irq+0x420>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80073f0:	4b0d      	ldr	r3, [pc, #52]	; (8007428 <SX1276OnDio0Irq+0x430>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d008      	beq.n	800740a <SX1276OnDio0Irq+0x412>
 80073f8:	4b0b      	ldr	r3, [pc, #44]	; (8007428 <SX1276OnDio0Irq+0x430>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <SX1276OnDio0Irq+0x412>
                    RadioEvents->TxDone( );
 8007402:	4b09      	ldr	r3, [pc, #36]	; (8007428 <SX1276OnDio0Irq+0x430>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4798      	blx	r3
                break;
 800740a:	bf00      	nop
            break;
 800740c:	bf00      	nop
    }
}
 800740e:	bf00      	nop
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	bd90      	pop	{r4, r7, pc}
 8007416:	bf00      	nop
 8007418:	2000139c 	.word	0x2000139c
 800741c:	1f4add40 	.word	0x1f4add40
 8007420:	20001054 	.word	0x20001054
 8007424:	20001444 	.word	0x20001444
 8007428:	20001050 	.word	0x20001050
 800742c:	2000136c 	.word	0x2000136c

08007430 <SX1276OnDio1Irq>:

static void SX1276OnDio1Irq( void* context )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 8007438:	4b7a      	ldr	r3, [pc, #488]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 800743a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800743e:	2b01      	cmp	r3, #1
 8007440:	d003      	beq.n	800744a <SX1276OnDio1Irq+0x1a>
 8007442:	2b02      	cmp	r3, #2
 8007444:	f000 809a 	beq.w	800757c <SX1276OnDio1Irq+0x14c>
            default:
                break;
            }
            break;
        default:
            break;
 8007448:	e0e7      	b.n	800761a <SX1276OnDio1Irq+0x1ea>
            switch( SX1276.Settings.Modem )
 800744a:	4b76      	ldr	r3, [pc, #472]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 800744c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <SX1276OnDio1Irq+0x2a>
 8007454:	2b01      	cmp	r3, #1
 8007456:	d06d      	beq.n	8007534 <SX1276OnDio1Irq+0x104>
                break;
 8007458:	e08f      	b.n	800757a <SX1276OnDio1Irq+0x14a>
                if( SX1276GetDio1PinState( ) == 0 )
 800745a:	f001 f803 	bl	8008464 <SX1276GetDio1PinState>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 8085 	beq.w	8007570 <SX1276OnDio1Irq+0x140>
                TimerStop( &RxTimeoutSyncWord );
 8007466:	4870      	ldr	r0, [pc, #448]	; (8007628 <SX1276OnDio1Irq+0x1f8>)
 8007468:	f001 f990 	bl	800878c <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800746c:	4b6d      	ldr	r3, [pc, #436]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 800746e:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8007472:	2b00      	cmp	r3, #0
 8007474:	d119      	bne.n	80074aa <SX1276OnDio1Irq+0x7a>
 8007476:	4b6b      	ldr	r3, [pc, #428]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 8007478:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d114      	bne.n	80074aa <SX1276OnDio1Irq+0x7a>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8007480:	4b68      	ldr	r3, [pc, #416]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 8007482:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007486:	f083 0301 	eor.w	r3, r3, #1
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	d004      	beq.n	800749a <SX1276OnDio1Irq+0x6a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8007490:	2101      	movs	r1, #1
 8007492:	4866      	ldr	r0, [pc, #408]	; (800762c <SX1276OnDio1Irq+0x1fc>)
 8007494:	f7ff fb5e 	bl	8006b54 <SX1276ReadFifo>
 8007498:	e007      	b.n	80074aa <SX1276OnDio1Irq+0x7a>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800749a:	2032      	movs	r0, #50	; 0x32
 800749c:	f7ff fad0 	bl	8006a40 <SX1276Read>
 80074a0:	4603      	mov	r3, r0
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	4b5f      	ldr	r3, [pc, #380]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 80074a6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80074aa:	4b5e      	ldr	r3, [pc, #376]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 80074ac:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80074b0:	461a      	mov	r2, r3
 80074b2:	4b5c      	ldr	r3, [pc, #368]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 80074b4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	4a5a      	ldr	r2, [pc, #360]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 80074bc:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 80074c0:	4293      	cmp	r3, r2
 80074c2:	db1d      	blt.n	8007500 <SX1276OnDio1Irq+0xd0>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80074c4:	4b57      	ldr	r3, [pc, #348]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 80074c6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80074ca:	461a      	mov	r2, r3
 80074cc:	4b58      	ldr	r3, [pc, #352]	; (8007630 <SX1276OnDio1Irq+0x200>)
 80074ce:	441a      	add	r2, r3
 80074d0:	4b54      	ldr	r3, [pc, #336]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 80074d2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80074d6:	3b01      	subs	r3, #1
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	4619      	mov	r1, r3
 80074dc:	4610      	mov	r0, r2
 80074de:	f7ff fb39 	bl	8006b54 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 80074e2:	4b50      	ldr	r3, [pc, #320]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 80074e4:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 80074e8:	4b4e      	ldr	r3, [pc, #312]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 80074ea:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	4413      	add	r3, r2
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	4b4a      	ldr	r3, [pc, #296]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 80074fa:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 80074fe:	e03c      	b.n	800757a <SX1276OnDio1Irq+0x14a>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8007500:	4b48      	ldr	r3, [pc, #288]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 8007502:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007506:	461a      	mov	r2, r3
 8007508:	4b49      	ldr	r3, [pc, #292]	; (8007630 <SX1276OnDio1Irq+0x200>)
 800750a:	18d0      	adds	r0, r2, r3
 800750c:	4b45      	ldr	r3, [pc, #276]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 800750e:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8007512:	b2da      	uxtb	r2, r3
 8007514:	4b43      	ldr	r3, [pc, #268]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 8007516:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800751a:	b2db      	uxtb	r3, r3
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	b2db      	uxtb	r3, r3
 8007520:	4619      	mov	r1, r3
 8007522:	f7ff fb17 	bl	8006b54 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8007526:	4b3f      	ldr	r3, [pc, #252]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 8007528:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 800752c:	4b3d      	ldr	r3, [pc, #244]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 800752e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 8007532:	e022      	b.n	800757a <SX1276OnDio1Irq+0x14a>
                if( SX1276GetDio1PinState( ) == 0 )
 8007534:	f000 ff96 	bl	8008464 <SX1276GetDio1PinState>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d01a      	beq.n	8007574 <SX1276OnDio1Irq+0x144>
                TimerStop( &RxTimeoutTimer );
 800753e:	483d      	ldr	r0, [pc, #244]	; (8007634 <SX1276OnDio1Irq+0x204>)
 8007540:	f001 f924 	bl	800878c <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8007544:	2180      	movs	r1, #128	; 0x80
 8007546:	2012      	movs	r0, #18
 8007548:	f7ff fa6a 	bl	8006a20 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800754c:	4b35      	ldr	r3, [pc, #212]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 800754e:	2200      	movs	r2, #0
 8007550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007554:	4b38      	ldr	r3, [pc, #224]	; (8007638 <SX1276OnDio1Irq+0x208>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00d      	beq.n	8007578 <SX1276OnDio1Irq+0x148>
 800755c:	4b36      	ldr	r3, [pc, #216]	; (8007638 <SX1276OnDio1Irq+0x208>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d008      	beq.n	8007578 <SX1276OnDio1Irq+0x148>
                    RadioEvents->RxTimeout( );
 8007566:	4b34      	ldr	r3, [pc, #208]	; (8007638 <SX1276OnDio1Irq+0x208>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	4798      	blx	r3
                break;
 800756e:	e003      	b.n	8007578 <SX1276OnDio1Irq+0x148>
                    break;
 8007570:	bf00      	nop
 8007572:	e052      	b.n	800761a <SX1276OnDio1Irq+0x1ea>
                    break;
 8007574:	bf00      	nop
 8007576:	e050      	b.n	800761a <SX1276OnDio1Irq+0x1ea>
                break;
 8007578:	bf00      	nop
            break;
 800757a:	e04e      	b.n	800761a <SX1276OnDio1Irq+0x1ea>
            switch( SX1276.Settings.Modem )
 800757c:	4b29      	ldr	r3, [pc, #164]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 800757e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <SX1276OnDio1Irq+0x15a>
 8007586:	2b01      	cmp	r3, #1
                break;
 8007588:	e046      	b.n	8007618 <SX1276OnDio1Irq+0x1e8>
                if( SX1276GetDio1PinState( ) == 1 )
 800758a:	f000 ff6b 	bl	8008464 <SX1276GetDio1PinState>
 800758e:	4603      	mov	r3, r0
 8007590:	2b01      	cmp	r3, #1
 8007592:	d040      	beq.n	8007616 <SX1276OnDio1Irq+0x1e6>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8007594:	4b23      	ldr	r3, [pc, #140]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 8007596:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800759a:	461a      	mov	r2, r3
 800759c:	4b21      	ldr	r3, [pc, #132]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 800759e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	4a1f      	ldr	r2, [pc, #124]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 80075a6:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 80075aa:	4293      	cmp	r3, r2
 80075ac:	dd19      	ble.n	80075e2 <SX1276OnDio1Irq+0x1b2>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80075ae:	4b1d      	ldr	r3, [pc, #116]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 80075b0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80075b4:	461a      	mov	r2, r3
 80075b6:	4b1e      	ldr	r3, [pc, #120]	; (8007630 <SX1276OnDio1Irq+0x200>)
 80075b8:	4413      	add	r3, r2
 80075ba:	4a1a      	ldr	r2, [pc, #104]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 80075bc:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 80075c0:	4611      	mov	r1, r2
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7ff fab6 	bl	8006b34 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80075c8:	4b16      	ldr	r3, [pc, #88]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 80075ca:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 80075ce:	4b15      	ldr	r3, [pc, #84]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 80075d0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	4413      	add	r3, r2
 80075d8:	b29a      	uxth	r2, r3
 80075da:	4b12      	ldr	r3, [pc, #72]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 80075dc:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 80075e0:	e01a      	b.n	8007618 <SX1276OnDio1Irq+0x1e8>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80075e2:	4b10      	ldr	r3, [pc, #64]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 80075e4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80075e8:	461a      	mov	r2, r3
 80075ea:	4b11      	ldr	r3, [pc, #68]	; (8007630 <SX1276OnDio1Irq+0x200>)
 80075ec:	18d0      	adds	r0, r2, r3
 80075ee:	4b0d      	ldr	r3, [pc, #52]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 80075f0:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	4b0b      	ldr	r3, [pc, #44]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 80075f8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	b2db      	uxtb	r3, r3
 8007602:	4619      	mov	r1, r3
 8007604:	f7ff fa96 	bl	8006b34 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8007608:	4b06      	ldr	r3, [pc, #24]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 800760a:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 800760e:	4b05      	ldr	r3, [pc, #20]	; (8007624 <SX1276OnDio1Irq+0x1f4>)
 8007610:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 8007614:	e000      	b.n	8007618 <SX1276OnDio1Irq+0x1e8>
                    break;
 8007616:	bf00      	nop
            break;
 8007618:	bf00      	nop
    }
}
 800761a:	bf00      	nop
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	2000139c 	.word	0x2000139c
 8007628:	20001384 	.word	0x20001384
 800762c:	20001416 	.word	0x20001416
 8007630:	20001054 	.word	0x20001054
 8007634:	20001444 	.word	0x20001444
 8007638:	20001050 	.word	0x20001050

0800763c <SX1276OnDio2Irq>:

static void SX1276OnDio2Irq( void* context )
{
 800763c:	b590      	push	{r4, r7, lr}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 8007644:	4b52      	ldr	r3, [pc, #328]	; (8007790 <SX1276OnDio2Irq+0x154>)
 8007646:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800764a:	2b01      	cmp	r3, #1
 800764c:	d002      	beq.n	8007654 <SX1276OnDio2Irq+0x18>
 800764e:	2b02      	cmp	r3, #2
 8007650:	d06e      	beq.n	8007730 <SX1276OnDio2Irq+0xf4>
            default:
                break;
            }
            break;
        default:
            break;
 8007652:	e099      	b.n	8007788 <SX1276OnDio2Irq+0x14c>
            switch( SX1276.Settings.Modem )
 8007654:	4b4e      	ldr	r3, [pc, #312]	; (8007790 <SX1276OnDio2Irq+0x154>)
 8007656:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <SX1276OnDio2Irq+0x28>
 800765e:	2b01      	cmp	r3, #1
 8007660:	d043      	beq.n	80076ea <SX1276OnDio2Irq+0xae>
                break;
 8007662:	e064      	b.n	800772e <SX1276OnDio2Irq+0xf2>
                if( SX1276.DIO4.port == NULL )
 8007664:	4b4a      	ldr	r3, [pc, #296]	; (8007790 <SX1276OnDio2Irq+0x154>)
 8007666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007668:	2b00      	cmp	r3, #0
 800766a:	d103      	bne.n	8007674 <SX1276OnDio2Irq+0x38>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800766c:	4b48      	ldr	r3, [pc, #288]	; (8007790 <SX1276OnDio2Irq+0x154>)
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8007674:	4b46      	ldr	r3, [pc, #280]	; (8007790 <SX1276OnDio2Irq+0x154>)
 8007676:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800767a:	2b00      	cmp	r3, #0
 800767c:	d054      	beq.n	8007728 <SX1276OnDio2Irq+0xec>
 800767e:	4b44      	ldr	r3, [pc, #272]	; (8007790 <SX1276OnDio2Irq+0x154>)
 8007680:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8007684:	2b00      	cmp	r3, #0
 8007686:	d14f      	bne.n	8007728 <SX1276OnDio2Irq+0xec>
                    TimerStop( &RxTimeoutSyncWord );
 8007688:	4842      	ldr	r0, [pc, #264]	; (8007794 <SX1276OnDio2Irq+0x158>)
 800768a:	f001 f87f 	bl	800878c <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800768e:	4b40      	ldr	r3, [pc, #256]	; (8007790 <SX1276OnDio2Irq+0x154>)
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8007696:	2011      	movs	r0, #17
 8007698:	f7ff f9d2 	bl	8006a40 <SX1276Read>
 800769c:	4603      	mov	r3, r0
 800769e:	085b      	lsrs	r3, r3, #1
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	425b      	negs	r3, r3
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	b25a      	sxtb	r2, r3
 80076a8:	4b39      	ldr	r3, [pc, #228]	; (8007790 <SX1276OnDio2Irq+0x154>)
 80076aa:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80076ae:	201b      	movs	r0, #27
 80076b0:	f7ff f9c6 	bl	8006a40 <SX1276Read>
 80076b4:	4603      	mov	r3, r0
 80076b6:	021c      	lsls	r4, r3, #8
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 80076b8:	201c      	movs	r0, #28
 80076ba:	f7ff f9c1 	bl	8006a40 <SX1276Read>
 80076be:	4603      	mov	r3, r0
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80076c0:	4323      	orrs	r3, r4
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7ff faaa 	bl	8006c1c <SX1276ConvertPllStepToFreqInHz>
 80076c8:	4603      	mov	r3, r0
 80076ca:	461a      	mov	r2, r3
 80076cc:	4b30      	ldr	r3, [pc, #192]	; (8007790 <SX1276OnDio2Irq+0x154>)
 80076ce:	675a      	str	r2, [r3, #116]	; 0x74
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 80076d0:	200c      	movs	r0, #12
 80076d2:	f7ff f9b5 	bl	8006a40 <SX1276Read>
 80076d6:	4603      	mov	r3, r0
 80076d8:	095b      	lsrs	r3, r3, #5
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	f003 0307 	and.w	r3, r3, #7
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	4b2b      	ldr	r3, [pc, #172]	; (8007790 <SX1276OnDio2Irq+0x154>)
 80076e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                break;
 80076e8:	e01e      	b.n	8007728 <SX1276OnDio2Irq+0xec>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80076ea:	4b29      	ldr	r3, [pc, #164]	; (8007790 <SX1276OnDio2Irq+0x154>)
 80076ec:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d01b      	beq.n	800772c <SX1276OnDio2Irq+0xf0>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80076f4:	2102      	movs	r1, #2
 80076f6:	2012      	movs	r0, #18
 80076f8:	f7ff f992 	bl	8006a20 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80076fc:	4b26      	ldr	r3, [pc, #152]	; (8007798 <SX1276OnDio2Irq+0x15c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d013      	beq.n	800772c <SX1276OnDio2Irq+0xf0>
 8007704:	4b24      	ldr	r3, [pc, #144]	; (8007798 <SX1276OnDio2Irq+0x15c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00e      	beq.n	800772c <SX1276OnDio2Irq+0xf0>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800770e:	4b22      	ldr	r3, [pc, #136]	; (8007798 <SX1276OnDio2Irq+0x15c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	695c      	ldr	r4, [r3, #20]
 8007714:	201c      	movs	r0, #28
 8007716:	f7ff f993 	bl	8006a40 <SX1276Read>
 800771a:	4603      	mov	r3, r0
 800771c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007720:	b2db      	uxtb	r3, r3
 8007722:	4618      	mov	r0, r3
 8007724:	47a0      	blx	r4
                break;
 8007726:	e001      	b.n	800772c <SX1276OnDio2Irq+0xf0>
                break;
 8007728:	bf00      	nop
 800772a:	e02d      	b.n	8007788 <SX1276OnDio2Irq+0x14c>
                break;
 800772c:	bf00      	nop
            break;
 800772e:	e02b      	b.n	8007788 <SX1276OnDio2Irq+0x14c>
            switch( SX1276.Settings.Modem )
 8007730:	4b17      	ldr	r3, [pc, #92]	; (8007790 <SX1276OnDio2Irq+0x154>)
 8007732:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007736:	2b00      	cmp	r3, #0
 8007738:	d020      	beq.n	800777c <SX1276OnDio2Irq+0x140>
 800773a:	2b01      	cmp	r3, #1
 800773c:	d120      	bne.n	8007780 <SX1276OnDio2Irq+0x144>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800773e:	4b14      	ldr	r3, [pc, #80]	; (8007790 <SX1276OnDio2Irq+0x154>)
 8007740:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007744:	2b00      	cmp	r3, #0
 8007746:	d01d      	beq.n	8007784 <SX1276OnDio2Irq+0x148>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8007748:	2102      	movs	r1, #2
 800774a:	2012      	movs	r0, #18
 800774c:	f7ff f968 	bl	8006a20 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8007750:	4b11      	ldr	r3, [pc, #68]	; (8007798 <SX1276OnDio2Irq+0x15c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d015      	beq.n	8007784 <SX1276OnDio2Irq+0x148>
 8007758:	4b0f      	ldr	r3, [pc, #60]	; (8007798 <SX1276OnDio2Irq+0x15c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d010      	beq.n	8007784 <SX1276OnDio2Irq+0x148>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8007762:	4b0d      	ldr	r3, [pc, #52]	; (8007798 <SX1276OnDio2Irq+0x15c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	695c      	ldr	r4, [r3, #20]
 8007768:	201c      	movs	r0, #28
 800776a:	f7ff f969 	bl	8006a40 <SX1276Read>
 800776e:	4603      	mov	r3, r0
 8007770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007774:	b2db      	uxtb	r3, r3
 8007776:	4618      	mov	r0, r3
 8007778:	47a0      	blx	r4
                break;
 800777a:	e003      	b.n	8007784 <SX1276OnDio2Irq+0x148>
                break;
 800777c:	bf00      	nop
 800777e:	e002      	b.n	8007786 <SX1276OnDio2Irq+0x14a>
                break;
 8007780:	bf00      	nop
 8007782:	e000      	b.n	8007786 <SX1276OnDio2Irq+0x14a>
                break;
 8007784:	bf00      	nop
            break;
 8007786:	bf00      	nop
    }
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	bd90      	pop	{r4, r7, pc}
 8007790:	2000139c 	.word	0x2000139c
 8007794:	20001384 	.word	0x20001384
 8007798:	20001050 	.word	0x20001050

0800779c <SX1276OnDio3Irq>:

static void SX1276OnDio3Irq( void* context )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 80077a4:	4b1e      	ldr	r3, [pc, #120]	; (8007820 <SX1276OnDio3Irq+0x84>)
 80077a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d030      	beq.n	8007810 <SX1276OnDio3Irq+0x74>
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d000      	beq.n	80077b4 <SX1276OnDio3Irq+0x18>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 80077b2:	e030      	b.n	8007816 <SX1276OnDio3Irq+0x7a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 80077b4:	2012      	movs	r0, #18
 80077b6:	f7ff f943 	bl	8006a40 <SX1276Read>
 80077ba:	4603      	mov	r3, r0
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d112      	bne.n	80077ea <SX1276OnDio3Irq+0x4e>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 80077c4:	2105      	movs	r1, #5
 80077c6:	2012      	movs	r0, #18
 80077c8:	f7ff f92a 	bl	8006a20 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80077cc:	4b15      	ldr	r3, [pc, #84]	; (8007824 <SX1276OnDio3Irq+0x88>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d01f      	beq.n	8007814 <SX1276OnDio3Irq+0x78>
 80077d4:	4b13      	ldr	r3, [pc, #76]	; (8007824 <SX1276OnDio3Irq+0x88>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d01a      	beq.n	8007814 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( true );
 80077de:	4b11      	ldr	r3, [pc, #68]	; (8007824 <SX1276OnDio3Irq+0x88>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	2001      	movs	r0, #1
 80077e6:	4798      	blx	r3
        break;
 80077e8:	e014      	b.n	8007814 <SX1276OnDio3Irq+0x78>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80077ea:	2104      	movs	r1, #4
 80077ec:	2012      	movs	r0, #18
 80077ee:	f7ff f917 	bl	8006a20 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80077f2:	4b0c      	ldr	r3, [pc, #48]	; (8007824 <SX1276OnDio3Irq+0x88>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00c      	beq.n	8007814 <SX1276OnDio3Irq+0x78>
 80077fa:	4b0a      	ldr	r3, [pc, #40]	; (8007824 <SX1276OnDio3Irq+0x88>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d007      	beq.n	8007814 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( false );
 8007804:	4b07      	ldr	r3, [pc, #28]	; (8007824 <SX1276OnDio3Irq+0x88>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	2000      	movs	r0, #0
 800780c:	4798      	blx	r3
        break;
 800780e:	e001      	b.n	8007814 <SX1276OnDio3Irq+0x78>
        break;
 8007810:	bf00      	nop
 8007812:	e000      	b.n	8007816 <SX1276OnDio3Irq+0x7a>
        break;
 8007814:	bf00      	nop
    }
}
 8007816:	bf00      	nop
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	2000139c 	.word	0x2000139c
 8007824:	20001050 	.word	0x20001050

08007828 <SX1276OnDio4Irq>:

static void SX1276OnDio4Irq( void* context )
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8007830:	4b0c      	ldr	r3, [pc, #48]	; (8007864 <SX1276OnDio4Irq+0x3c>)
 8007832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <SX1276OnDio4Irq+0x18>
 800783a:	2b01      	cmp	r3, #1
 800783c:	d00a      	beq.n	8007854 <SX1276OnDio4Irq+0x2c>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 800783e:	e00c      	b.n	800785a <SX1276OnDio4Irq+0x32>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8007840:	4b08      	ldr	r3, [pc, #32]	; (8007864 <SX1276OnDio4Irq+0x3c>)
 8007842:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007846:	2b00      	cmp	r3, #0
 8007848:	d106      	bne.n	8007858 <SX1276OnDio4Irq+0x30>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800784a:	4b06      	ldr	r3, [pc, #24]	; (8007864 <SX1276OnDio4Irq+0x3c>)
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        break;
 8007852:	e001      	b.n	8007858 <SX1276OnDio4Irq+0x30>
        break;
 8007854:	bf00      	nop
 8007856:	e000      	b.n	800785a <SX1276OnDio4Irq+0x32>
        break;
 8007858:	bf00      	nop
    }
}
 800785a:	bf00      	nop
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	bc80      	pop	{r7}
 8007862:	4770      	bx	lr
 8007864:	2000139c 	.word	0x2000139c

08007868 <BoardCriticalSectionBegin>:

uint8_t Uart2TxBuffer[UART2_FIFO_TX_SIZE];
uint8_t Uart2RxBuffer[UART2_FIFO_RX_SIZE];

void BoardCriticalSectionBegin( uint32_t *mask )
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007870:	f3ef 8310 	mrs	r3, PRIMASK
 8007874:	60fb      	str	r3, [r7, #12]
  return(result);
 8007876:	68fa      	ldr	r2, [r7, #12]
    *mask = __get_PRIMASK( );
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800787c:	b672      	cpsid	i
}
 800787e:	bf00      	nop
    __disable_irq( );
}
 8007880:	bf00      	nop
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	bc80      	pop	{r7}
 8007888:	4770      	bx	lr

0800788a <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd( uint32_t *mask )
{
 800788a:	b480      	push	{r7}
 800788c:	b085      	sub	sp, #20
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( *mask );
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f383 8810 	msr	PRIMASK, r3
}
 800789e:	bf00      	nop
}
 80078a0:	bf00      	nop
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bc80      	pop	{r7}
 80078a8:	4770      	bx	lr

080078aa <BoardInitPeriph>:

void BoardInitPeriph( void )
{
 80078aa:	b480      	push	{r7}
 80078ac:	af00      	add	r7, sp, #0

}
 80078ae:	bf00      	nop
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bc80      	pop	{r7}
 80078b4:	4770      	bx	lr
	...

080078b8 <BoardInitMcu>:

void BoardInitMcu( void )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	af00      	add	r7, sp, #0
    if( McuInitialized == false )
 80078bc:	4b06      	ldr	r3, [pc, #24]	; (80078d8 <BoardInitMcu+0x20>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	f083 0301 	eor.w	r3, r3, #1
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <BoardInitMcu+0x1a>
    {
        RtcInit( );
 80078ca:	f000 f98d 	bl	8007be8 <RtcInit>
        BoardUnusedIoInit( );
 80078ce:	f000 f805 	bl	80078dc <BoardUnusedIoInit>
//        LpmSetOffMode( LPM_APPLI_ID, LPM_DISABLE );

    }
}
 80078d2:	bf00      	nop
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	20001154 	.word	0x20001154

080078dc <BoardUnusedIoInit>:
//    // Compute and return the temperature in degree celcius * 256
//    return ( int16_t ) COMPUTE_TEMPERATURE( tempRaw, BatteryVoltage );
//}

static void BoardUnusedIoInit( void )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	af00      	add	r7, sp, #0
    HAL_DBGMCU_EnableDBGSleepMode( );
 80078e0:	f7f9 fb90 	bl	8001004 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode( );
 80078e4:	f7f9 fb9c 	bl	8001020 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode( );
 80078e8:	f7f9 fba8 	bl	800103c <HAL_DBGMCU_EnableDBGStandbyMode>
}
 80078ec:	bf00      	nop
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7f9 fb61 	bl	8000fc0 <HAL_Delay>
}
 80078fe:	bf00      	nop
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007908 <init_rf>:
extern Gpio_t Led1;
extern Gpio_t Led2;
extern UART_HandleTypeDef huart2;

void init_rf (void)
{
 8007908:	b590      	push	{r4, r7, lr}
 800790a:	b08b      	sub	sp, #44	; 0x2c
 800790c:	af0a      	add	r7, sp, #40	; 0x28
  // Target board initialization
  BoardInitMcu( );
 800790e:	f7ff ffd3 	bl	80078b8 <BoardInitMcu>
  BoardInitPeriph( );
 8007912:	f7ff ffca 	bl	80078aa <BoardInitPeriph>

  // Radio initialization
  RadioEvents.TxDone = OnTxDone;
 8007916:	4b2c      	ldr	r3, [pc, #176]	; (80079c8 <init_rf+0xc0>)
 8007918:	4a2c      	ldr	r2, [pc, #176]	; (80079cc <init_rf+0xc4>)
 800791a:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800791c:	4b2a      	ldr	r3, [pc, #168]	; (80079c8 <init_rf+0xc0>)
 800791e:	4a2c      	ldr	r2, [pc, #176]	; (80079d0 <init_rf+0xc8>)
 8007920:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8007922:	4b29      	ldr	r3, [pc, #164]	; (80079c8 <init_rf+0xc0>)
 8007924:	4a2b      	ldr	r2, [pc, #172]	; (80079d4 <init_rf+0xcc>)
 8007926:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8007928:	4b27      	ldr	r3, [pc, #156]	; (80079c8 <init_rf+0xc0>)
 800792a:	4a2b      	ldr	r2, [pc, #172]	; (80079d8 <init_rf+0xd0>)
 800792c:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800792e:	4b26      	ldr	r3, [pc, #152]	; (80079c8 <init_rf+0xc0>)
 8007930:	4a2a      	ldr	r2, [pc, #168]	; (80079dc <init_rf+0xd4>)
 8007932:	611a      	str	r2, [r3, #16]

  Radio.Init( &RadioEvents );
 8007934:	4b2a      	ldr	r3, [pc, #168]	; (80079e0 <init_rf+0xd8>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4823      	ldr	r0, [pc, #140]	; (80079c8 <init_rf+0xc0>)
 800793a:	4798      	blx	r3

  Radio.SetChannel( RF_FREQUENCY );
 800793c:	4b28      	ldr	r3, [pc, #160]	; (80079e0 <init_rf+0xd8>)
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	4828      	ldr	r0, [pc, #160]	; (80079e4 <init_rf+0xdc>)
 8007942:	4798      	blx	r3

  Radio.SetMaxPayloadLength( MODEM_LORA, BUFFER_SIZE );

#elif defined( USE_MODEM_FSK )

  Radio.SetTxConfig( MODEM_FSK, TX_OUTPUT_POWER, FSK_FDEV, 0,
 8007944:	4b26      	ldr	r3, [pc, #152]	; (80079e0 <init_rf+0xd8>)
 8007946:	69dc      	ldr	r4, [r3, #28]
 8007948:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800794c:	9308      	str	r3, [sp, #32]
 800794e:	2300      	movs	r3, #0
 8007950:	9307      	str	r3, [sp, #28]
 8007952:	2300      	movs	r3, #0
 8007954:	9306      	str	r3, [sp, #24]
 8007956:	2300      	movs	r3, #0
 8007958:	9305      	str	r3, [sp, #20]
 800795a:	2301      	movs	r3, #1
 800795c:	9304      	str	r3, [sp, #16]
 800795e:	2300      	movs	r3, #0
 8007960:	9303      	str	r3, [sp, #12]
 8007962:	2305      	movs	r3, #5
 8007964:	9302      	str	r3, [sp, #8]
 8007966:	2300      	movs	r3, #0
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	2300      	movs	r3, #0
 8007972:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8007976:	210e      	movs	r1, #14
 8007978:	2000      	movs	r0, #0
 800797a:	47a0      	blx	r4
                                FSK_DATARATE, 0,
                                FSK_PREAMBLE_LENGTH, FSK_FIX_LENGTH_PAYLOAD_ON,
                                true, 0, 0, 0, 3000 );

  Radio.SetRxConfig( MODEM_FSK, FSK_BANDWIDTH, FSK_DATARATE,
 800797c:	4b18      	ldr	r3, [pc, #96]	; (80079e0 <init_rf+0xd8>)
 800797e:	699c      	ldr	r4, [r3, #24]
 8007980:	2301      	movs	r3, #1
 8007982:	9309      	str	r3, [sp, #36]	; 0x24
 8007984:	2300      	movs	r3, #0
 8007986:	9308      	str	r3, [sp, #32]
 8007988:	2300      	movs	r3, #0
 800798a:	9307      	str	r3, [sp, #28]
 800798c:	2300      	movs	r3, #0
 800798e:	9306      	str	r3, [sp, #24]
 8007990:	2301      	movs	r3, #1
 8007992:	9305      	str	r3, [sp, #20]
 8007994:	2300      	movs	r3, #0
 8007996:	9304      	str	r3, [sp, #16]
 8007998:	2300      	movs	r3, #0
 800799a:	9303      	str	r3, [sp, #12]
 800799c:	2300      	movs	r3, #0
 800799e:	9302      	str	r3, [sp, #8]
 80079a0:	2305      	movs	r3, #5
 80079a2:	9301      	str	r3, [sp, #4]
 80079a4:	4b10      	ldr	r3, [pc, #64]	; (80079e8 <init_rf+0xe0>)
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	2300      	movs	r3, #0
 80079aa:	f24c 3250 	movw	r2, #50000	; 0xc350
 80079ae:	f24c 3150 	movw	r1, #50000	; 0xc350
 80079b2:	2000      	movs	r0, #0
 80079b4:	47a0      	blx	r4
                                0, FSK_AFC_BANDWIDTH, FSK_PREAMBLE_LENGTH,
                                0, FSK_FIX_LENGTH_PAYLOAD_ON, 0, true,
                                0, 0,false, true );

  Radio.SetMaxPayloadLength( MODEM_FSK, BUFFER_SIZE );
 80079b6:	4b0a      	ldr	r3, [pc, #40]	; (80079e0 <init_rf+0xd8>)
 80079b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ba:	2140      	movs	r1, #64	; 0x40
 80079bc:	2000      	movs	r0, #0
 80079be:	4798      	blx	r3
#endif

}
 80079c0:	bf00      	nop
 80079c2:	3704      	adds	r7, #4
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd90      	pop	{r4, r7, pc}
 80079c8:	200011ec 	.word	0x200011ec
 80079cc:	080079ed 	.word	0x080079ed
 80079d0:	08007a09 	.word	0x08007a09
 80079d4:	08007ad1 	.word	0x08007ad1
 80079d8:	08007aed 	.word	0x08007aed
 80079dc:	08007b09 	.word	0x08007b09
 80079e0:	08009e7c 	.word	0x08009e7c
 80079e4:	1ad02a90 	.word	0x1ad02a90
 80079e8:	00014585 	.word	0x00014585

080079ec <OnTxDone>:

     }
}

void OnTxDone( void )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 80079f0:	4b03      	ldr	r3, [pc, #12]	; (8007a00 <OnTxDone+0x14>)
 80079f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f4:	4798      	blx	r3
    State = TX;
 80079f6:	4b03      	ldr	r3, [pc, #12]	; (8007a04 <OnTxDone+0x18>)
 80079f8:	2204      	movs	r2, #4
 80079fa:	701a      	strb	r2, [r3, #0]
}
 80079fc:	bf00      	nop
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	08009e7c 	.word	0x08009e7c
 8007a04:	200011e8 	.word	0x200011e8

08007a08 <OnRxDone>:

void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	4608      	mov	r0, r1
 8007a12:	4611      	mov	r1, r2
 8007a14:	461a      	mov	r2, r3
 8007a16:	4603      	mov	r3, r0
 8007a18:	817b      	strh	r3, [r7, #10]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	813b      	strh	r3, [r7, #8]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(LED_EXT_GPIO_Port, LED_EXT_Pin);
 8007a22:	2108      	movs	r1, #8
 8007a24:	481e      	ldr	r0, [pc, #120]	; (8007aa0 <OnRxDone+0x98>)
 8007a26:	f7f9 fdf6 	bl	8001616 <HAL_GPIO_TogglePin>
	Radio.Sleep( );
 8007a2a:	4b1e      	ldr	r3, [pc, #120]	; (8007aa4 <OnRxDone+0x9c>)
 8007a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2e:	4798      	blx	r3
    BufferSize = size;
 8007a30:	4a1d      	ldr	r2, [pc, #116]	; (8007aa8 <OnRxDone+0xa0>)
 8007a32:	897b      	ldrh	r3, [r7, #10]
 8007a34:	8013      	strh	r3, [r2, #0]
    memcpy( Buffer, payload, BufferSize );
 8007a36:	4b1c      	ldr	r3, [pc, #112]	; (8007aa8 <OnRxDone+0xa0>)
 8007a38:	881b      	ldrh	r3, [r3, #0]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	68f9      	ldr	r1, [r7, #12]
 8007a3e:	481b      	ldr	r0, [pc, #108]	; (8007aac <OnRxDone+0xa4>)
 8007a40:	f000 ffee 	bl	8008a20 <memcpy>
    RssiValue = rssi;
 8007a44:	893b      	ldrh	r3, [r7, #8]
 8007a46:	b25a      	sxtb	r2, r3
 8007a48:	4b19      	ldr	r3, [pc, #100]	; (8007ab0 <OnRxDone+0xa8>)
 8007a4a:	701a      	strb	r2, [r3, #0]
    SnrValue = snr;
 8007a4c:	4a19      	ldr	r2, [pc, #100]	; (8007ab4 <OnRxDone+0xac>)
 8007a4e:	79fb      	ldrb	r3, [r7, #7]
 8007a50:	7013      	strb	r3, [r2, #0]
    State = RX;
 8007a52:	4b19      	ldr	r3, [pc, #100]	; (8007ab8 <OnRxDone+0xb0>)
 8007a54:	2201      	movs	r2, #1
 8007a56:	701a      	strb	r2, [r3, #0]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	461a      	mov	r2, r3
#ifdef UART_TEST
    memcpy( data_UART, payload, sizeof(data_UART)/sizeof(uint8_t) );
 8007a5e:	4b17      	ldr	r3, [pc, #92]	; (8007abc <OnRxDone+0xb4>)
 8007a60:	601a      	str	r2, [r3, #0]
    if ( xQueueSendToBackFromISR( xQueueUartData,  &data_UART, pdFALSE ) != pdPASS) {
 8007a62:	4b17      	ldr	r3, [pc, #92]	; (8007ac0 <OnRxDone+0xb8>)
 8007a64:	6818      	ldr	r0, [r3, #0]
 8007a66:	2300      	movs	r3, #0
 8007a68:	2200      	movs	r2, #0
 8007a6a:	4914      	ldr	r1, [pc, #80]	; (8007abc <OnRxDone+0xb4>)
 8007a6c:	f7fc fafb 	bl	8004066 <xQueueGenericSendFromISR>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d002      	beq.n	8007a7c <OnRxDone+0x74>
    	printf("Failed to post the message");
 8007a76:	4813      	ldr	r0, [pc, #76]	; (8007ac4 <OnRxDone+0xbc>)
 8007a78:	f000 ffe8 	bl	8008a4c <iprintf>
    }
//    Error += prevSend - *( uint32_t* )data_UART - 1;
//    prevSend = *( uint32_t* )data_UART;
    count++;
 8007a7c:	4b12      	ldr	r3, [pc, #72]	; (8007ac8 <OnRxDone+0xc0>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3301      	adds	r3, #1
 8007a82:	4a11      	ldr	r2, [pc, #68]	; (8007ac8 <OnRxDone+0xc0>)
 8007a84:	6013      	str	r3, [r2, #0]
    if( count == 999999 ) count = 0;
 8007a86:	4b10      	ldr	r3, [pc, #64]	; (8007ac8 <OnRxDone+0xc0>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a10      	ldr	r2, [pc, #64]	; (8007acc <OnRxDone+0xc4>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d102      	bne.n	8007a96 <OnRxDone+0x8e>
 8007a90:	4b0d      	ldr	r3, [pc, #52]	; (8007ac8 <OnRxDone+0xc0>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]
#endif
}
 8007a96:	bf00      	nop
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	40020800 	.word	0x40020800
 8007aa4:	08009e7c 	.word	0x08009e7c
 8007aa8:	20000028 	.word	0x20000028
 8007aac:	2000145c 	.word	0x2000145c
 8007ab0:	200011e9 	.word	0x200011e9
 8007ab4:	200011ea 	.word	0x200011ea
 8007ab8:	200011e8 	.word	0x200011e8
 8007abc:	20001158 	.word	0x20001158
 8007ac0:	2000126c 	.word	0x2000126c
 8007ac4:	08009d30 	.word	0x08009d30
 8007ac8:	20001164 	.word	0x20001164
 8007acc:	000f423f 	.word	0x000f423f

08007ad0 <OnTxTimeout>:

void OnTxTimeout( void )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8007ad4:	4b03      	ldr	r3, [pc, #12]	; (8007ae4 <OnTxTimeout+0x14>)
 8007ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad8:	4798      	blx	r3
    State = TX_TIMEOUT;
 8007ada:	4b03      	ldr	r3, [pc, #12]	; (8007ae8 <OnTxTimeout+0x18>)
 8007adc:	2205      	movs	r2, #5
 8007ade:	701a      	strb	r2, [r3, #0]
}
 8007ae0:	bf00      	nop
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	08009e7c 	.word	0x08009e7c
 8007ae8:	200011e8 	.word	0x200011e8

08007aec <OnRxTimeout>:

void OnRxTimeout( void )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8007af0:	4b03      	ldr	r3, [pc, #12]	; (8007b00 <OnRxTimeout+0x14>)
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	4798      	blx	r3
    State = RX_TIMEOUT;
 8007af6:	4b03      	ldr	r3, [pc, #12]	; (8007b04 <OnRxTimeout+0x18>)
 8007af8:	2202      	movs	r2, #2
 8007afa:	701a      	strb	r2, [r3, #0]
}
 8007afc:	bf00      	nop
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	08009e7c 	.word	0x08009e7c
 8007b04:	200011e8 	.word	0x200011e8

08007b08 <OnRxError>:

void OnRxError( void )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
	char *str_to_tx =  "RX failed\n\r";
 8007b0e:	4b0b      	ldr	r3, [pc, #44]	; (8007b3c <OnRxError+0x34>)
 8007b10:	607b      	str	r3, [r7, #4]
    Radio.Sleep( );
 8007b12:	4b0b      	ldr	r3, [pc, #44]	; (8007b40 <OnRxError+0x38>)
 8007b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b16:	4798      	blx	r3
    State = RX_ERROR;
 8007b18:	4b0a      	ldr	r3, [pc, #40]	; (8007b44 <OnRxError+0x3c>)
 8007b1a:	2203      	movs	r2, #3
 8007b1c:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)str_to_tx, strlen(str_to_tx), 10);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7f8 fb2e 	bl	8000180 <strlen>
 8007b24:	4603      	mov	r3, r0
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	230a      	movs	r3, #10
 8007b2a:	6879      	ldr	r1, [r7, #4]
 8007b2c:	4806      	ldr	r0, [pc, #24]	; (8007b48 <OnRxError+0x40>)
 8007b2e:	f7fb fca6 	bl	800347e <HAL_UART_Transmit>
}
 8007b32:	bf00      	nop
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	08009d4c 	.word	0x08009d4c
 8007b40:	08009e7c 	.word	0x08009e7c
 8007b44:	200011e8 	.word	0x200011e8
 8007b48:	20001328 	.word	0x20001328

08007b4c <UART_Tx>:

void UART_Tx( void ) {
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
	xQueueReceiveFromISR( xQueueUartData, &data_Tx, pdFALSE );
 8007b50:	4b11      	ldr	r3, [pc, #68]	; (8007b98 <UART_Tx+0x4c>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2200      	movs	r2, #0
 8007b56:	4911      	ldr	r1, [pc, #68]	; (8007b9c <UART_Tx+0x50>)
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fc fb1c 	bl	8004196 <xQueueReceiveFromISR>
	full_data_UART = *(uint32_t*)data_Tx;
 8007b5e:	4b0f      	ldr	r3, [pc, #60]	; (8007b9c <UART_Tx+0x50>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a0f      	ldr	r2, [pc, #60]	; (8007ba0 <UART_Tx+0x54>)
 8007b64:	6013      	str	r3, [r2, #0]
	sprintf(str_to_send, "%d\n\r", (int)full_data_UART);
 8007b66:	4b0e      	ldr	r3, [pc, #56]	; (8007ba0 <UART_Tx+0x54>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	490d      	ldr	r1, [pc, #52]	; (8007ba4 <UART_Tx+0x58>)
 8007b6e:	480e      	ldr	r0, [pc, #56]	; (8007ba8 <UART_Tx+0x5c>)
 8007b70:	f000 ff84 	bl	8008a7c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str_to_send, strlen(str_to_send), 10);
 8007b74:	480c      	ldr	r0, [pc, #48]	; (8007ba8 <UART_Tx+0x5c>)
 8007b76:	f7f8 fb03 	bl	8000180 <strlen>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	230a      	movs	r3, #10
 8007b80:	4909      	ldr	r1, [pc, #36]	; (8007ba8 <UART_Tx+0x5c>)
 8007b82:	480a      	ldr	r0, [pc, #40]	; (8007bac <UART_Tx+0x60>)
 8007b84:	f7fb fc7b 	bl	800347e <HAL_UART_Transmit>
	xQueueReset( xQueueUartData );
 8007b88:	4b03      	ldr	r3, [pc, #12]	; (8007b98 <UART_Tx+0x4c>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fc f9a4 	bl	8003edc <xQueueGenericReset>
}
 8007b94:	bf00      	nop
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	2000126c 	.word	0x2000126c
 8007b9c:	2000115c 	.word	0x2000115c
 8007ba0:	20001160 	.word	0x20001160
 8007ba4:	08009d58 	.word	0x08009d58
 8007ba8:	20001168 	.word	0x20001168
 8007bac:	20001328 	.word	0x20001328

08007bb0 <Radio_Rx>:


// Перед вызовом этой функции надо сначала вызвать Radio.Rx( RX_TIMEOUT_VALUE ) ВНЕ БЕСКОНЕЧНОГО ЦИКЛА!!!
// Сама функция Radio_Rx должна крутиться в бесконечном цикле
void Radio_Rx( void ) {
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	af00      	add	r7, sp, #0
		  switch (State) {
 8007bb4:	4b0a      	ldr	r3, [pc, #40]	; (8007be0 <Radio_Rx+0x30>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00d      	beq.n	8007bd8 <Radio_Rx+0x28>
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	db0c      	blt.n	8007bda <Radio_Rx+0x2a>
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	2b04      	cmp	r3, #4
 8007bc4:	d809      	bhi.n	8007bda <Radio_Rx+0x2a>
		  case RX:
		  case RX_ERROR:
		  case RX_TIMEOUT:
		  case TX_TIMEOUT:
		  case TX:
			  Radio.Rx( RX_TIMEOUT_VALUE );
 8007bc6:	4b07      	ldr	r3, [pc, #28]	; (8007be4 <Radio_Rx+0x34>)
 8007bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007bce:	4798      	blx	r3
			  State = LOWPOWER;
 8007bd0:	4b03      	ldr	r3, [pc, #12]	; (8007be0 <Radio_Rx+0x30>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	701a      	strb	r2, [r3, #0]
			  break;
 8007bd6:	e000      	b.n	8007bda <Radio_Rx+0x2a>
		  case LOWPOWER:
			  break;
 8007bd8:	bf00      	nop
	  }
}
 8007bda:	bf00      	nop
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	200011e8 	.word	0x200011e8
 8007be4:	08009e7c 	.word	0x08009e7c

08007be8 <RtcInit>:
 * \retval calendarValue Time in ticks
 */
static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time );

void RtcInit( void )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
    RTC_DateTypeDef date;
    RTC_TimeTypeDef time;

    if( RtcInitialized == false )
 8007bee:	4b2f      	ldr	r3, [pc, #188]	; (8007cac <RtcInit+0xc4>)
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	f083 0301 	eor.w	r3, r3, #1
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d053      	beq.n	8007ca4 <RtcInit+0xbc>
    {
        __HAL_RCC_RTC_ENABLE( );
 8007bfc:	4b2c      	ldr	r3, [pc, #176]	; (8007cb0 <RtcInit+0xc8>)
 8007bfe:	2201      	movs	r2, #1
 8007c00:	601a      	str	r2, [r3, #0]

        RtcHandle.Instance            = RTC;
 8007c02:	4b2c      	ldr	r3, [pc, #176]	; (8007cb4 <RtcInit+0xcc>)
 8007c04:	4a2c      	ldr	r2, [pc, #176]	; (8007cb8 <RtcInit+0xd0>)
 8007c06:	601a      	str	r2, [r3, #0]
        RtcHandle.Init.HourFormat     = RTC_HOURFORMAT_24;
 8007c08:	4b2a      	ldr	r3, [pc, #168]	; (8007cb4 <RtcInit+0xcc>)
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	605a      	str	r2, [r3, #4]
        RtcHandle.Init.AsynchPrediv   = PREDIV_A;  // RTC_ASYNCH_PREDIV;
 8007c0e:	4b29      	ldr	r3, [pc, #164]	; (8007cb4 <RtcInit+0xcc>)
 8007c10:	221f      	movs	r2, #31
 8007c12:	609a      	str	r2, [r3, #8]
        RtcHandle.Init.SynchPrediv    = PREDIV_S;  // RTC_SYNCH_PREDIV;
 8007c14:	4b27      	ldr	r3, [pc, #156]	; (8007cb4 <RtcInit+0xcc>)
 8007c16:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007c1a:	60da      	str	r2, [r3, #12]
        RtcHandle.Init.OutPut         = RTC_OUTPUT_DISABLE;
 8007c1c:	4b25      	ldr	r3, [pc, #148]	; (8007cb4 <RtcInit+0xcc>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	611a      	str	r2, [r3, #16]
        RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007c22:	4b24      	ldr	r3, [pc, #144]	; (8007cb4 <RtcInit+0xcc>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	615a      	str	r2, [r3, #20]
        RtcHandle.Init.OutPutType     = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007c28:	4b22      	ldr	r3, [pc, #136]	; (8007cb4 <RtcInit+0xcc>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	619a      	str	r2, [r3, #24]
        HAL_RTC_Init( &RtcHandle );
 8007c2e:	4821      	ldr	r0, [pc, #132]	; (8007cb4 <RtcInit+0xcc>)
 8007c30:	f7fa fbf8 	bl	8002424 <HAL_RTC_Init>

        date.Year                     = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	75fb      	strb	r3, [r7, #23]
        date.Month                    = RTC_MONTH_JANUARY;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	757b      	strb	r3, [r7, #21]
        date.Date                     = 1;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	75bb      	strb	r3, [r7, #22]
        date.WeekDay                  = RTC_WEEKDAY_MONDAY;
 8007c40:	2301      	movs	r3, #1
 8007c42:	753b      	strb	r3, [r7, #20]
        HAL_RTC_SetDate( &RtcHandle, &date, RTC_FORMAT_BIN );
 8007c44:	f107 0314 	add.w	r3, r7, #20
 8007c48:	2200      	movs	r2, #0
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	4819      	ldr	r0, [pc, #100]	; (8007cb4 <RtcInit+0xcc>)
 8007c4e:	f7fa fd75 	bl	800273c <HAL_RTC_SetDate>

        /*at 0:0:0*/
        time.Hours                    = 0;
 8007c52:	2300      	movs	r3, #0
 8007c54:	703b      	strb	r3, [r7, #0]
        time.Minutes                  = 0;
 8007c56:	2300      	movs	r3, #0
 8007c58:	707b      	strb	r3, [r7, #1]
        time.Seconds                  = 0;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	70bb      	strb	r3, [r7, #2]
        time.SubSeconds               = 0;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	607b      	str	r3, [r7, #4]
        time.TimeFormat               = 0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	70fb      	strb	r3, [r7, #3]
        time.StoreOperation           = RTC_STOREOPERATION_RESET;
 8007c66:	2300      	movs	r3, #0
 8007c68:	613b      	str	r3, [r7, #16]
        time.DayLightSaving           = RTC_DAYLIGHTSAVING_NONE;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	60fb      	str	r3, [r7, #12]
        HAL_RTC_SetTime( &RtcHandle, &time, RTC_FORMAT_BIN );
 8007c6e:	463b      	mov	r3, r7
 8007c70:	2200      	movs	r2, #0
 8007c72:	4619      	mov	r1, r3
 8007c74:	480f      	ldr	r0, [pc, #60]	; (8007cb4 <RtcInit+0xcc>)
 8007c76:	f7fa fc50 	bl	800251a <HAL_RTC_SetTime>

        // Enable Direct Read of the calendar registers (not through Shadow registers)
        HAL_RTCEx_EnableBypassShadow( &RtcHandle );
 8007c7a:	480e      	ldr	r0, [pc, #56]	; (8007cb4 <RtcInit+0xcc>)
 8007c7c:	f7fb f8e5 	bl	8002e4a <HAL_RTCEx_EnableBypassShadow>

        HAL_NVIC_SetPriority( RTC_Alarm_IRQn, 1, 0 );
 8007c80:	2200      	movs	r2, #0
 8007c82:	2101      	movs	r1, #1
 8007c84:	2029      	movs	r0, #41	; 0x29
 8007c86:	f7f9 fa9c 	bl	80011c2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( RTC_Alarm_IRQn );
 8007c8a:	2029      	movs	r0, #41	; 0x29
 8007c8c:	f7f9 fab5 	bl	80011fa <HAL_NVIC_EnableIRQ>

        // Init alarm.
        HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 8007c90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c94:	4807      	ldr	r0, [pc, #28]	; (8007cb4 <RtcInit+0xcc>)
 8007c96:	f7fa ff75 	bl	8002b84 <HAL_RTC_DeactivateAlarm>

        RtcSetTimerContext( );
 8007c9a:	f000 f80f 	bl	8007cbc <RtcSetTimerContext>
        RtcInitialized = true;
 8007c9e:	4b03      	ldr	r3, [pc, #12]	; (8007cac <RtcInit+0xc4>)
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	701a      	strb	r2, [r3, #0]
    }
}
 8007ca4:	bf00      	nop
 8007ca6:	3718      	adds	r7, #24
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	20001210 	.word	0x20001210
 8007cb0:	424706d8 	.word	0x424706d8
 8007cb4:	20001214 	.word	0x20001214
 8007cb8:	40002800 	.word	0x40002800

08007cbc <RtcSetTimerContext>:
 *
 * \param none
 * \retval timerValue In ticks
 */
uint32_t RtcSetTimerContext( void )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
    RtcTimerContext.Time = ( uint32_t )RtcGetCalendarValue( &RtcTimerContext.CalendarDate, &RtcTimerContext.CalendarTime );
 8007cc0:	4905      	ldr	r1, [pc, #20]	; (8007cd8 <RtcSetTimerContext+0x1c>)
 8007cc2:	4806      	ldr	r0, [pc, #24]	; (8007cdc <RtcSetTimerContext+0x20>)
 8007cc4:	f000 f9a4 	bl	8008010 <RtcGetCalendarValue>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4b04      	ldr	r3, [pc, #16]	; (8007ce0 <RtcSetTimerContext+0x24>)
 8007cce:	601a      	str	r2, [r3, #0]
    return ( uint32_t )RtcTimerContext.Time;
 8007cd0:	4b03      	ldr	r3, [pc, #12]	; (8007ce0 <RtcSetTimerContext+0x24>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	20001238 	.word	0x20001238
 8007cdc:	2000124c 	.word	0x2000124c
 8007ce0:	20001234 	.word	0x20001234

08007ce4 <RtcGetTimerContext>:
 *
 * \param none
 * \retval timerValue In ticks
 */
uint32_t RtcGetTimerContext( void )
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0
    return RtcTimerContext.Time;
 8007ce8:	4b02      	ldr	r3, [pc, #8]	; (8007cf4 <RtcGetTimerContext+0x10>)
 8007cea:	681b      	ldr	r3, [r3, #0]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bc80      	pop	{r7}
 8007cf2:	4770      	bx	lr
 8007cf4:	20001234 	.word	0x20001234

08007cf8 <RtcGetMinimumTimeout>:
 * \brief returns the wake up time in ticks
 *
 * \retval wake up time in ticks
 */
uint32_t RtcGetMinimumTimeout( void )
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	af00      	add	r7, sp, #0
    return( MIN_ALARM_DELAY );
 8007cfc:	2303      	movs	r3, #3
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bc80      	pop	{r7}
 8007d04:	4770      	bx	lr

08007d06 <RtcMs2Tick>:
 *
 * \param[IN] milliseconds Time in milliseconds
 * \retval returns time in timer ticks
 */
uint32_t RtcMs2Tick( uint32_t milliseconds )
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( ( ( ( uint64_t )milliseconds ) * CONV_DENOM ) / CONV_NUMER );
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	461a      	mov	r2, r3
 8007d12:	f04f 0300 	mov.w	r3, #0
 8007d16:	f04f 0000 	mov.w	r0, #0
 8007d1a:	f04f 0100 	mov.w	r1, #0
 8007d1e:	01d9      	lsls	r1, r3, #7
 8007d20:	ea41 6152 	orr.w	r1, r1, r2, lsr #25
 8007d24:	01d0      	lsls	r0, r2, #7
 8007d26:	f04f 027d 	mov.w	r2, #125	; 0x7d
 8007d2a:	f04f 0300 	mov.w	r3, #0
 8007d2e:	f7f8 fa2f 	bl	8000190 <__aeabi_uldivmod>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4613      	mov	r3, r2
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <RtcTick2Ms>:
 *
 * \param[IN] time in timer ticks
 * \retval returns time in milliseconds
 */
uint32_t RtcTick2Ms( uint32_t tick )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
    uint32_t seconds = tick >> N_PREDIV_S;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	0a9b      	lsrs	r3, r3, #10
 8007d4c:	60fb      	str	r3, [r7, #12]

    tick = tick & PREDIV_S;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d54:	607b      	str	r3, [r7, #4]
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d5c:	fb02 f203 	mul.w	r2, r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d66:	fb01 f303 	mul.w	r3, r1, r3
 8007d6a:	0a9b      	lsrs	r3, r3, #10
 8007d6c:	4413      	add	r3, r2
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bc80      	pop	{r7}
 8007d76:	4770      	bx	lr

08007d78 <RtcSetAlarm>:
 * \note The alarm is set at now (read in this function) + timeout
 *
 * \param timeout Duration of the Timer ticks
 */
void RtcSetAlarm( uint32_t timeout )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
    // We don't go in Low Power mode for timeout below MIN_ALARM_DELAY
    if( ( int64_t )MIN_ALARM_DELAY < ( int64_t )( timeout - RtcGetTimerElapsedTime( ) ) )
 8007d80:	f000 f92e 	bl	8007fe0 <RtcGetTimerElapsedTime>
    else
    {
//        LpmSetStopMode( LPM_RTC_ID, LPM_DISABLE );
    }

    RtcStartAlarm( timeout );
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f81f 	bl	8007dc8 <RtcStartAlarm>
}
 8007d8a:	bf00      	nop
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
	...

08007d94 <RtcStopAlarm>:

void RtcStopAlarm( void )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	af00      	add	r7, sp, #0
    // Disable the Alarm A interrupt
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 8007d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d9c:	4808      	ldr	r0, [pc, #32]	; (8007dc0 <RtcStopAlarm+0x2c>)
 8007d9e:	f7fa fef1 	bl	8002b84 <HAL_RTC_DeactivateAlarm>

    // Clear RTC Alarm Flag
    __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF );
 8007da2:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <RtcStopAlarm+0x2c>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <RtcStopAlarm+0x2c>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007db2:	60da      	str	r2, [r3, #12]

    // Clear the EXTI's line Flag for RTC Alarm
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
 8007db4:	4b03      	ldr	r3, [pc, #12]	; (8007dc4 <RtcStopAlarm+0x30>)
 8007db6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007dba:	615a      	str	r2, [r3, #20]
}
 8007dbc:	bf00      	nop
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	20001214 	.word	0x20001214
 8007dc4:	40010400 	.word	0x40010400

08007dc8 <RtcStartAlarm>:

void RtcStartAlarm( uint32_t timeout )
{
 8007dc8:	b5b0      	push	{r4, r5, r7, lr}
 8007dca:	b08c      	sub	sp, #48	; 0x30
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
    uint16_t rtcAlarmSubSeconds = 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t rtcAlarmSeconds = 0;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t rtcAlarmMinutes = 0;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t rtcAlarmHours = 0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	853b      	strh	r3, [r7, #40]	; 0x28
    uint16_t rtcAlarmDays = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	84fb      	strh	r3, [r7, #38]	; 0x26
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 8007de4:	4b6e      	ldr	r3, [pc, #440]	; (8007fa0 <RtcStartAlarm+0x1d8>)
 8007de6:	f107 0410 	add.w	r4, r7, #16
 8007dea:	1d1d      	adds	r5, r3, #4
 8007dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	6023      	str	r3, [r4, #0]
    RTC_DateTypeDef date = RtcTimerContext.CalendarDate;
 8007df4:	4b6a      	ldr	r3, [pc, #424]	; (8007fa0 <RtcStartAlarm+0x1d8>)
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	60fb      	str	r3, [r7, #12]

    RtcStopAlarm( );
 8007dfa:	f7ff ffcb 	bl	8007d94 <RtcStopAlarm>

    /*reverse counter */
    rtcAlarmSubSeconds =  PREDIV_S - time.SubSeconds;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8007e06:	3303      	adds	r3, #3
 8007e08:	85fb      	strh	r3, [r7, #46]	; 0x2e
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007e16:	4413      	add	r3, r2
 8007e18:	85fb      	strh	r3, [r7, #46]	; 0x2e
    // convert timeout  to seconds
    timeout >>= N_PREDIV_S;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	0a9b      	lsrs	r3, r3, #10
 8007e1e:	607b      	str	r3, [r7, #4]

    // Convert microsecs to RTC format and add to 'Now'
    rtcAlarmDays =  date.Date;
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
 8007e22:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( timeout >= TM_SECONDS_IN_1DAY )
 8007e24:	e008      	b.n	8007e38 <RtcStartAlarm+0x70>
    {
        timeout -= TM_SECONDS_IN_1DAY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8007e2c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007e30:	607b      	str	r3, [r7, #4]
        rtcAlarmDays++;
 8007e32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e34:	3301      	adds	r3, #1
 8007e36:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( timeout >= TM_SECONDS_IN_1DAY )
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a5a      	ldr	r2, [pc, #360]	; (8007fa4 <RtcStartAlarm+0x1dc>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d8f2      	bhi.n	8007e26 <RtcStartAlarm+0x5e>
    }

    // Calc hours
    rtcAlarmHours = time.Hours;
 8007e40:	7c3b      	ldrb	r3, [r7, #16]
 8007e42:	853b      	strh	r3, [r7, #40]	; 0x28
    while( timeout >= TM_SECONDS_IN_1HOUR )
 8007e44:	e006      	b.n	8007e54 <RtcStartAlarm+0x8c>
    {
        timeout -= TM_SECONDS_IN_1HOUR;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8007e4c:	607b      	str	r3, [r7, #4]
        rtcAlarmHours++;
 8007e4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e50:	3301      	adds	r3, #1
 8007e52:	853b      	strh	r3, [r7, #40]	; 0x28
    while( timeout >= TM_SECONDS_IN_1HOUR )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8007e5a:	d2f4      	bcs.n	8007e46 <RtcStartAlarm+0x7e>
    }

    // Calc minutes
    rtcAlarmMinutes = time.Minutes;
 8007e5c:	7c7b      	ldrb	r3, [r7, #17]
 8007e5e:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 8007e60:	e005      	b.n	8007e6e <RtcStartAlarm+0xa6>
    {
        timeout -= TM_SECONDS_IN_1MINUTE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	3b3c      	subs	r3, #60	; 0x3c
 8007e66:	607b      	str	r3, [r7, #4]
        rtcAlarmMinutes++;
 8007e68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b3b      	cmp	r3, #59	; 0x3b
 8007e72:	d8f6      	bhi.n	8007e62 <RtcStartAlarm+0x9a>
    }

    // Calc seconds
    rtcAlarmSeconds =  time.Seconds + timeout;
 8007e74:	7cbb      	ldrb	r3, [r7, #18]
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	4413      	add	r3, r2
 8007e7e:	85bb      	strh	r3, [r7, #44]	; 0x2c

    //***** Correct for modulo********
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 8007e80:	e006      	b.n	8007e90 <RtcStartAlarm+0xc8>
    {
        rtcAlarmSubSeconds -= ( PREDIV_S + 1 );
 8007e82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007e84:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007e88:	85fb      	strh	r3, [r7, #46]	; 0x2e
        rtcAlarmSeconds++;
 8007e8a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 8007e90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e96:	d2f4      	bcs.n	8007e82 <RtcStartAlarm+0xba>
    }

    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 8007e98:	e005      	b.n	8007ea6 <RtcStartAlarm+0xde>
    { 
        rtcAlarmSeconds -= TM_SECONDS_IN_1MINUTE;
 8007e9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007e9c:	3b3c      	subs	r3, #60	; 0x3c
 8007e9e:	85bb      	strh	r3, [r7, #44]	; 0x2c
        rtcAlarmMinutes++;
 8007ea0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 8007ea6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007ea8:	2b3b      	cmp	r3, #59	; 0x3b
 8007eaa:	d8f6      	bhi.n	8007e9a <RtcStartAlarm+0xd2>
    }

    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 8007eac:	e005      	b.n	8007eba <RtcStartAlarm+0xf2>
    {
        rtcAlarmMinutes -= TM_MINUTES_IN_1HOUR;
 8007eae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007eb0:	3b3c      	subs	r3, #60	; 0x3c
 8007eb2:	857b      	strh	r3, [r7, #42]	; 0x2a
        rtcAlarmHours++;
 8007eb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	853b      	strh	r3, [r7, #40]	; 0x28
    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 8007eba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007ebc:	2b3b      	cmp	r3, #59	; 0x3b
 8007ebe:	d8f6      	bhi.n	8007eae <RtcStartAlarm+0xe6>
    }

    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 8007ec0:	e005      	b.n	8007ece <RtcStartAlarm+0x106>
    {
        rtcAlarmHours -= TM_HOURS_IN_1DAY;
 8007ec2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ec4:	3b18      	subs	r3, #24
 8007ec6:	853b      	strh	r3, [r7, #40]	; 0x28
        rtcAlarmDays++;
 8007ec8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007eca:	3301      	adds	r3, #1
 8007ecc:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 8007ece:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ed0:	2b17      	cmp	r3, #23
 8007ed2:	d8f6      	bhi.n	8007ec2 <RtcStartAlarm+0xfa>
    }

    if( date.Year % 4 == 0 ) 
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
 8007ed6:	f003 0303 	and.w	r3, r3, #3
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d113      	bne.n	8007f08 <RtcStartAlarm+0x140>
    {
        if( rtcAlarmDays > DaysInMonthLeapYear[date.Month - 1] )
 8007ee0:	7b7b      	ldrb	r3, [r7, #13]
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	4a30      	ldr	r2, [pc, #192]	; (8007fa8 <RtcStartAlarm+0x1e0>)
 8007ee6:	5cd3      	ldrb	r3, [r2, r3]
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d91e      	bls.n	8007f2e <RtcStartAlarm+0x166>
        {
            rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[date.Month - 1];
 8007ef0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ef2:	7b7a      	ldrb	r2, [r7, #13]
 8007ef4:	3a01      	subs	r2, #1
 8007ef6:	492c      	ldr	r1, [pc, #176]	; (8007fa8 <RtcStartAlarm+0x1e0>)
 8007ef8:	5c8a      	ldrb	r2, [r1, r2]
 8007efa:	fb93 f1f2 	sdiv	r1, r3, r2
 8007efe:	fb02 f201 	mul.w	r2, r2, r1
 8007f02:	1a9b      	subs	r3, r3, r2
 8007f04:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007f06:	e012      	b.n	8007f2e <RtcStartAlarm+0x166>
        }
    }
    else
    {
        if( rtcAlarmDays > DaysInMonth[date.Month - 1] )
 8007f08:	7b7b      	ldrb	r3, [r7, #13]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	4a27      	ldr	r2, [pc, #156]	; (8007fac <RtcStartAlarm+0x1e4>)
 8007f0e:	5cd3      	ldrb	r3, [r2, r3]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d90a      	bls.n	8007f2e <RtcStartAlarm+0x166>
        {   
            rtcAlarmDays = rtcAlarmDays % DaysInMonth[date.Month - 1];
 8007f18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f1a:	7b7a      	ldrb	r2, [r7, #13]
 8007f1c:	3a01      	subs	r2, #1
 8007f1e:	4923      	ldr	r1, [pc, #140]	; (8007fac <RtcStartAlarm+0x1e4>)
 8007f20:	5c8a      	ldrb	r2, [r1, r2]
 8007f22:	fb93 f1f2 	sdiv	r1, r3, r2
 8007f26:	fb02 f201 	mul.w	r2, r2, r1
 8007f2a:	1a9b      	subs	r3, r3, r2
 8007f2c:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
    }

    /* Set RTC_AlarmStructure with calculated values*/
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 8007f2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f30:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8007f34:	3303      	adds	r3, #3
 8007f36:	461a      	mov	r2, r3
 8007f38:	4b1d      	ldr	r3, [pc, #116]	; (8007fb0 <RtcStartAlarm+0x1e8>)
 8007f3a:	605a      	str	r2, [r3, #4]
    RtcAlarm.AlarmSubSecondMask       = ALARM_SUBSECOND_MASK; 
 8007f3c:	4b1c      	ldr	r3, [pc, #112]	; (8007fb0 <RtcStartAlarm+0x1e8>)
 8007f3e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8007f42:	619a      	str	r2, [r3, #24]
    RtcAlarm.AlarmTime.Seconds        = rtcAlarmSeconds;
 8007f44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	4b19      	ldr	r3, [pc, #100]	; (8007fb0 <RtcStartAlarm+0x1e8>)
 8007f4a:	709a      	strb	r2, [r3, #2]
    RtcAlarm.AlarmTime.Minutes        = rtcAlarmMinutes;
 8007f4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	4b17      	ldr	r3, [pc, #92]	; (8007fb0 <RtcStartAlarm+0x1e8>)
 8007f52:	705a      	strb	r2, [r3, #1]
    RtcAlarm.AlarmTime.Hours          = rtcAlarmHours;
 8007f54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	4b15      	ldr	r3, [pc, #84]	; (8007fb0 <RtcStartAlarm+0x1e8>)
 8007f5a:	701a      	strb	r2, [r3, #0]
    RtcAlarm.AlarmDateWeekDay         = ( uint8_t )rtcAlarmDays;
 8007f5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	4b13      	ldr	r3, [pc, #76]	; (8007fb0 <RtcStartAlarm+0x1e8>)
 8007f62:	f883 2020 	strb.w	r2, [r3, #32]
    RtcAlarm.AlarmTime.TimeFormat     = time.TimeFormat;
 8007f66:	7cfa      	ldrb	r2, [r7, #19]
 8007f68:	4b11      	ldr	r3, [pc, #68]	; (8007fb0 <RtcStartAlarm+0x1e8>)
 8007f6a:	70da      	strb	r2, [r3, #3]
    RtcAlarm.AlarmDateWeekDaySel      = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 8007f6c:	4b10      	ldr	r3, [pc, #64]	; (8007fb0 <RtcStartAlarm+0x1e8>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	61da      	str	r2, [r3, #28]
    RtcAlarm.AlarmMask                = RTC_ALARMMASK_NONE;
 8007f72:	4b0f      	ldr	r3, [pc, #60]	; (8007fb0 <RtcStartAlarm+0x1e8>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	615a      	str	r2, [r3, #20]
    RtcAlarm.Alarm                    = RTC_ALARM_A;
 8007f78:	4b0d      	ldr	r3, [pc, #52]	; (8007fb0 <RtcStartAlarm+0x1e8>)
 8007f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f7e:	625a      	str	r2, [r3, #36]	; 0x24
    RtcAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007f80:	4b0b      	ldr	r3, [pc, #44]	; (8007fb0 <RtcStartAlarm+0x1e8>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	60da      	str	r2, [r3, #12]
    RtcAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007f86:	4b0a      	ldr	r3, [pc, #40]	; (8007fb0 <RtcStartAlarm+0x1e8>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	611a      	str	r2, [r3, #16]

    // Set RTC_Alarm
    HAL_RTC_SetAlarm_IT( &RtcHandle, &RtcAlarm, RTC_FORMAT_BIN );
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	4908      	ldr	r1, [pc, #32]	; (8007fb0 <RtcStartAlarm+0x1e8>)
 8007f90:	4808      	ldr	r0, [pc, #32]	; (8007fb4 <RtcStartAlarm+0x1ec>)
 8007f92:	f7fa fcbf 	bl	8002914 <HAL_RTC_SetAlarm_IT>
}
 8007f96:	bf00      	nop
 8007f98:	3730      	adds	r7, #48	; 0x30
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20001234 	.word	0x20001234
 8007fa4:	0001517f 	.word	0x0001517f
 8007fa8:	08009e70 	.word	0x08009e70
 8007fac:	08009e64 	.word	0x08009e64
 8007fb0:	2000149c 	.word	0x2000149c
 8007fb4:	20001214 	.word	0x20001214

08007fb8 <RtcGetTimerValue>:

uint32_t RtcGetTimerValue( void )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;

    uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 8007fbe:	f107 0208 	add.w	r2, r7, #8
 8007fc2:	1d3b      	adds	r3, r7, #4
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 f822 	bl	8008010 <RtcGetCalendarValue>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	61fb      	str	r3, [r7, #28]

    return( calendarValue );
 8007fd4:	69fb      	ldr	r3, [r7, #28]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3720      	adds	r7, #32
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <RtcGetTimerElapsedTime>:

uint32_t RtcGetTimerElapsedTime( void )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b088      	sub	sp, #32
 8007fe4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef time;
  RTC_DateTypeDef date;
  
  uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 8007fe6:	f107 0208 	add.w	r2, r7, #8
 8007fea:	1d3b      	adds	r3, r7, #4
 8007fec:	4611      	mov	r1, r2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 f80e 	bl	8008010 <RtcGetCalendarValue>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	61fb      	str	r3, [r7, #28]

  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
 8007ffc:	4b03      	ldr	r3, [pc, #12]	; (800800c <RtcGetTimerElapsedTime+0x2c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	69fa      	ldr	r2, [r7, #28]
 8008002:	1ad3      	subs	r3, r2, r3
}
 8008004:	4618      	mov	r0, r3
 8008006:	3720      	adds	r7, #32
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	20001234 	.word	0x20001234

08008010 <RtcGetCalendarValue>:

static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time )
{
 8008010:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008014:	b088      	sub	sp, #32
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	6039      	str	r1, [r7, #0]
    uint64_t calendarValue = 0;
 800801c:	f04f 0200 	mov.w	r2, #0
 8008020:	f04f 0300 	mov.w	r3, #0
 8008024:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint32_t seconds;

    // Make sure it is correct due to asynchronus nature of RTC
    do
    {
        firstRead = RTC->SSR;
 8008028:	4b3f      	ldr	r3, [pc, #252]	; (8008128 <RtcGetCalendarValue+0x118>)
 800802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802c:	617b      	str	r3, [r7, #20]
        HAL_RTC_GetDate( &RtcHandle, date, RTC_FORMAT_BIN );
 800802e:	2200      	movs	r2, #0
 8008030:	6879      	ldr	r1, [r7, #4]
 8008032:	483e      	ldr	r0, [pc, #248]	; (800812c <RtcGetCalendarValue+0x11c>)
 8008034:	f7fa fc20 	bl	8002878 <HAL_RTC_GetDate>
        HAL_RTC_GetTime( &RtcHandle, time, RTC_FORMAT_BIN );
 8008038:	2200      	movs	r2, #0
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	483b      	ldr	r0, [pc, #236]	; (800812c <RtcGetCalendarValue+0x11c>)
 800803e:	f7fa fb20 	bl	8002682 <HAL_RTC_GetTime>
    }while( firstRead != RTC->SSR );
 8008042:	4b39      	ldr	r3, [pc, #228]	; (8008128 <RtcGetCalendarValue+0x118>)
 8008044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	429a      	cmp	r2, r3
 800804a:	d1ed      	bne.n	8008028 <RtcGetCalendarValue+0x18>

    // Calculte amount of elapsed days since 01/01/2000
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	78db      	ldrb	r3, [r3, #3]
 8008050:	461a      	mov	r2, r3
 8008052:	f240 53b5 	movw	r3, #1461	; 0x5b5
 8008056:	fb03 f302 	mul.w	r3, r3, r2
 800805a:	3303      	adds	r3, #3
 800805c:	089b      	lsrs	r3, r3, #2
 800805e:	613b      	str	r3, [r7, #16]

    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	78db      	ldrb	r3, [r3, #3]
 8008064:	f003 0303 	and.w	r3, r3, #3
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <RtcGetCalendarValue+0x62>
 800806e:	4b30      	ldr	r3, [pc, #192]	; (8008130 <RtcGetCalendarValue+0x120>)
 8008070:	e000      	b.n	8008074 <RtcGetCalendarValue+0x64>
 8008072:	4b30      	ldr	r3, [pc, #192]	; (8008134 <RtcGetCalendarValue+0x124>)
 8008074:	60fb      	str	r3, [r7, #12]

    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	785b      	ldrb	r3, [r3, #1]
 800807a:	1e5a      	subs	r2, r3, #1
 800807c:	4613      	mov	r3, r2
 800807e:	011b      	lsls	r3, r3, #4
 8008080:	1a9b      	subs	r3, r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	3301      	adds	r3, #1
 8008088:	0fda      	lsrs	r2, r3, #31
 800808a:	4413      	add	r3, r2
 800808c:	105b      	asrs	r3, r3, #1
 800808e:	4619      	mov	r1, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	785b      	ldrb	r3, [r3, #1]
 8008094:	3b01      	subs	r3, #1
 8008096:	005b      	lsls	r3, r3, #1
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	fa22 f303 	lsr.w	r3, r2, r3
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	1acb      	subs	r3, r1, r3
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	4413      	add	r3, r2
 80080a8:	613b      	str	r3, [r7, #16]

    seconds += ( date->Date -1 );
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	789b      	ldrb	r3, [r3, #2]
 80080ae:	461a      	mov	r2, r3
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	4413      	add	r3, r2
 80080b4:	3b01      	subs	r3, #1
 80080b6:	613b      	str	r3, [r7, #16]

    // Convert from days to seconds
    seconds *= SECONDS_IN_1DAY;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	4a1f      	ldr	r2, [pc, #124]	; (8008138 <RtcGetCalendarValue+0x128>)
 80080bc:	fb02 f303 	mul.w	r3, r2, r3
 80080c0:	613b      	str	r3, [r7, #16]

    seconds += ( ( uint32_t )time->Seconds + 
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	789b      	ldrb	r3, [r3, #2]
 80080c6:	4618      	mov	r0, r3
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
                 ( ( uint32_t )time->Hours * SECONDS_IN_1HOUR ) ) ;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	461a      	mov	r2, r3
 80080ce:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80080d2:	fb03 f202 	mul.w	r2, r3, r2
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	785b      	ldrb	r3, [r3, #1]
 80080da:	4619      	mov	r1, r3
 80080dc:	460b      	mov	r3, r1
 80080de:	011b      	lsls	r3, r3, #4
 80080e0:	1a5b      	subs	r3, r3, r1
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	4403      	add	r3, r0
    seconds += ( ( uint32_t )time->Seconds + 
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	4413      	add	r3, r2
 80080ec:	613b      	str	r3, [r7, #16]

    calendarValue = ( ( ( uint64_t )seconds ) << N_PREDIV_S ) + ( PREDIV_S - time->SubSeconds );
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	461a      	mov	r2, r3
 80080f2:	f04f 0300 	mov.w	r3, #0
 80080f6:	0d95      	lsrs	r5, r2, #22
 80080f8:	0294      	lsls	r4, r2, #10
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8008102:	3303      	adds	r3, #3
 8008104:	461a      	mov	r2, r3
 8008106:	f04f 0300 	mov.w	r3, #0
 800810a:	eb14 0802 	adds.w	r8, r4, r2
 800810e:	eb45 0903 	adc.w	r9, r5, r3
 8008112:	e9c7 8906 	strd	r8, r9, [r7, #24]

    return( calendarValue );
 8008116:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800811a:	4610      	mov	r0, r2
 800811c:	4619      	mov	r1, r3
 800811e:	3720      	adds	r7, #32
 8008120:	46bd      	mov	sp, r7
 8008122:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008126:	bf00      	nop
 8008128:	40002800 	.word	0x40002800
 800812c:	20001214 	.word	0x20001214
 8008130:	00445550 	.word	0x00445550
 8008134:	0099aaa0 	.word	0x0099aaa0
 8008138:	00015180 	.word	0x00015180

0800813c <HAL_RTC_AlarmAEventCallback>:
 * \brief  Alarm A callback.
 *
 * \param [IN] hrtc RTC handle
 */
void HAL_RTC_AlarmAEventCallback( RTC_HandleTypeDef *hrtc )
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
    TimerIrqHandler( );
 8008144:	f000 faa0 	bl	8008688 <TimerIrqHandler>
}
 8008148:	bf00      	nop
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <SX1276IoInit>:
    NULL, // void ( *RxBoosted )( uint32_t timeout ) - SX126x Only
    NULL, // void ( *SetRxDutyCycle )( uint32_t rxTime, uint32_t sleepTime ) - SX126x Only
};

void SX1276IoInit( void )
{
 8008150:	b480      	push	{r7}
 8008152:	af00      	add	r7, sp, #0
  // DIO_0
  SX1276.DIO0.port = DIO_0_GPIO_Port;
 8008154:	4b15      	ldr	r3, [pc, #84]	; (80081ac <SX1276IoInit+0x5c>)
 8008156:	4a16      	ldr	r2, [pc, #88]	; (80081b0 <SX1276IoInit+0x60>)
 8008158:	609a      	str	r2, [r3, #8]
  SX1276.DIO0.pin = DIO_0_Pin;
 800815a:	4b14      	ldr	r3, [pc, #80]	; (80081ac <SX1276IoInit+0x5c>)
 800815c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008160:	819a      	strh	r2, [r3, #12]
  // DIO_1
  SX1276.DIO1.port = DIO_1_GPIO_Port;
 8008162:	4b12      	ldr	r3, [pc, #72]	; (80081ac <SX1276IoInit+0x5c>)
 8008164:	4a12      	ldr	r2, [pc, #72]	; (80081b0 <SX1276IoInit+0x60>)
 8008166:	611a      	str	r2, [r3, #16]
  SX1276.DIO1.pin = DIO_1_Pin;
 8008168:	4b10      	ldr	r3, [pc, #64]	; (80081ac <SX1276IoInit+0x5c>)
 800816a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800816e:	829a      	strh	r2, [r3, #20]
  // DIO_2
  SX1276.DIO2.port = DIO_2_GPIO_Port;
 8008170:	4b0e      	ldr	r3, [pc, #56]	; (80081ac <SX1276IoInit+0x5c>)
 8008172:	4a10      	ldr	r2, [pc, #64]	; (80081b4 <SX1276IoInit+0x64>)
 8008174:	619a      	str	r2, [r3, #24]
  SX1276.DIO2.pin = DIO_2_Pin;
 8008176:	4b0d      	ldr	r3, [pc, #52]	; (80081ac <SX1276IoInit+0x5c>)
 8008178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800817c:	839a      	strh	r2, [r3, #28]
  // DIO_3
  SX1276.DIO3.port = DIO_3_GPIO_Port;
 800817e:	4b0b      	ldr	r3, [pc, #44]	; (80081ac <SX1276IoInit+0x5c>)
 8008180:	4a0c      	ldr	r2, [pc, #48]	; (80081b4 <SX1276IoInit+0x64>)
 8008182:	621a      	str	r2, [r3, #32]
  SX1276.DIO3.pin = DIO_3_Pin;
 8008184:	4b09      	ldr	r3, [pc, #36]	; (80081ac <SX1276IoInit+0x5c>)
 8008186:	f44f 7280 	mov.w	r2, #256	; 0x100
 800818a:	849a      	strh	r2, [r3, #36]	; 0x24
  // DIO_4
  SX1276.DIO4.port = DIO_4_GPIO_Port;
 800818c:	4b07      	ldr	r3, [pc, #28]	; (80081ac <SX1276IoInit+0x5c>)
 800818e:	4a09      	ldr	r2, [pc, #36]	; (80081b4 <SX1276IoInit+0x64>)
 8008190:	629a      	str	r2, [r3, #40]	; 0x28
  SX1276.DIO4.pin = DIO_4_Pin;
 8008192:	4b06      	ldr	r3, [pc, #24]	; (80081ac <SX1276IoInit+0x5c>)
 8008194:	2220      	movs	r2, #32
 8008196:	859a      	strh	r2, [r3, #44]	; 0x2c
  // DIO_5
  SX1276.DIO5.port = DIO_5_GPIO_Port;
 8008198:	4b04      	ldr	r3, [pc, #16]	; (80081ac <SX1276IoInit+0x5c>)
 800819a:	4a06      	ldr	r2, [pc, #24]	; (80081b4 <SX1276IoInit+0x64>)
 800819c:	631a      	str	r2, [r3, #48]	; 0x30
  SX1276.DIO5.pin = DIO_5_Pin;
 800819e:	4b03      	ldr	r3, [pc, #12]	; (80081ac <SX1276IoInit+0x5c>)
 80081a0:	2240      	movs	r2, #64	; 0x40
 80081a2:	869a      	strh	r2, [r3, #52]	; 0x34
}
 80081a4:	bf00      	nop
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bc80      	pop	{r7}
 80081aa:	4770      	bx	lr
 80081ac:	2000139c 	.word	0x2000139c
 80081b0:	40020000 	.word	0x40020000
 80081b4:	40020800 	.word	0x40020800

080081b8 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  DioIrqCallbacks.dio0 = irqHandlers[0];
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a0d      	ldr	r2, [pc, #52]	; (80081fc <SX1276IoIrqInit+0x44>)
 80081c6:	6013      	str	r3, [r2, #0]
  DioIrqCallbacks.dio1 = irqHandlers[1];
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	4a0b      	ldr	r2, [pc, #44]	; (80081fc <SX1276IoIrqInit+0x44>)
 80081ce:	6053      	str	r3, [r2, #4]
  DioIrqCallbacks.dio2 = irqHandlers[2];
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	4a09      	ldr	r2, [pc, #36]	; (80081fc <SX1276IoIrqInit+0x44>)
 80081d6:	6093      	str	r3, [r2, #8]
  DioIrqCallbacks.dio3 = irqHandlers[3];
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	4a07      	ldr	r2, [pc, #28]	; (80081fc <SX1276IoIrqInit+0x44>)
 80081de:	60d3      	str	r3, [r2, #12]
  DioIrqCallbacks.dio4 = irqHandlers[4];
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	4a05      	ldr	r2, [pc, #20]	; (80081fc <SX1276IoIrqInit+0x44>)
 80081e6:	6113      	str	r3, [r2, #16]
  DioIrqCallbacks.dio5 = irqHandlers[5];
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	4a03      	ldr	r2, [pc, #12]	; (80081fc <SX1276IoIrqInit+0x44>)
 80081ee:	6153      	str	r3, [r2, #20]
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bc80      	pop	{r7}
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	200014c4 	.word	0x200014c4

08008200 <SX1276SetBoardTcxo>:
{
    // No TCXO component available on this board design.
}

void SX1276SetBoardTcxo( uint8_t state )
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	4603      	mov	r3, r0
 8008208:	71fb      	strb	r3, [r7, #7]
    // No TCXO component available on this board design.
}
 800820a:	bf00      	nop
 800820c:	370c      	adds	r7, #12
 800820e:	46bd      	mov	sp, r7
 8008210:	bc80      	pop	{r7}
 8008212:	4770      	bx	lr

08008214 <SX1276GetBoardTcxoWakeupTime>:

uint32_t SX1276GetBoardTcxoWakeupTime( void )
{
 8008214:	b480      	push	{r7}
 8008216:	af00      	add	r7, sp, #0
    return BOARD_TCXO_WAKEUP_TIME;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	46bd      	mov	sp, r7
 800821e:	bc80      	pop	{r7}
 8008220:	4770      	bx	lr
	...

08008224 <SX1276Reset>:

void SX1276Reset( void )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0
    // Enables the TCXO if available on the board design
    SX1276SetBoardTcxo( true );
 8008228:	2001      	movs	r0, #1
 800822a:	f7ff ffe9 	bl	8008200 <SX1276SetBoardTcxo>

    // Set RESET pin to 0
    HAL_GPIO_WritePin(SX1276.Reset.port, SX1276.Reset.pin, RESET);
 800822e:	4b0c      	ldr	r3, [pc, #48]	; (8008260 <SX1276Reset+0x3c>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a0b      	ldr	r2, [pc, #44]	; (8008260 <SX1276Reset+0x3c>)
 8008234:	8891      	ldrh	r1, [r2, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	4618      	mov	r0, r3
 800823a:	f7f9 f9d4 	bl	80015e6 <HAL_GPIO_WritePin>

    // Wait 1 ms
    DelayMs( 1 );
 800823e:	2001      	movs	r0, #1
 8008240:	f7ff fb56 	bl	80078f0 <DelayMs>

    // Configure RESET as input
    HAL_GPIO_WritePin(SX1276.Reset.port, SX1276.Reset.pin, SET);
 8008244:	4b06      	ldr	r3, [pc, #24]	; (8008260 <SX1276Reset+0x3c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a05      	ldr	r2, [pc, #20]	; (8008260 <SX1276Reset+0x3c>)
 800824a:	8891      	ldrh	r1, [r2, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	4618      	mov	r0, r3
 8008250:	f7f9 f9c9 	bl	80015e6 <HAL_GPIO_WritePin>

    // Wait 6 ms
    DelayMs( 6 );
 8008254:	2006      	movs	r0, #6
 8008256:	f7ff fb4b 	bl	80078f0 <DelayMs>
}
 800825a:	bf00      	nop
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	2000139c 	.word	0x2000139c

08008264 <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 8008264:	b590      	push	{r4, r7, lr}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	71fb      	strb	r3, [r7, #7]
    uint8_t paConfig = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	73fb      	strb	r3, [r7, #15]
    uint8_t paDac = 0;
 8008272:	2300      	movs	r3, #0
 8008274:	73bb      	strb	r3, [r7, #14]

    paConfig = SX1276Read( REG_PACONFIG );
 8008276:	2009      	movs	r0, #9
 8008278:	f7fe fbe2 	bl	8006a40 <SX1276Read>
 800827c:	4603      	mov	r3, r0
 800827e:	73fb      	strb	r3, [r7, #15]
    paDac = SX1276Read( REG_PADAC );
 8008280:	204d      	movs	r0, #77	; 0x4d
 8008282:	f7fe fbdd 	bl	8006a40 <SX1276Read>
 8008286:	4603      	mov	r3, r0
 8008288:	73bb      	strb	r3, [r7, #14]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 800828a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800828e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008292:	b25c      	sxtb	r4, r3
 8008294:	4b4a      	ldr	r3, [pc, #296]	; (80083c0 <SX1276SetRfTxPower+0x15c>)
 8008296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008298:	4618      	mov	r0, r3
 800829a:	f000 f893 	bl	80083c4 <SX1276GetPaSelect>
 800829e:	4603      	mov	r3, r0
 80082a0:	b25b      	sxtb	r3, r3
 80082a2:	4323      	orrs	r3, r4
 80082a4:	b25b      	sxtb	r3, r3
 80082a6:	73fb      	strb	r3, [r7, #15]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 80082a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	da4e      	bge.n	800834e <SX1276SetRfTxPower+0xea>
    {
        if( power > 17 )
 80082b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082b4:	2b11      	cmp	r3, #17
 80082b6:	dd04      	ble.n	80082c2 <SX1276SetRfTxPower+0x5e>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	f043 0307 	orr.w	r3, r3, #7
 80082be:	73bb      	strb	r3, [r7, #14]
 80082c0:	e008      	b.n	80082d4 <SX1276SetRfTxPower+0x70>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 80082c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082c6:	f023 0307 	bic.w	r3, r3, #7
 80082ca:	b25b      	sxtb	r3, r3
 80082cc:	f043 0304 	orr.w	r3, r3, #4
 80082d0:	b25b      	sxtb	r3, r3
 80082d2:	73bb      	strb	r3, [r7, #14]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	f003 0307 	and.w	r3, r3, #7
 80082da:	2b07      	cmp	r3, #7
 80082dc:	d11b      	bne.n	8008316 <SX1276SetRfTxPower+0xb2>
        {
            if( power < 5 )
 80082de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082e2:	2b04      	cmp	r3, #4
 80082e4:	dc01      	bgt.n	80082ea <SX1276SetRfTxPower+0x86>
            {
                power = 5;
 80082e6:	2305      	movs	r3, #5
 80082e8:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 20 )
 80082ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082ee:	2b14      	cmp	r3, #20
 80082f0:	dd01      	ble.n	80082f6 <SX1276SetRfTxPower+0x92>
            {
                power = 20;
 80082f2:	2314      	movs	r3, #20
 80082f4:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 80082f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082fa:	f023 030f 	bic.w	r3, r3, #15
 80082fe:	b25a      	sxtb	r2, r3
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	3b05      	subs	r3, #5
 8008304:	b2db      	uxtb	r3, r3
 8008306:	b25b      	sxtb	r3, r3
 8008308:	f003 030f 	and.w	r3, r3, #15
 800830c:	b25b      	sxtb	r3, r3
 800830e:	4313      	orrs	r3, r2
 8008310:	b25b      	sxtb	r3, r3
 8008312:	73fb      	strb	r3, [r7, #15]
 8008314:	e045      	b.n	80083a2 <SX1276SetRfTxPower+0x13e>
        }
        else
        {
            if( power < 2 )
 8008316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800831a:	2b01      	cmp	r3, #1
 800831c:	dc01      	bgt.n	8008322 <SX1276SetRfTxPower+0xbe>
            {
                power = 2;
 800831e:	2302      	movs	r3, #2
 8008320:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 17 )
 8008322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008326:	2b11      	cmp	r3, #17
 8008328:	dd01      	ble.n	800832e <SX1276SetRfTxPower+0xca>
            {
                power = 17;
 800832a:	2311      	movs	r3, #17
 800832c:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800832e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008332:	f023 030f 	bic.w	r3, r3, #15
 8008336:	b25a      	sxtb	r2, r3
 8008338:	79fb      	ldrb	r3, [r7, #7]
 800833a:	3b02      	subs	r3, #2
 800833c:	b2db      	uxtb	r3, r3
 800833e:	b25b      	sxtb	r3, r3
 8008340:	f003 030f 	and.w	r3, r3, #15
 8008344:	b25b      	sxtb	r3, r3
 8008346:	4313      	orrs	r3, r2
 8008348:	b25b      	sxtb	r3, r3
 800834a:	73fb      	strb	r3, [r7, #15]
 800834c:	e029      	b.n	80083a2 <SX1276SetRfTxPower+0x13e>
        }
    }
    else
    {
        if( power > 0 )
 800834e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008352:	2b00      	cmp	r3, #0
 8008354:	dd12      	ble.n	800837c <SX1276SetRfTxPower+0x118>
        {
            if( power > 15 )
 8008356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800835a:	2b0f      	cmp	r3, #15
 800835c:	dd01      	ble.n	8008362 <SX1276SetRfTxPower+0xfe>
            {
                power = 15;
 800835e:	230f      	movs	r3, #15
 8008360:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8008362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008366:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800836a:	b25b      	sxtb	r3, r3
 800836c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8008370:	b25a      	sxtb	r2, r3
 8008372:	79fb      	ldrb	r3, [r7, #7]
 8008374:	4313      	orrs	r3, r2
 8008376:	b25b      	sxtb	r3, r3
 8008378:	73fb      	strb	r3, [r7, #15]
 800837a:	e012      	b.n	80083a2 <SX1276SetRfTxPower+0x13e>
        }
        else
        {
            if( power < -4 )
 800837c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008380:	f113 0f04 	cmn.w	r3, #4
 8008384:	da01      	bge.n	800838a <SX1276SetRfTxPower+0x126>
            {
                power = -4;
 8008386:	23fc      	movs	r3, #252	; 0xfc
 8008388:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800838a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800838e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008392:	b25a      	sxtb	r2, r3
 8008394:	79fb      	ldrb	r3, [r7, #7]
 8008396:	3304      	adds	r3, #4
 8008398:	b2db      	uxtb	r3, r3
 800839a:	b25b      	sxtb	r3, r3
 800839c:	4313      	orrs	r3, r2
 800839e:	b25b      	sxtb	r3, r3
 80083a0:	73fb      	strb	r3, [r7, #15]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
 80083a4:	4619      	mov	r1, r3
 80083a6:	2009      	movs	r0, #9
 80083a8:	f7fe fb3a 	bl	8006a20 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
 80083ae:	4619      	mov	r1, r3
 80083b0:	204d      	movs	r0, #77	; 0x4d
 80083b2:	f7fe fb35 	bl	8006a20 <SX1276Write>
}
 80083b6:	bf00      	nop
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd90      	pop	{r4, r7, pc}
 80083be:	bf00      	nop
 80083c0:	2000139c 	.word	0x2000139c

080083c4 <SX1276GetPaSelect>:

static uint8_t SX1276GetPaSelect( uint32_t channel )
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
    if( channel > RF_MID_BAND_THRESH )
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a05      	ldr	r2, [pc, #20]	; (80083e4 <SX1276GetPaSelect+0x20>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d901      	bls.n	80083d8 <SX1276GetPaSelect+0x14>
    {
        return RF_PACONFIG_PASELECT_PABOOST;
 80083d4:	2380      	movs	r3, #128	; 0x80
 80083d6:	e000      	b.n	80083da <SX1276GetPaSelect+0x16>
    }
    else
    {
        return RF_PACONFIG_PASELECT_RFO;
 80083d8:	2300      	movs	r3, #0
    }
}
 80083da:	4618      	mov	r0, r3
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	bc80      	pop	{r7}
 80083e2:	4770      	bx	lr
 80083e4:	1f4add40 	.word	0x1f4add40

080083e8 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	4603      	mov	r3, r0
 80083f0:	71fb      	strb	r3, [r7, #7]
    if( RadioIsActive != status )
 80083f2:	4b0b      	ldr	r3, [pc, #44]	; (8008420 <SX1276SetAntSwLowPower+0x38>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	79fa      	ldrb	r2, [r7, #7]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d00d      	beq.n	8008418 <SX1276SetAntSwLowPower+0x30>
    {
        RadioIsActive = status;
 80083fc:	4a08      	ldr	r2, [pc, #32]	; (8008420 <SX1276SetAntSwLowPower+0x38>)
 80083fe:	79fb      	ldrb	r3, [r7, #7]
 8008400:	7013      	strb	r3, [r2, #0]

        if( status == false )
 8008402:	79fb      	ldrb	r3, [r7, #7]
 8008404:	f083 0301 	eor.w	r3, r3, #1
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b00      	cmp	r3, #0
 800840c:	d002      	beq.n	8008414 <SX1276SetAntSwLowPower+0x2c>
        {
            SX1276AntSwInit( );
 800840e:	f000 f809 	bl	8008424 <SX1276AntSwInit>
        else
        {
            SX1276AntSwDeInit( );
        }
    }
}
 8008412:	e001      	b.n	8008418 <SX1276SetAntSwLowPower+0x30>
            SX1276AntSwDeInit( );
 8008414:	f000 f80c 	bl	8008430 <SX1276AntSwDeInit>
}
 8008418:	bf00      	nop
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	20001250 	.word	0x20001250

08008424 <SX1276AntSwInit>:

void SX1276AntSwInit( void )
{
 8008424:	b480      	push	{r7}
 8008426:	af00      	add	r7, sp, #0
//    GpioInit( &AntSwitch, RADIO_ANT_SWITCH, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
}
 8008428:	bf00      	nop
 800842a:	46bd      	mov	sp, r7
 800842c:	bc80      	pop	{r7}
 800842e:	4770      	bx	lr

08008430 <SX1276AntSwDeInit>:

void SX1276AntSwDeInit( void )
{
 8008430:	b480      	push	{r7}
 8008432:	af00      	add	r7, sp, #0
//    GpioInit( &AntSwitch, RADIO_ANT_SWITCH, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}
 8008434:	bf00      	nop
 8008436:	46bd      	mov	sp, r7
 8008438:	bc80      	pop	{r7}
 800843a:	4770      	bx	lr

0800843c <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	4603      	mov	r3, r0
 8008444:	71fb      	strb	r3, [r7, #7]
}
 8008446:	bf00      	nop
 8008448:	370c      	adds	r7, #12
 800844a:	46bd      	mov	sp, r7
 800844c:	bc80      	pop	{r7}
 800844e:	4770      	bx	lr

08008450 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 8008458:	2301      	movs	r3, #1
}
 800845a:	4618      	mov	r0, r3
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	bc80      	pop	{r7}
 8008462:	4770      	bx	lr

08008464 <SX1276GetDio1PinState>:

uint32_t SX1276GetDio1PinState( void )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
    return GpioRead( &SX1276.DIO1 );
 8008468:	4802      	ldr	r0, [pc, #8]	; (8008474 <SX1276GetDio1PinState+0x10>)
 800846a:	f7f8 f94d 	bl	8000708 <GpioRead>
 800846e:	4603      	mov	r3, r0
}
 8008470:	4618      	mov	r0, r3
 8008472:	bd80      	pop	{r7, pc}
 8008474:	200013ac 	.word	0x200013ac

08008478 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	80fb      	strh	r3, [r7, #6]
  void (*fptr)(void *context) = NULL;
 8008482:	2300      	movs	r3, #0
 8008484:	60fb      	str	r3, [r7, #12]
  switch(GPIO_Pin)
 8008486:	88fb      	ldrh	r3, [r7, #6]
 8008488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800848c:	d019      	beq.n	80084c2 <HAL_GPIO_EXTI_Callback+0x4a>
 800848e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008492:	dc2e      	bgt.n	80084f2 <HAL_GPIO_EXTI_Callback+0x7a>
 8008494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008498:	d017      	beq.n	80084ca <HAL_GPIO_EXTI_Callback+0x52>
 800849a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800849e:	dc28      	bgt.n	80084f2 <HAL_GPIO_EXTI_Callback+0x7a>
 80084a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084a4:	d015      	beq.n	80084d2 <HAL_GPIO_EXTI_Callback+0x5a>
 80084a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084aa:	dc22      	bgt.n	80084f2 <HAL_GPIO_EXTI_Callback+0x7a>
 80084ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084b0:	d013      	beq.n	80084da <HAL_GPIO_EXTI_Callback+0x62>
 80084b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084b6:	dc1c      	bgt.n	80084f2 <HAL_GPIO_EXTI_Callback+0x7a>
 80084b8:	2b20      	cmp	r3, #32
 80084ba:	d012      	beq.n	80084e2 <HAL_GPIO_EXTI_Callback+0x6a>
 80084bc:	2b40      	cmp	r3, #64	; 0x40
 80084be:	d014      	beq.n	80084ea <HAL_GPIO_EXTI_Callback+0x72>
      break;
    case DIO_5_Pin:
      fptr = DioIrq[5];
      break;
    default:
      break;
 80084c0:	e017      	b.n	80084f2 <HAL_GPIO_EXTI_Callback+0x7a>
      fptr = DioIrq[0];
 80084c2:	4b11      	ldr	r3, [pc, #68]	; (8008508 <HAL_GPIO_EXTI_Callback+0x90>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	60fb      	str	r3, [r7, #12]
      break;
 80084c8:	e014      	b.n	80084f4 <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[1];
 80084ca:	4b0f      	ldr	r3, [pc, #60]	; (8008508 <HAL_GPIO_EXTI_Callback+0x90>)
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	60fb      	str	r3, [r7, #12]
      break;
 80084d0:	e010      	b.n	80084f4 <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[2];
 80084d2:	4b0d      	ldr	r3, [pc, #52]	; (8008508 <HAL_GPIO_EXTI_Callback+0x90>)
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	60fb      	str	r3, [r7, #12]
      break;
 80084d8:	e00c      	b.n	80084f4 <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[3];
 80084da:	4b0b      	ldr	r3, [pc, #44]	; (8008508 <HAL_GPIO_EXTI_Callback+0x90>)
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	60fb      	str	r3, [r7, #12]
      break;
 80084e0:	e008      	b.n	80084f4 <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[4];
 80084e2:	4b09      	ldr	r3, [pc, #36]	; (8008508 <HAL_GPIO_EXTI_Callback+0x90>)
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	60fb      	str	r3, [r7, #12]
      break;
 80084e8:	e004      	b.n	80084f4 <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[5];
 80084ea:	4b07      	ldr	r3, [pc, #28]	; (8008508 <HAL_GPIO_EXTI_Callback+0x90>)
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	60fb      	str	r3, [r7, #12]
      break;
 80084f0:	e000      	b.n	80084f4 <HAL_GPIO_EXTI_Callback+0x7c>
      break;
 80084f2:	bf00      	nop
}
  if(fptr != 0)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d002      	beq.n	8008500 <HAL_GPIO_EXTI_Callback+0x88>
    fptr(NULL);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2000      	movs	r0, #0
 80084fe:	4798      	blx	r3
}
 8008500:	bf00      	nop
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	20000010 	.word	0x20000010

0800850c <TimerInit>:
 * \retval true (the object is already in the list) or false
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	605a      	str	r2, [r3, #4]
    obj->IsStarted = false;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	721a      	strb	r2, [r3, #8]
    obj->IsNext2Expire = false;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	725a      	strb	r2, [r3, #9]
    obj->Callback = callback;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	60da      	str	r2, [r3, #12]
    obj->Context = NULL;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	611a      	str	r2, [r3, #16]
    obj->Next = NULL;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	615a      	str	r2, [r3, #20]
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	bc80      	pop	{r7}
 8008548:	4770      	bx	lr
	...

0800854c <TimerStart>:
{
    obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	60fb      	str	r3, [r7, #12]

    CRITICAL_SECTION_BEGIN( );
 8008558:	f107 0308 	add.w	r3, r7, #8
 800855c:	4618      	mov	r0, r3
 800855e:	f7ff f983 	bl	8007868 <BoardCriticalSectionBegin>

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d005      	beq.n	8008574 <TimerStart+0x28>
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f989 	bl	8008880 <TimerExists>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d005      	beq.n	8008580 <TimerStart+0x34>
    {
        CRITICAL_SECTION_END( );
 8008574:	f107 0308 	add.w	r3, r7, #8
 8008578:	4618      	mov	r0, r3
 800857a:	f7ff f986 	bl	800788a <BoardCriticalSectionEnd>
 800857e:	e02f      	b.n	80085e0 <TimerStart+0x94>
        return;
    }

    obj->Timestamp = obj->ReloadValue;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	601a      	str	r2, [r3, #0]
    obj->IsStarted = true;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	721a      	strb	r2, [r3, #8]
    obj->IsNext2Expire = false;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	725a      	strb	r2, [r3, #9]

    if( TimerListHead == NULL )
 8008594:	4b14      	ldr	r3, [pc, #80]	; (80085e8 <TimerStart+0x9c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d105      	bne.n	80085a8 <TimerStart+0x5c>
    {
        RtcSetTimerContext( );
 800859c:	f7ff fb8e 	bl	8007cbc <RtcSetTimerContext>
        // Inserts a timer at time now + obj->Timestamp
        TimerInsertNewHeadTimer( obj );
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f853 	bl	800864c <TimerInsertNewHeadTimer>
 80085a6:	e016      	b.n	80085d6 <TimerStart+0x8a>
    }
    else
    {
        elapsedTime = RtcGetTimerElapsedTime( );
 80085a8:	f7ff fd1a 	bl	8007fe0 <RtcGetTimerElapsedTime>
 80085ac:	60f8      	str	r0, [r7, #12]
        obj->Timestamp += elapsedTime;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	441a      	add	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	601a      	str	r2, [r3, #0]

        if( obj->Timestamp < TimerListHead->Timestamp )
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	4b0a      	ldr	r3, [pc, #40]	; (80085e8 <TimerStart+0x9c>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d203      	bcs.n	80085d0 <TimerStart+0x84>
        {
            TimerInsertNewHeadTimer( obj );
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f83f 	bl	800864c <TimerInsertNewHeadTimer>
 80085ce:	e002      	b.n	80085d6 <TimerStart+0x8a>
        }
        else
        {
            TimerInsertTimer( obj );
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f80b 	bl	80085ec <TimerInsertTimer>
        }
    }
    CRITICAL_SECTION_END( );
 80085d6:	f107 0308 	add.w	r3, r7, #8
 80085da:	4618      	mov	r0, r3
 80085dc:	f7ff f955 	bl	800788a <BoardCriticalSectionEnd>
}
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20001254 	.word	0x20001254

080085ec <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj )
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 80085f4:	4b14      	ldr	r3, [pc, #80]	; (8008648 <TimerInsertTimer+0x5c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* next = TimerListHead->Next;
 80085fa:	4b13      	ldr	r3, [pc, #76]	; (8008648 <TimerInsertTimer+0x5c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	60bb      	str	r3, [r7, #8]

    while( cur->Next != NULL )
 8008602:	e012      	b.n	800862a <TimerInsertTimer+0x3e>
    {
        if( obj->Timestamp > next->Timestamp )
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	429a      	cmp	r2, r3
 800860e:	d905      	bls.n	800861c <TimerInsertTimer+0x30>
        {
            cur = next;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	60fb      	str	r3, [r7, #12]
            next = next->Next;
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	695b      	ldr	r3, [r3, #20]
 8008618:	60bb      	str	r3, [r7, #8]
 800861a:	e006      	b.n	800862a <TimerInsertTimer+0x3e>
        }
        else
        {
            cur->Next = obj;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	615a      	str	r2, [r3, #20]
            obj->Next = next;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	615a      	str	r2, [r3, #20]
            return;
 8008628:	e009      	b.n	800863e <TimerInsertTimer+0x52>
    while( cur->Next != NULL )
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1e8      	bne.n	8008604 <TimerInsertTimer+0x18>
        }
    }
    cur->Next = obj;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	615a      	str	r2, [r3, #20]
    obj->Next = NULL;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	615a      	str	r2, [r3, #20]
}
 800863e:	3714      	adds	r7, #20
 8008640:	46bd      	mov	sp, r7
 8008642:	bc80      	pop	{r7}
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	20001254 	.word	0x20001254

0800864c <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8008654:	4b0b      	ldr	r3, [pc, #44]	; (8008684 <TimerInsertNewHeadTimer+0x38>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <TimerInsertNewHeadTimer+0x1a>
    {
        cur->IsNext2Expire = false;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	725a      	strb	r2, [r3, #9]
    }

    obj->Next = cur;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	615a      	str	r2, [r3, #20]
    TimerListHead = obj;
 800866c:	4a05      	ldr	r2, [pc, #20]	; (8008684 <TimerInsertNewHeadTimer+0x38>)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6013      	str	r3, [r2, #0]
    TimerSetTimeout( TimerListHead );
 8008672:	4b04      	ldr	r3, [pc, #16]	; (8008684 <TimerInsertNewHeadTimer+0x38>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4618      	mov	r0, r3
 8008678:	f000 f968 	bl	800894c <TimerSetTimeout>
}
 800867c:	bf00      	nop
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	20001254 	.word	0x20001254

08008688 <TimerIrqHandler>:
{
    return obj->IsStarted;
}

void TimerIrqHandler( void )
{
 8008688:	b590      	push	{r4, r7, lr}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
    TimerEvent_t* cur;
    TimerEvent_t* next;

    uint32_t old =  RtcGetTimerContext( );
 800868e:	f7ff fb29 	bl	8007ce4 <RtcGetTimerContext>
 8008692:	6138      	str	r0, [r7, #16]
    uint32_t now =  RtcSetTimerContext( );
 8008694:	f7ff fb12 	bl	8007cbc <RtcSetTimerContext>
 8008698:	60f8      	str	r0, [r7, #12]
    uint32_t deltaContext = now - old; // intentional wrap around
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	60bb      	str	r3, [r7, #8]

    // Update timeStamp based upon new Time Reference
    // because delta context should never exceed 2^32
    if( TimerListHead != NULL )
 80086a2:	4b39      	ldr	r3, [pc, #228]	; (8008788 <TimerIrqHandler+0x100>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d01c      	beq.n	80086e4 <TimerIrqHandler+0x5c>
    {
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 80086aa:	4b37      	ldr	r3, [pc, #220]	; (8008788 <TimerIrqHandler+0x100>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	617b      	str	r3, [r7, #20]
 80086b0:	e014      	b.n	80086dc <TimerIrqHandler+0x54>
        {
            next = cur->Next;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	607b      	str	r3, [r7, #4]
            if( next->Timestamp > deltaContext )
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d206      	bcs.n	80086d0 <TimerIrqHandler+0x48>
            {
                next->Timestamp -= deltaContext;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	1ad2      	subs	r2, r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	e002      	b.n	80086d6 <TimerIrqHandler+0x4e>
            }
            else
            {
                next->Timestamp = 0;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	617b      	str	r3, [r7, #20]
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1e6      	bne.n	80086b2 <TimerIrqHandler+0x2a>
            }
        }
    }

    // Execute immediately the alarm callback
    if ( TimerListHead != NULL )
 80086e4:	4b28      	ldr	r3, [pc, #160]	; (8008788 <TimerIrqHandler+0x100>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d02c      	beq.n	8008746 <TimerIrqHandler+0xbe>
    {
        cur = TimerListHead;
 80086ec:	4b26      	ldr	r3, [pc, #152]	; (8008788 <TimerIrqHandler+0x100>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
 80086f2:	4b25      	ldr	r3, [pc, #148]	; (8008788 <TimerIrqHandler+0x100>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	4a23      	ldr	r2, [pc, #140]	; (8008788 <TimerIrqHandler+0x100>)
 80086fa:	6013      	str	r3, [r2, #0]
        cur->IsStarted = false;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	2200      	movs	r2, #0
 8008700:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d100      	bne.n	800870c <TimerIrqHandler+0x84>
 800870a:	e7fe      	b.n	800870a <TimerIrqHandler+0x82>
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	697a      	ldr	r2, [r7, #20]
 8008712:	6912      	ldr	r2, [r2, #16]
 8008714:	4610      	mov	r0, r2
 8008716:	4798      	blx	r3
    }

    // Remove all the expired object from the list
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8008718:	e015      	b.n	8008746 <TimerIrqHandler+0xbe>
    {
        cur = TimerListHead;
 800871a:	4b1b      	ldr	r3, [pc, #108]	; (8008788 <TimerIrqHandler+0x100>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
 8008720:	4b19      	ldr	r3, [pc, #100]	; (8008788 <TimerIrqHandler+0x100>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	4a18      	ldr	r2, [pc, #96]	; (8008788 <TimerIrqHandler+0x100>)
 8008728:	6013      	str	r3, [r2, #0]
        cur->IsStarted = false;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	2200      	movs	r2, #0
 800872e:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d100      	bne.n	800873a <TimerIrqHandler+0xb2>
 8008738:	e7fe      	b.n	8008738 <TimerIrqHandler+0xb0>
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	6912      	ldr	r2, [r2, #16]
 8008742:	4610      	mov	r0, r2
 8008744:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8008746:	4b10      	ldr	r3, [pc, #64]	; (8008788 <TimerIrqHandler+0x100>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d007      	beq.n	800875e <TimerIrqHandler+0xd6>
 800874e:	4b0e      	ldr	r3, [pc, #56]	; (8008788 <TimerIrqHandler+0x100>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681c      	ldr	r4, [r3, #0]
 8008754:	f7ff fc44 	bl	8007fe0 <RtcGetTimerElapsedTime>
 8008758:	4603      	mov	r3, r0
 800875a:	429c      	cmp	r4, r3
 800875c:	d3dd      	bcc.n	800871a <TimerIrqHandler+0x92>
    }

    // Start the next TimerListHead if it exists AND NOT running
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 800875e:	4b0a      	ldr	r3, [pc, #40]	; (8008788 <TimerIrqHandler+0x100>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00c      	beq.n	8008780 <TimerIrqHandler+0xf8>
 8008766:	4b08      	ldr	r3, [pc, #32]	; (8008788 <TimerIrqHandler+0x100>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	7a5b      	ldrb	r3, [r3, #9]
 800876c:	f083 0301 	eor.w	r3, r3, #1
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d004      	beq.n	8008780 <TimerIrqHandler+0xf8>
    {
        TimerSetTimeout( TimerListHead );
 8008776:	4b04      	ldr	r3, [pc, #16]	; (8008788 <TimerIrqHandler+0x100>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4618      	mov	r0, r3
 800877c:	f000 f8e6 	bl	800894c <TimerSetTimeout>
    }
}
 8008780:	bf00      	nop
 8008782:	371c      	adds	r7, #28
 8008784:	46bd      	mov	sp, r7
 8008786:	bd90      	pop	{r4, r7, pc}
 8008788:	20001254 	.word	0x20001254

0800878c <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
    CRITICAL_SECTION_BEGIN( );
 8008794:	f107 030c 	add.w	r3, r7, #12
 8008798:	4618      	mov	r0, r3
 800879a:	f7ff f865 	bl	8007868 <BoardCriticalSectionBegin>

    TimerEvent_t* prev = TimerListHead;
 800879e:	4b37      	ldr	r3, [pc, #220]	; (800887c <TimerStop+0xf0>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	617b      	str	r3, [r7, #20]
    TimerEvent_t* cur = TimerListHead;
 80087a4:	4b35      	ldr	r3, [pc, #212]	; (800887c <TimerStop+0xf0>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	613b      	str	r3, [r7, #16]

    // List is empty or the obj to stop does not exist
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 80087aa:	4b34      	ldr	r3, [pc, #208]	; (800887c <TimerStop+0xf0>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d002      	beq.n	80087b8 <TimerStop+0x2c>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d105      	bne.n	80087c4 <TimerStop+0x38>
    {
        CRITICAL_SECTION_END( );
 80087b8:	f107 030c 	add.w	r3, r7, #12
 80087bc:	4618      	mov	r0, r3
 80087be:	f7ff f864 	bl	800788a <BoardCriticalSectionEnd>
 80087c2:	e057      	b.n	8008874 <TimerStop+0xe8>
        return;
    }

    obj->IsStarted = false;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == obj ) // Stop the Head
 80087ca:	4b2c      	ldr	r3, [pc, #176]	; (800887c <TimerStop+0xf0>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d147      	bne.n	8008864 <TimerStop+0xd8>
    {
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 80087d4:	4b29      	ldr	r3, [pc, #164]	; (800887c <TimerStop+0xf0>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	7a5b      	ldrb	r3, [r3, #9]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d019      	beq.n	8008812 <TimerStop+0x86>
        {
            TimerListHead->IsNext2Expire = false;
 80087de:	4b27      	ldr	r3, [pc, #156]	; (800887c <TimerStop+0xf0>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2200      	movs	r2, #0
 80087e4:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
 80087e6:	4b25      	ldr	r3, [pc, #148]	; (800887c <TimerStop+0xf0>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	695b      	ldr	r3, [r3, #20]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00a      	beq.n	8008806 <TimerStop+0x7a>
            {
                TimerListHead = TimerListHead->Next;
 80087f0:	4b22      	ldr	r3, [pc, #136]	; (800887c <TimerStop+0xf0>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	4a21      	ldr	r2, [pc, #132]	; (800887c <TimerStop+0xf0>)
 80087f8:	6013      	str	r3, [r2, #0]
                TimerSetTimeout( TimerListHead );
 80087fa:	4b20      	ldr	r3, [pc, #128]	; (800887c <TimerStop+0xf0>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 f8a4 	bl	800894c <TimerSetTimeout>
 8008804:	e031      	b.n	800886a <TimerStop+0xde>
            }
            else
            {
                RtcStopAlarm( );
 8008806:	f7ff fac5 	bl	8007d94 <RtcStopAlarm>
                TimerListHead = NULL;
 800880a:	4b1c      	ldr	r3, [pc, #112]	; (800887c <TimerStop+0xf0>)
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	e02b      	b.n	800886a <TimerStop+0xde>
            }
        }
        else // Stop the head before it is started
        {
            if( TimerListHead->Next != NULL )
 8008812:	4b1a      	ldr	r3, [pc, #104]	; (800887c <TimerStop+0xf0>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d005      	beq.n	8008828 <TimerStop+0x9c>
            {
                TimerListHead = TimerListHead->Next;
 800881c:	4b17      	ldr	r3, [pc, #92]	; (800887c <TimerStop+0xf0>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	4a16      	ldr	r2, [pc, #88]	; (800887c <TimerStop+0xf0>)
 8008824:	6013      	str	r3, [r2, #0]
 8008826:	e020      	b.n	800886a <TimerStop+0xde>
            }
            else
            {
                TimerListHead = NULL;
 8008828:	4b14      	ldr	r3, [pc, #80]	; (800887c <TimerStop+0xf0>)
 800882a:	2200      	movs	r2, #0
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	e01c      	b.n	800886a <TimerStop+0xde>
    }
    else // Stop an object within the list
    {
        while( cur != NULL )
        {
            if( cur == obj )
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	429a      	cmp	r2, r3
 8008836:	d110      	bne.n	800885a <TimerStop+0xce>
            {
                if( cur->Next != NULL )
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d006      	beq.n	800884e <TimerStop+0xc2>
                {
                    cur = cur->Next;
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	615a      	str	r2, [r3, #20]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
 800884c:	e00d      	b.n	800886a <TimerStop+0xde>
                    cur = NULL;
 800884e:	2300      	movs	r3, #0
 8008850:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	615a      	str	r2, [r3, #20]
                break;
 8008858:	e007      	b.n	800886a <TimerStop+0xde>
            }
            else
            {
                prev = cur;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	617b      	str	r3, [r7, #20]
                cur = cur->Next;
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	613b      	str	r3, [r7, #16]
        while( cur != NULL )
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1e2      	bne.n	8008830 <TimerStop+0xa4>
            }
        }
    }
    CRITICAL_SECTION_END( );
 800886a:	f107 030c 	add.w	r3, r7, #12
 800886e:	4618      	mov	r0, r3
 8008870:	f7ff f80b 	bl	800788a <BoardCriticalSectionEnd>
}
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	20001254 	.word	0x20001254

08008880 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8008888:	4b0a      	ldr	r3, [pc, #40]	; (80088b4 <TimerExists+0x34>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
 800888e:	e008      	b.n	80088a2 <TimerExists+0x22>
    {
        if( cur == obj )
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	429a      	cmp	r2, r3
 8008896:	d101      	bne.n	800889c <TimerExists+0x1c>
        {
            return true;
 8008898:	2301      	movs	r3, #1
 800889a:	e006      	b.n	80088aa <TimerExists+0x2a>
        }
        cur = cur->Next;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1f3      	bne.n	8008890 <TimerExists+0x10>
    }
    return false;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3714      	adds	r7, #20
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bc80      	pop	{r7}
 80088b2:	4770      	bx	lr
 80088b4:	20001254 	.word	0x20001254

080088b8 <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
    uint32_t minValue = 0;
 80088c2:	2300      	movs	r3, #0
 80088c4:	60bb      	str	r3, [r7, #8]
    uint32_t ticks = RtcMs2Tick( value );
 80088c6:	6838      	ldr	r0, [r7, #0]
 80088c8:	f7ff fa1d 	bl	8007d06 <RtcMs2Tick>
 80088cc:	60f8      	str	r0, [r7, #12]

    TimerStop( obj );
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff ff5c 	bl	800878c <TimerStop>

    minValue = RtcGetMinimumTimeout( );
 80088d4:	f7ff fa10 	bl	8007cf8 <RtcGetMinimumTimeout>
 80088d8:	60b8      	str	r0, [r7, #8]

    if( ticks < minValue )
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d201      	bcs.n	80088e6 <TimerSetValue+0x2e>
    {
        ticks = minValue;
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	60fb      	str	r3, [r7, #12]
    }

    obj->Timestamp = ticks;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = ticks;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	605a      	str	r2, [r3, #4]
}
 80088f2:	bf00      	nop
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
    uint32_t now = RtcGetTimerValue( );
 8008900:	f7ff fb5a 	bl	8007fb8 <RtcGetTimerValue>
 8008904:	6078      	str	r0, [r7, #4]
    return  RtcTick2Ms( now );
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7ff fa1a 	bl	8007d40 <RtcTick2Ms>
 800890c:	4603      	mov	r3, r0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b084      	sub	sp, #16
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
    if ( past == 0 )
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <TimerGetElapsedTime+0x12>
    {
        return 0;
 8008924:	2300      	movs	r3, #0
 8008926:	e00d      	b.n	8008944 <TimerGetElapsedTime+0x2e>
    }
    uint32_t nowInTicks = RtcGetTimerValue( );
 8008928:	f7ff fb46 	bl	8007fb8 <RtcGetTimerValue>
 800892c:	60f8      	str	r0, [r7, #12]
    uint32_t pastInTicks = RtcMs2Tick( past );
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7ff f9e9 	bl	8007d06 <RtcMs2Tick>
 8008934:	60b8      	str	r0, [r7, #8]

    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	4618      	mov	r0, r3
 800893e:	f7ff f9ff 	bl	8007d40 <RtcTick2Ms>
 8008942:	4603      	mov	r3, r0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <TimerSetTimeout>:

static void TimerSetTimeout( TimerEvent_t *obj )
{
 800894c:	b590      	push	{r4, r7, lr}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8008954:	f7ff f9d0 	bl	8007cf8 <RtcGetMinimumTimeout>
 8008958:	4603      	mov	r3, r0
 800895a:	60fb      	str	r3, [r7, #12]
    obj->IsNext2Expire = true;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	725a      	strb	r2, [r3, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681c      	ldr	r4, [r3, #0]
 8008966:	f7ff fb3b 	bl	8007fe0 <RtcGetTimerElapsedTime>
 800896a:	4602      	mov	r2, r0
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	4413      	add	r3, r2
 8008970:	429c      	cmp	r4, r3
 8008972:	d206      	bcs.n	8008982 <TimerSetTimeout+0x36>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 8008974:	f7ff fb34 	bl	8007fe0 <RtcGetTimerElapsedTime>
 8008978:	4602      	mov	r2, r0
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	441a      	add	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	601a      	str	r2, [r3, #0]
    }
    RtcSetAlarm( obj->Timestamp );
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4618      	mov	r0, r3
 8008988:	f7ff f9f6 	bl	8007d78 <RtcSetAlarm>
}
 800898c:	bf00      	nop
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	bd90      	pop	{r4, r7, pc}

08008994 <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	4613      	mov	r3, r2
 80089a0:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80089a2:	e007      	b.n	80089b4 <memcpy1+0x20>
    {
        *dst++ = *src++;
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	1c53      	adds	r3, r2, #1
 80089a8:	60bb      	str	r3, [r7, #8]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	1c59      	adds	r1, r3, #1
 80089ae:	60f9      	str	r1, [r7, #12]
 80089b0:	7812      	ldrb	r2, [r2, #0]
 80089b2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80089b4:	88fb      	ldrh	r3, [r7, #6]
 80089b6:	1e5a      	subs	r2, r3, #1
 80089b8:	80fa      	strh	r2, [r7, #6]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1f2      	bne.n	80089a4 <memcpy1+0x10>
    }
}
 80089be:	bf00      	nop
 80089c0:	bf00      	nop
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bc80      	pop	{r7}
 80089c8:	4770      	bx	lr
	...

080089cc <__errno>:
 80089cc:	4b01      	ldr	r3, [pc, #4]	; (80089d4 <__errno+0x8>)
 80089ce:	6818      	ldr	r0, [r3, #0]
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	2000002c 	.word	0x2000002c

080089d8 <__libc_init_array>:
 80089d8:	b570      	push	{r4, r5, r6, lr}
 80089da:	2600      	movs	r6, #0
 80089dc:	4d0c      	ldr	r5, [pc, #48]	; (8008a10 <__libc_init_array+0x38>)
 80089de:	4c0d      	ldr	r4, [pc, #52]	; (8008a14 <__libc_init_array+0x3c>)
 80089e0:	1b64      	subs	r4, r4, r5
 80089e2:	10a4      	asrs	r4, r4, #2
 80089e4:	42a6      	cmp	r6, r4
 80089e6:	d109      	bne.n	80089fc <__libc_init_array+0x24>
 80089e8:	f001 f954 	bl	8009c94 <_init>
 80089ec:	2600      	movs	r6, #0
 80089ee:	4d0a      	ldr	r5, [pc, #40]	; (8008a18 <__libc_init_array+0x40>)
 80089f0:	4c0a      	ldr	r4, [pc, #40]	; (8008a1c <__libc_init_array+0x44>)
 80089f2:	1b64      	subs	r4, r4, r5
 80089f4:	10a4      	asrs	r4, r4, #2
 80089f6:	42a6      	cmp	r6, r4
 80089f8:	d105      	bne.n	8008a06 <__libc_init_array+0x2e>
 80089fa:	bd70      	pop	{r4, r5, r6, pc}
 80089fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a00:	4798      	blx	r3
 8008a02:	3601      	adds	r6, #1
 8008a04:	e7ee      	b.n	80089e4 <__libc_init_array+0xc>
 8008a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a0a:	4798      	blx	r3
 8008a0c:	3601      	adds	r6, #1
 8008a0e:	e7f2      	b.n	80089f6 <__libc_init_array+0x1e>
 8008a10:	08009f88 	.word	0x08009f88
 8008a14:	08009f88 	.word	0x08009f88
 8008a18:	08009f88 	.word	0x08009f88
 8008a1c:	08009f8c 	.word	0x08009f8c

08008a20 <memcpy>:
 8008a20:	440a      	add	r2, r1
 8008a22:	4291      	cmp	r1, r2
 8008a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a28:	d100      	bne.n	8008a2c <memcpy+0xc>
 8008a2a:	4770      	bx	lr
 8008a2c:	b510      	push	{r4, lr}
 8008a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a32:	4291      	cmp	r1, r2
 8008a34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a38:	d1f9      	bne.n	8008a2e <memcpy+0xe>
 8008a3a:	bd10      	pop	{r4, pc}

08008a3c <memset>:
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	4402      	add	r2, r0
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d100      	bne.n	8008a46 <memset+0xa>
 8008a44:	4770      	bx	lr
 8008a46:	f803 1b01 	strb.w	r1, [r3], #1
 8008a4a:	e7f9      	b.n	8008a40 <memset+0x4>

08008a4c <iprintf>:
 8008a4c:	b40f      	push	{r0, r1, r2, r3}
 8008a4e:	4b0a      	ldr	r3, [pc, #40]	; (8008a78 <iprintf+0x2c>)
 8008a50:	b513      	push	{r0, r1, r4, lr}
 8008a52:	681c      	ldr	r4, [r3, #0]
 8008a54:	b124      	cbz	r4, 8008a60 <iprintf+0x14>
 8008a56:	69a3      	ldr	r3, [r4, #24]
 8008a58:	b913      	cbnz	r3, 8008a60 <iprintf+0x14>
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 f886 	bl	8008b6c <__sinit>
 8008a60:	ab05      	add	r3, sp, #20
 8008a62:	4620      	mov	r0, r4
 8008a64:	9a04      	ldr	r2, [sp, #16]
 8008a66:	68a1      	ldr	r1, [r4, #8]
 8008a68:	9301      	str	r3, [sp, #4]
 8008a6a:	f000 fafd 	bl	8009068 <_vfiprintf_r>
 8008a6e:	b002      	add	sp, #8
 8008a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a74:	b004      	add	sp, #16
 8008a76:	4770      	bx	lr
 8008a78:	2000002c 	.word	0x2000002c

08008a7c <siprintf>:
 8008a7c:	b40e      	push	{r1, r2, r3}
 8008a7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a82:	b500      	push	{lr}
 8008a84:	b09c      	sub	sp, #112	; 0x70
 8008a86:	ab1d      	add	r3, sp, #116	; 0x74
 8008a88:	9002      	str	r0, [sp, #8]
 8008a8a:	9006      	str	r0, [sp, #24]
 8008a8c:	9107      	str	r1, [sp, #28]
 8008a8e:	9104      	str	r1, [sp, #16]
 8008a90:	4808      	ldr	r0, [pc, #32]	; (8008ab4 <siprintf+0x38>)
 8008a92:	4909      	ldr	r1, [pc, #36]	; (8008ab8 <siprintf+0x3c>)
 8008a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a98:	9105      	str	r1, [sp, #20]
 8008a9a:	6800      	ldr	r0, [r0, #0]
 8008a9c:	a902      	add	r1, sp, #8
 8008a9e:	9301      	str	r3, [sp, #4]
 8008aa0:	f000 f9ba 	bl	8008e18 <_svfiprintf_r>
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	9b02      	ldr	r3, [sp, #8]
 8008aa8:	701a      	strb	r2, [r3, #0]
 8008aaa:	b01c      	add	sp, #112	; 0x70
 8008aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ab0:	b003      	add	sp, #12
 8008ab2:	4770      	bx	lr
 8008ab4:	2000002c 	.word	0x2000002c
 8008ab8:	ffff0208 	.word	0xffff0208

08008abc <std>:
 8008abc:	2300      	movs	r3, #0
 8008abe:	b510      	push	{r4, lr}
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008aca:	6083      	str	r3, [r0, #8]
 8008acc:	8181      	strh	r1, [r0, #12]
 8008ace:	6643      	str	r3, [r0, #100]	; 0x64
 8008ad0:	81c2      	strh	r2, [r0, #14]
 8008ad2:	6183      	str	r3, [r0, #24]
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	2208      	movs	r2, #8
 8008ad8:	305c      	adds	r0, #92	; 0x5c
 8008ada:	f7ff ffaf 	bl	8008a3c <memset>
 8008ade:	4b05      	ldr	r3, [pc, #20]	; (8008af4 <std+0x38>)
 8008ae0:	6224      	str	r4, [r4, #32]
 8008ae2:	6263      	str	r3, [r4, #36]	; 0x24
 8008ae4:	4b04      	ldr	r3, [pc, #16]	; (8008af8 <std+0x3c>)
 8008ae6:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ae8:	4b04      	ldr	r3, [pc, #16]	; (8008afc <std+0x40>)
 8008aea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008aec:	4b04      	ldr	r3, [pc, #16]	; (8008b00 <std+0x44>)
 8008aee:	6323      	str	r3, [r4, #48]	; 0x30
 8008af0:	bd10      	pop	{r4, pc}
 8008af2:	bf00      	nop
 8008af4:	08009615 	.word	0x08009615
 8008af8:	08009637 	.word	0x08009637
 8008afc:	0800966f 	.word	0x0800966f
 8008b00:	08009693 	.word	0x08009693

08008b04 <_cleanup_r>:
 8008b04:	4901      	ldr	r1, [pc, #4]	; (8008b0c <_cleanup_r+0x8>)
 8008b06:	f000 b8af 	b.w	8008c68 <_fwalk_reent>
 8008b0a:	bf00      	nop
 8008b0c:	0800996d 	.word	0x0800996d

08008b10 <__sfmoreglue>:
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	2568      	movs	r5, #104	; 0x68
 8008b14:	1e4a      	subs	r2, r1, #1
 8008b16:	4355      	muls	r5, r2
 8008b18:	460e      	mov	r6, r1
 8008b1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b1e:	f000 f8c5 	bl	8008cac <_malloc_r>
 8008b22:	4604      	mov	r4, r0
 8008b24:	b140      	cbz	r0, 8008b38 <__sfmoreglue+0x28>
 8008b26:	2100      	movs	r1, #0
 8008b28:	e9c0 1600 	strd	r1, r6, [r0]
 8008b2c:	300c      	adds	r0, #12
 8008b2e:	60a0      	str	r0, [r4, #8]
 8008b30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b34:	f7ff ff82 	bl	8008a3c <memset>
 8008b38:	4620      	mov	r0, r4
 8008b3a:	bd70      	pop	{r4, r5, r6, pc}

08008b3c <__sfp_lock_acquire>:
 8008b3c:	4801      	ldr	r0, [pc, #4]	; (8008b44 <__sfp_lock_acquire+0x8>)
 8008b3e:	f000 b8b3 	b.w	8008ca8 <__retarget_lock_acquire_recursive>
 8008b42:	bf00      	nop
 8008b44:	200014e4 	.word	0x200014e4

08008b48 <__sfp_lock_release>:
 8008b48:	4801      	ldr	r0, [pc, #4]	; (8008b50 <__sfp_lock_release+0x8>)
 8008b4a:	f000 b8ae 	b.w	8008caa <__retarget_lock_release_recursive>
 8008b4e:	bf00      	nop
 8008b50:	200014e4 	.word	0x200014e4

08008b54 <__sinit_lock_acquire>:
 8008b54:	4801      	ldr	r0, [pc, #4]	; (8008b5c <__sinit_lock_acquire+0x8>)
 8008b56:	f000 b8a7 	b.w	8008ca8 <__retarget_lock_acquire_recursive>
 8008b5a:	bf00      	nop
 8008b5c:	200014df 	.word	0x200014df

08008b60 <__sinit_lock_release>:
 8008b60:	4801      	ldr	r0, [pc, #4]	; (8008b68 <__sinit_lock_release+0x8>)
 8008b62:	f000 b8a2 	b.w	8008caa <__retarget_lock_release_recursive>
 8008b66:	bf00      	nop
 8008b68:	200014df 	.word	0x200014df

08008b6c <__sinit>:
 8008b6c:	b510      	push	{r4, lr}
 8008b6e:	4604      	mov	r4, r0
 8008b70:	f7ff fff0 	bl	8008b54 <__sinit_lock_acquire>
 8008b74:	69a3      	ldr	r3, [r4, #24]
 8008b76:	b11b      	cbz	r3, 8008b80 <__sinit+0x14>
 8008b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b7c:	f7ff bff0 	b.w	8008b60 <__sinit_lock_release>
 8008b80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b84:	6523      	str	r3, [r4, #80]	; 0x50
 8008b86:	4b13      	ldr	r3, [pc, #76]	; (8008bd4 <__sinit+0x68>)
 8008b88:	4a13      	ldr	r2, [pc, #76]	; (8008bd8 <__sinit+0x6c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b8e:	42a3      	cmp	r3, r4
 8008b90:	bf08      	it	eq
 8008b92:	2301      	moveq	r3, #1
 8008b94:	4620      	mov	r0, r4
 8008b96:	bf08      	it	eq
 8008b98:	61a3      	streq	r3, [r4, #24]
 8008b9a:	f000 f81f 	bl	8008bdc <__sfp>
 8008b9e:	6060      	str	r0, [r4, #4]
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 f81b 	bl	8008bdc <__sfp>
 8008ba6:	60a0      	str	r0, [r4, #8]
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f000 f817 	bl	8008bdc <__sfp>
 8008bae:	2200      	movs	r2, #0
 8008bb0:	2104      	movs	r1, #4
 8008bb2:	60e0      	str	r0, [r4, #12]
 8008bb4:	6860      	ldr	r0, [r4, #4]
 8008bb6:	f7ff ff81 	bl	8008abc <std>
 8008bba:	2201      	movs	r2, #1
 8008bbc:	2109      	movs	r1, #9
 8008bbe:	68a0      	ldr	r0, [r4, #8]
 8008bc0:	f7ff ff7c 	bl	8008abc <std>
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	2112      	movs	r1, #18
 8008bc8:	68e0      	ldr	r0, [r4, #12]
 8008bca:	f7ff ff77 	bl	8008abc <std>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	61a3      	str	r3, [r4, #24]
 8008bd2:	e7d1      	b.n	8008b78 <__sinit+0xc>
 8008bd4:	08009ee8 	.word	0x08009ee8
 8008bd8:	08008b05 	.word	0x08008b05

08008bdc <__sfp>:
 8008bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bde:	4607      	mov	r7, r0
 8008be0:	f7ff ffac 	bl	8008b3c <__sfp_lock_acquire>
 8008be4:	4b1e      	ldr	r3, [pc, #120]	; (8008c60 <__sfp+0x84>)
 8008be6:	681e      	ldr	r6, [r3, #0]
 8008be8:	69b3      	ldr	r3, [r6, #24]
 8008bea:	b913      	cbnz	r3, 8008bf2 <__sfp+0x16>
 8008bec:	4630      	mov	r0, r6
 8008bee:	f7ff ffbd 	bl	8008b6c <__sinit>
 8008bf2:	3648      	adds	r6, #72	; 0x48
 8008bf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	d503      	bpl.n	8008c04 <__sfp+0x28>
 8008bfc:	6833      	ldr	r3, [r6, #0]
 8008bfe:	b30b      	cbz	r3, 8008c44 <__sfp+0x68>
 8008c00:	6836      	ldr	r6, [r6, #0]
 8008c02:	e7f7      	b.n	8008bf4 <__sfp+0x18>
 8008c04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c08:	b9d5      	cbnz	r5, 8008c40 <__sfp+0x64>
 8008c0a:	4b16      	ldr	r3, [pc, #88]	; (8008c64 <__sfp+0x88>)
 8008c0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c10:	60e3      	str	r3, [r4, #12]
 8008c12:	6665      	str	r5, [r4, #100]	; 0x64
 8008c14:	f000 f847 	bl	8008ca6 <__retarget_lock_init_recursive>
 8008c18:	f7ff ff96 	bl	8008b48 <__sfp_lock_release>
 8008c1c:	2208      	movs	r2, #8
 8008c1e:	4629      	mov	r1, r5
 8008c20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c28:	6025      	str	r5, [r4, #0]
 8008c2a:	61a5      	str	r5, [r4, #24]
 8008c2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c30:	f7ff ff04 	bl	8008a3c <memset>
 8008c34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c40:	3468      	adds	r4, #104	; 0x68
 8008c42:	e7d9      	b.n	8008bf8 <__sfp+0x1c>
 8008c44:	2104      	movs	r1, #4
 8008c46:	4638      	mov	r0, r7
 8008c48:	f7ff ff62 	bl	8008b10 <__sfmoreglue>
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	6030      	str	r0, [r6, #0]
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d1d5      	bne.n	8008c00 <__sfp+0x24>
 8008c54:	f7ff ff78 	bl	8008b48 <__sfp_lock_release>
 8008c58:	230c      	movs	r3, #12
 8008c5a:	603b      	str	r3, [r7, #0]
 8008c5c:	e7ee      	b.n	8008c3c <__sfp+0x60>
 8008c5e:	bf00      	nop
 8008c60:	08009ee8 	.word	0x08009ee8
 8008c64:	ffff0001 	.word	0xffff0001

08008c68 <_fwalk_reent>:
 8008c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c6c:	4606      	mov	r6, r0
 8008c6e:	4688      	mov	r8, r1
 8008c70:	2700      	movs	r7, #0
 8008c72:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c7a:	f1b9 0901 	subs.w	r9, r9, #1
 8008c7e:	d505      	bpl.n	8008c8c <_fwalk_reent+0x24>
 8008c80:	6824      	ldr	r4, [r4, #0]
 8008c82:	2c00      	cmp	r4, #0
 8008c84:	d1f7      	bne.n	8008c76 <_fwalk_reent+0xe>
 8008c86:	4638      	mov	r0, r7
 8008c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c8c:	89ab      	ldrh	r3, [r5, #12]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d907      	bls.n	8008ca2 <_fwalk_reent+0x3a>
 8008c92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c96:	3301      	adds	r3, #1
 8008c98:	d003      	beq.n	8008ca2 <_fwalk_reent+0x3a>
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	47c0      	blx	r8
 8008ca0:	4307      	orrs	r7, r0
 8008ca2:	3568      	adds	r5, #104	; 0x68
 8008ca4:	e7e9      	b.n	8008c7a <_fwalk_reent+0x12>

08008ca6 <__retarget_lock_init_recursive>:
 8008ca6:	4770      	bx	lr

08008ca8 <__retarget_lock_acquire_recursive>:
 8008ca8:	4770      	bx	lr

08008caa <__retarget_lock_release_recursive>:
 8008caa:	4770      	bx	lr

08008cac <_malloc_r>:
 8008cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cae:	1ccd      	adds	r5, r1, #3
 8008cb0:	f025 0503 	bic.w	r5, r5, #3
 8008cb4:	3508      	adds	r5, #8
 8008cb6:	2d0c      	cmp	r5, #12
 8008cb8:	bf38      	it	cc
 8008cba:	250c      	movcc	r5, #12
 8008cbc:	2d00      	cmp	r5, #0
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	db01      	blt.n	8008cc6 <_malloc_r+0x1a>
 8008cc2:	42a9      	cmp	r1, r5
 8008cc4:	d903      	bls.n	8008cce <_malloc_r+0x22>
 8008cc6:	230c      	movs	r3, #12
 8008cc8:	6033      	str	r3, [r6, #0]
 8008cca:	2000      	movs	r0, #0
 8008ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cce:	f000 ff27 	bl	8009b20 <__malloc_lock>
 8008cd2:	4921      	ldr	r1, [pc, #132]	; (8008d58 <_malloc_r+0xac>)
 8008cd4:	680a      	ldr	r2, [r1, #0]
 8008cd6:	4614      	mov	r4, r2
 8008cd8:	b99c      	cbnz	r4, 8008d02 <_malloc_r+0x56>
 8008cda:	4f20      	ldr	r7, [pc, #128]	; (8008d5c <_malloc_r+0xb0>)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	b923      	cbnz	r3, 8008cea <_malloc_r+0x3e>
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f000 fc86 	bl	80095f4 <_sbrk_r>
 8008ce8:	6038      	str	r0, [r7, #0]
 8008cea:	4629      	mov	r1, r5
 8008cec:	4630      	mov	r0, r6
 8008cee:	f000 fc81 	bl	80095f4 <_sbrk_r>
 8008cf2:	1c43      	adds	r3, r0, #1
 8008cf4:	d123      	bne.n	8008d3e <_malloc_r+0x92>
 8008cf6:	230c      	movs	r3, #12
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	6033      	str	r3, [r6, #0]
 8008cfc:	f000 ff16 	bl	8009b2c <__malloc_unlock>
 8008d00:	e7e3      	b.n	8008cca <_malloc_r+0x1e>
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	1b5b      	subs	r3, r3, r5
 8008d06:	d417      	bmi.n	8008d38 <_malloc_r+0x8c>
 8008d08:	2b0b      	cmp	r3, #11
 8008d0a:	d903      	bls.n	8008d14 <_malloc_r+0x68>
 8008d0c:	6023      	str	r3, [r4, #0]
 8008d0e:	441c      	add	r4, r3
 8008d10:	6025      	str	r5, [r4, #0]
 8008d12:	e004      	b.n	8008d1e <_malloc_r+0x72>
 8008d14:	6863      	ldr	r3, [r4, #4]
 8008d16:	42a2      	cmp	r2, r4
 8008d18:	bf0c      	ite	eq
 8008d1a:	600b      	streq	r3, [r1, #0]
 8008d1c:	6053      	strne	r3, [r2, #4]
 8008d1e:	4630      	mov	r0, r6
 8008d20:	f000 ff04 	bl	8009b2c <__malloc_unlock>
 8008d24:	f104 000b 	add.w	r0, r4, #11
 8008d28:	1d23      	adds	r3, r4, #4
 8008d2a:	f020 0007 	bic.w	r0, r0, #7
 8008d2e:	1ac2      	subs	r2, r0, r3
 8008d30:	d0cc      	beq.n	8008ccc <_malloc_r+0x20>
 8008d32:	1a1b      	subs	r3, r3, r0
 8008d34:	50a3      	str	r3, [r4, r2]
 8008d36:	e7c9      	b.n	8008ccc <_malloc_r+0x20>
 8008d38:	4622      	mov	r2, r4
 8008d3a:	6864      	ldr	r4, [r4, #4]
 8008d3c:	e7cc      	b.n	8008cd8 <_malloc_r+0x2c>
 8008d3e:	1cc4      	adds	r4, r0, #3
 8008d40:	f024 0403 	bic.w	r4, r4, #3
 8008d44:	42a0      	cmp	r0, r4
 8008d46:	d0e3      	beq.n	8008d10 <_malloc_r+0x64>
 8008d48:	1a21      	subs	r1, r4, r0
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f000 fc52 	bl	80095f4 <_sbrk_r>
 8008d50:	3001      	adds	r0, #1
 8008d52:	d1dd      	bne.n	8008d10 <_malloc_r+0x64>
 8008d54:	e7cf      	b.n	8008cf6 <_malloc_r+0x4a>
 8008d56:	bf00      	nop
 8008d58:	20001258 	.word	0x20001258
 8008d5c:	2000125c 	.word	0x2000125c

08008d60 <__ssputs_r>:
 8008d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d64:	688e      	ldr	r6, [r1, #8]
 8008d66:	4682      	mov	sl, r0
 8008d68:	429e      	cmp	r6, r3
 8008d6a:	460c      	mov	r4, r1
 8008d6c:	4690      	mov	r8, r2
 8008d6e:	461f      	mov	r7, r3
 8008d70:	d838      	bhi.n	8008de4 <__ssputs_r+0x84>
 8008d72:	898a      	ldrh	r2, [r1, #12]
 8008d74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d78:	d032      	beq.n	8008de0 <__ssputs_r+0x80>
 8008d7a:	6825      	ldr	r5, [r4, #0]
 8008d7c:	6909      	ldr	r1, [r1, #16]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	eba5 0901 	sub.w	r9, r5, r1
 8008d84:	6965      	ldr	r5, [r4, #20]
 8008d86:	444b      	add	r3, r9
 8008d88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d90:	106d      	asrs	r5, r5, #1
 8008d92:	429d      	cmp	r5, r3
 8008d94:	bf38      	it	cc
 8008d96:	461d      	movcc	r5, r3
 8008d98:	0553      	lsls	r3, r2, #21
 8008d9a:	d531      	bpl.n	8008e00 <__ssputs_r+0xa0>
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	f7ff ff85 	bl	8008cac <_malloc_r>
 8008da2:	4606      	mov	r6, r0
 8008da4:	b950      	cbnz	r0, 8008dbc <__ssputs_r+0x5c>
 8008da6:	230c      	movs	r3, #12
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dac:	f8ca 3000 	str.w	r3, [sl]
 8008db0:	89a3      	ldrh	r3, [r4, #12]
 8008db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db6:	81a3      	strh	r3, [r4, #12]
 8008db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dbc:	464a      	mov	r2, r9
 8008dbe:	6921      	ldr	r1, [r4, #16]
 8008dc0:	f7ff fe2e 	bl	8008a20 <memcpy>
 8008dc4:	89a3      	ldrh	r3, [r4, #12]
 8008dc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dce:	81a3      	strh	r3, [r4, #12]
 8008dd0:	6126      	str	r6, [r4, #16]
 8008dd2:	444e      	add	r6, r9
 8008dd4:	6026      	str	r6, [r4, #0]
 8008dd6:	463e      	mov	r6, r7
 8008dd8:	6165      	str	r5, [r4, #20]
 8008dda:	eba5 0509 	sub.w	r5, r5, r9
 8008dde:	60a5      	str	r5, [r4, #8]
 8008de0:	42be      	cmp	r6, r7
 8008de2:	d900      	bls.n	8008de6 <__ssputs_r+0x86>
 8008de4:	463e      	mov	r6, r7
 8008de6:	4632      	mov	r2, r6
 8008de8:	4641      	mov	r1, r8
 8008dea:	6820      	ldr	r0, [r4, #0]
 8008dec:	f000 fe7e 	bl	8009aec <memmove>
 8008df0:	68a3      	ldr	r3, [r4, #8]
 8008df2:	6822      	ldr	r2, [r4, #0]
 8008df4:	1b9b      	subs	r3, r3, r6
 8008df6:	4432      	add	r2, r6
 8008df8:	2000      	movs	r0, #0
 8008dfa:	60a3      	str	r3, [r4, #8]
 8008dfc:	6022      	str	r2, [r4, #0]
 8008dfe:	e7db      	b.n	8008db8 <__ssputs_r+0x58>
 8008e00:	462a      	mov	r2, r5
 8008e02:	f000 fee5 	bl	8009bd0 <_realloc_r>
 8008e06:	4606      	mov	r6, r0
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d1e1      	bne.n	8008dd0 <__ssputs_r+0x70>
 8008e0c:	4650      	mov	r0, sl
 8008e0e:	6921      	ldr	r1, [r4, #16]
 8008e10:	f000 fe92 	bl	8009b38 <_free_r>
 8008e14:	e7c7      	b.n	8008da6 <__ssputs_r+0x46>
	...

08008e18 <_svfiprintf_r>:
 8008e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e1c:	4698      	mov	r8, r3
 8008e1e:	898b      	ldrh	r3, [r1, #12]
 8008e20:	4607      	mov	r7, r0
 8008e22:	061b      	lsls	r3, r3, #24
 8008e24:	460d      	mov	r5, r1
 8008e26:	4614      	mov	r4, r2
 8008e28:	b09d      	sub	sp, #116	; 0x74
 8008e2a:	d50e      	bpl.n	8008e4a <_svfiprintf_r+0x32>
 8008e2c:	690b      	ldr	r3, [r1, #16]
 8008e2e:	b963      	cbnz	r3, 8008e4a <_svfiprintf_r+0x32>
 8008e30:	2140      	movs	r1, #64	; 0x40
 8008e32:	f7ff ff3b 	bl	8008cac <_malloc_r>
 8008e36:	6028      	str	r0, [r5, #0]
 8008e38:	6128      	str	r0, [r5, #16]
 8008e3a:	b920      	cbnz	r0, 8008e46 <_svfiprintf_r+0x2e>
 8008e3c:	230c      	movs	r3, #12
 8008e3e:	603b      	str	r3, [r7, #0]
 8008e40:	f04f 30ff 	mov.w	r0, #4294967295
 8008e44:	e0d1      	b.n	8008fea <_svfiprintf_r+0x1d2>
 8008e46:	2340      	movs	r3, #64	; 0x40
 8008e48:	616b      	str	r3, [r5, #20]
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e4e:	2320      	movs	r3, #32
 8008e50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e54:	2330      	movs	r3, #48	; 0x30
 8008e56:	f04f 0901 	mov.w	r9, #1
 8008e5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e5e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009004 <_svfiprintf_r+0x1ec>
 8008e62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e66:	4623      	mov	r3, r4
 8008e68:	469a      	mov	sl, r3
 8008e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e6e:	b10a      	cbz	r2, 8008e74 <_svfiprintf_r+0x5c>
 8008e70:	2a25      	cmp	r2, #37	; 0x25
 8008e72:	d1f9      	bne.n	8008e68 <_svfiprintf_r+0x50>
 8008e74:	ebba 0b04 	subs.w	fp, sl, r4
 8008e78:	d00b      	beq.n	8008e92 <_svfiprintf_r+0x7a>
 8008e7a:	465b      	mov	r3, fp
 8008e7c:	4622      	mov	r2, r4
 8008e7e:	4629      	mov	r1, r5
 8008e80:	4638      	mov	r0, r7
 8008e82:	f7ff ff6d 	bl	8008d60 <__ssputs_r>
 8008e86:	3001      	adds	r0, #1
 8008e88:	f000 80aa 	beq.w	8008fe0 <_svfiprintf_r+0x1c8>
 8008e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e8e:	445a      	add	r2, fp
 8008e90:	9209      	str	r2, [sp, #36]	; 0x24
 8008e92:	f89a 3000 	ldrb.w	r3, [sl]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f000 80a2 	beq.w	8008fe0 <_svfiprintf_r+0x1c8>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ea6:	f10a 0a01 	add.w	sl, sl, #1
 8008eaa:	9304      	str	r3, [sp, #16]
 8008eac:	9307      	str	r3, [sp, #28]
 8008eae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008eb2:	931a      	str	r3, [sp, #104]	; 0x68
 8008eb4:	4654      	mov	r4, sl
 8008eb6:	2205      	movs	r2, #5
 8008eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ebc:	4851      	ldr	r0, [pc, #324]	; (8009004 <_svfiprintf_r+0x1ec>)
 8008ebe:	f000 fe07 	bl	8009ad0 <memchr>
 8008ec2:	9a04      	ldr	r2, [sp, #16]
 8008ec4:	b9d8      	cbnz	r0, 8008efe <_svfiprintf_r+0xe6>
 8008ec6:	06d0      	lsls	r0, r2, #27
 8008ec8:	bf44      	itt	mi
 8008eca:	2320      	movmi	r3, #32
 8008ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ed0:	0711      	lsls	r1, r2, #28
 8008ed2:	bf44      	itt	mi
 8008ed4:	232b      	movmi	r3, #43	; 0x2b
 8008ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eda:	f89a 3000 	ldrb.w	r3, [sl]
 8008ede:	2b2a      	cmp	r3, #42	; 0x2a
 8008ee0:	d015      	beq.n	8008f0e <_svfiprintf_r+0xf6>
 8008ee2:	4654      	mov	r4, sl
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	f04f 0c0a 	mov.w	ip, #10
 8008eea:	9a07      	ldr	r2, [sp, #28]
 8008eec:	4621      	mov	r1, r4
 8008eee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ef2:	3b30      	subs	r3, #48	; 0x30
 8008ef4:	2b09      	cmp	r3, #9
 8008ef6:	d94e      	bls.n	8008f96 <_svfiprintf_r+0x17e>
 8008ef8:	b1b0      	cbz	r0, 8008f28 <_svfiprintf_r+0x110>
 8008efa:	9207      	str	r2, [sp, #28]
 8008efc:	e014      	b.n	8008f28 <_svfiprintf_r+0x110>
 8008efe:	eba0 0308 	sub.w	r3, r0, r8
 8008f02:	fa09 f303 	lsl.w	r3, r9, r3
 8008f06:	4313      	orrs	r3, r2
 8008f08:	46a2      	mov	sl, r4
 8008f0a:	9304      	str	r3, [sp, #16]
 8008f0c:	e7d2      	b.n	8008eb4 <_svfiprintf_r+0x9c>
 8008f0e:	9b03      	ldr	r3, [sp, #12]
 8008f10:	1d19      	adds	r1, r3, #4
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	9103      	str	r1, [sp, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	bfbb      	ittet	lt
 8008f1a:	425b      	neglt	r3, r3
 8008f1c:	f042 0202 	orrlt.w	r2, r2, #2
 8008f20:	9307      	strge	r3, [sp, #28]
 8008f22:	9307      	strlt	r3, [sp, #28]
 8008f24:	bfb8      	it	lt
 8008f26:	9204      	strlt	r2, [sp, #16]
 8008f28:	7823      	ldrb	r3, [r4, #0]
 8008f2a:	2b2e      	cmp	r3, #46	; 0x2e
 8008f2c:	d10c      	bne.n	8008f48 <_svfiprintf_r+0x130>
 8008f2e:	7863      	ldrb	r3, [r4, #1]
 8008f30:	2b2a      	cmp	r3, #42	; 0x2a
 8008f32:	d135      	bne.n	8008fa0 <_svfiprintf_r+0x188>
 8008f34:	9b03      	ldr	r3, [sp, #12]
 8008f36:	3402      	adds	r4, #2
 8008f38:	1d1a      	adds	r2, r3, #4
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	9203      	str	r2, [sp, #12]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	bfb8      	it	lt
 8008f42:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f46:	9305      	str	r3, [sp, #20]
 8008f48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009014 <_svfiprintf_r+0x1fc>
 8008f4c:	2203      	movs	r2, #3
 8008f4e:	4650      	mov	r0, sl
 8008f50:	7821      	ldrb	r1, [r4, #0]
 8008f52:	f000 fdbd 	bl	8009ad0 <memchr>
 8008f56:	b140      	cbz	r0, 8008f6a <_svfiprintf_r+0x152>
 8008f58:	2340      	movs	r3, #64	; 0x40
 8008f5a:	eba0 000a 	sub.w	r0, r0, sl
 8008f5e:	fa03 f000 	lsl.w	r0, r3, r0
 8008f62:	9b04      	ldr	r3, [sp, #16]
 8008f64:	3401      	adds	r4, #1
 8008f66:	4303      	orrs	r3, r0
 8008f68:	9304      	str	r3, [sp, #16]
 8008f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f6e:	2206      	movs	r2, #6
 8008f70:	4825      	ldr	r0, [pc, #148]	; (8009008 <_svfiprintf_r+0x1f0>)
 8008f72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f76:	f000 fdab 	bl	8009ad0 <memchr>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d038      	beq.n	8008ff0 <_svfiprintf_r+0x1d8>
 8008f7e:	4b23      	ldr	r3, [pc, #140]	; (800900c <_svfiprintf_r+0x1f4>)
 8008f80:	bb1b      	cbnz	r3, 8008fca <_svfiprintf_r+0x1b2>
 8008f82:	9b03      	ldr	r3, [sp, #12]
 8008f84:	3307      	adds	r3, #7
 8008f86:	f023 0307 	bic.w	r3, r3, #7
 8008f8a:	3308      	adds	r3, #8
 8008f8c:	9303      	str	r3, [sp, #12]
 8008f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f90:	4433      	add	r3, r6
 8008f92:	9309      	str	r3, [sp, #36]	; 0x24
 8008f94:	e767      	b.n	8008e66 <_svfiprintf_r+0x4e>
 8008f96:	460c      	mov	r4, r1
 8008f98:	2001      	movs	r0, #1
 8008f9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f9e:	e7a5      	b.n	8008eec <_svfiprintf_r+0xd4>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f04f 0c0a 	mov.w	ip, #10
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	3401      	adds	r4, #1
 8008faa:	9305      	str	r3, [sp, #20]
 8008fac:	4620      	mov	r0, r4
 8008fae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fb2:	3a30      	subs	r2, #48	; 0x30
 8008fb4:	2a09      	cmp	r2, #9
 8008fb6:	d903      	bls.n	8008fc0 <_svfiprintf_r+0x1a8>
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d0c5      	beq.n	8008f48 <_svfiprintf_r+0x130>
 8008fbc:	9105      	str	r1, [sp, #20]
 8008fbe:	e7c3      	b.n	8008f48 <_svfiprintf_r+0x130>
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fc8:	e7f0      	b.n	8008fac <_svfiprintf_r+0x194>
 8008fca:	ab03      	add	r3, sp, #12
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	462a      	mov	r2, r5
 8008fd0:	4638      	mov	r0, r7
 8008fd2:	4b0f      	ldr	r3, [pc, #60]	; (8009010 <_svfiprintf_r+0x1f8>)
 8008fd4:	a904      	add	r1, sp, #16
 8008fd6:	f3af 8000 	nop.w
 8008fda:	1c42      	adds	r2, r0, #1
 8008fdc:	4606      	mov	r6, r0
 8008fde:	d1d6      	bne.n	8008f8e <_svfiprintf_r+0x176>
 8008fe0:	89ab      	ldrh	r3, [r5, #12]
 8008fe2:	065b      	lsls	r3, r3, #25
 8008fe4:	f53f af2c 	bmi.w	8008e40 <_svfiprintf_r+0x28>
 8008fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fea:	b01d      	add	sp, #116	; 0x74
 8008fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff0:	ab03      	add	r3, sp, #12
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	462a      	mov	r2, r5
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	4b05      	ldr	r3, [pc, #20]	; (8009010 <_svfiprintf_r+0x1f8>)
 8008ffa:	a904      	add	r1, sp, #16
 8008ffc:	f000 f9d4 	bl	80093a8 <_printf_i>
 8009000:	e7eb      	b.n	8008fda <_svfiprintf_r+0x1c2>
 8009002:	bf00      	nop
 8009004:	08009f4c 	.word	0x08009f4c
 8009008:	08009f56 	.word	0x08009f56
 800900c:	00000000 	.word	0x00000000
 8009010:	08008d61 	.word	0x08008d61
 8009014:	08009f52 	.word	0x08009f52

08009018 <__sfputc_r>:
 8009018:	6893      	ldr	r3, [r2, #8]
 800901a:	b410      	push	{r4}
 800901c:	3b01      	subs	r3, #1
 800901e:	2b00      	cmp	r3, #0
 8009020:	6093      	str	r3, [r2, #8]
 8009022:	da07      	bge.n	8009034 <__sfputc_r+0x1c>
 8009024:	6994      	ldr	r4, [r2, #24]
 8009026:	42a3      	cmp	r3, r4
 8009028:	db01      	blt.n	800902e <__sfputc_r+0x16>
 800902a:	290a      	cmp	r1, #10
 800902c:	d102      	bne.n	8009034 <__sfputc_r+0x1c>
 800902e:	bc10      	pop	{r4}
 8009030:	f000 bb34 	b.w	800969c <__swbuf_r>
 8009034:	6813      	ldr	r3, [r2, #0]
 8009036:	1c58      	adds	r0, r3, #1
 8009038:	6010      	str	r0, [r2, #0]
 800903a:	7019      	strb	r1, [r3, #0]
 800903c:	4608      	mov	r0, r1
 800903e:	bc10      	pop	{r4}
 8009040:	4770      	bx	lr

08009042 <__sfputs_r>:
 8009042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009044:	4606      	mov	r6, r0
 8009046:	460f      	mov	r7, r1
 8009048:	4614      	mov	r4, r2
 800904a:	18d5      	adds	r5, r2, r3
 800904c:	42ac      	cmp	r4, r5
 800904e:	d101      	bne.n	8009054 <__sfputs_r+0x12>
 8009050:	2000      	movs	r0, #0
 8009052:	e007      	b.n	8009064 <__sfputs_r+0x22>
 8009054:	463a      	mov	r2, r7
 8009056:	4630      	mov	r0, r6
 8009058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800905c:	f7ff ffdc 	bl	8009018 <__sfputc_r>
 8009060:	1c43      	adds	r3, r0, #1
 8009062:	d1f3      	bne.n	800904c <__sfputs_r+0xa>
 8009064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009068 <_vfiprintf_r>:
 8009068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906c:	460d      	mov	r5, r1
 800906e:	4614      	mov	r4, r2
 8009070:	4698      	mov	r8, r3
 8009072:	4606      	mov	r6, r0
 8009074:	b09d      	sub	sp, #116	; 0x74
 8009076:	b118      	cbz	r0, 8009080 <_vfiprintf_r+0x18>
 8009078:	6983      	ldr	r3, [r0, #24]
 800907a:	b90b      	cbnz	r3, 8009080 <_vfiprintf_r+0x18>
 800907c:	f7ff fd76 	bl	8008b6c <__sinit>
 8009080:	4b89      	ldr	r3, [pc, #548]	; (80092a8 <_vfiprintf_r+0x240>)
 8009082:	429d      	cmp	r5, r3
 8009084:	d11b      	bne.n	80090be <_vfiprintf_r+0x56>
 8009086:	6875      	ldr	r5, [r6, #4]
 8009088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800908a:	07d9      	lsls	r1, r3, #31
 800908c:	d405      	bmi.n	800909a <_vfiprintf_r+0x32>
 800908e:	89ab      	ldrh	r3, [r5, #12]
 8009090:	059a      	lsls	r2, r3, #22
 8009092:	d402      	bmi.n	800909a <_vfiprintf_r+0x32>
 8009094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009096:	f7ff fe07 	bl	8008ca8 <__retarget_lock_acquire_recursive>
 800909a:	89ab      	ldrh	r3, [r5, #12]
 800909c:	071b      	lsls	r3, r3, #28
 800909e:	d501      	bpl.n	80090a4 <_vfiprintf_r+0x3c>
 80090a0:	692b      	ldr	r3, [r5, #16]
 80090a2:	b9eb      	cbnz	r3, 80090e0 <_vfiprintf_r+0x78>
 80090a4:	4629      	mov	r1, r5
 80090a6:	4630      	mov	r0, r6
 80090a8:	f000 fb5c 	bl	8009764 <__swsetup_r>
 80090ac:	b1c0      	cbz	r0, 80090e0 <_vfiprintf_r+0x78>
 80090ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090b0:	07dc      	lsls	r4, r3, #31
 80090b2:	d50e      	bpl.n	80090d2 <_vfiprintf_r+0x6a>
 80090b4:	f04f 30ff 	mov.w	r0, #4294967295
 80090b8:	b01d      	add	sp, #116	; 0x74
 80090ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090be:	4b7b      	ldr	r3, [pc, #492]	; (80092ac <_vfiprintf_r+0x244>)
 80090c0:	429d      	cmp	r5, r3
 80090c2:	d101      	bne.n	80090c8 <_vfiprintf_r+0x60>
 80090c4:	68b5      	ldr	r5, [r6, #8]
 80090c6:	e7df      	b.n	8009088 <_vfiprintf_r+0x20>
 80090c8:	4b79      	ldr	r3, [pc, #484]	; (80092b0 <_vfiprintf_r+0x248>)
 80090ca:	429d      	cmp	r5, r3
 80090cc:	bf08      	it	eq
 80090ce:	68f5      	ldreq	r5, [r6, #12]
 80090d0:	e7da      	b.n	8009088 <_vfiprintf_r+0x20>
 80090d2:	89ab      	ldrh	r3, [r5, #12]
 80090d4:	0598      	lsls	r0, r3, #22
 80090d6:	d4ed      	bmi.n	80090b4 <_vfiprintf_r+0x4c>
 80090d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090da:	f7ff fde6 	bl	8008caa <__retarget_lock_release_recursive>
 80090de:	e7e9      	b.n	80090b4 <_vfiprintf_r+0x4c>
 80090e0:	2300      	movs	r3, #0
 80090e2:	9309      	str	r3, [sp, #36]	; 0x24
 80090e4:	2320      	movs	r3, #32
 80090e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090ea:	2330      	movs	r3, #48	; 0x30
 80090ec:	f04f 0901 	mov.w	r9, #1
 80090f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80090f4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80092b4 <_vfiprintf_r+0x24c>
 80090f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090fc:	4623      	mov	r3, r4
 80090fe:	469a      	mov	sl, r3
 8009100:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009104:	b10a      	cbz	r2, 800910a <_vfiprintf_r+0xa2>
 8009106:	2a25      	cmp	r2, #37	; 0x25
 8009108:	d1f9      	bne.n	80090fe <_vfiprintf_r+0x96>
 800910a:	ebba 0b04 	subs.w	fp, sl, r4
 800910e:	d00b      	beq.n	8009128 <_vfiprintf_r+0xc0>
 8009110:	465b      	mov	r3, fp
 8009112:	4622      	mov	r2, r4
 8009114:	4629      	mov	r1, r5
 8009116:	4630      	mov	r0, r6
 8009118:	f7ff ff93 	bl	8009042 <__sfputs_r>
 800911c:	3001      	adds	r0, #1
 800911e:	f000 80aa 	beq.w	8009276 <_vfiprintf_r+0x20e>
 8009122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009124:	445a      	add	r2, fp
 8009126:	9209      	str	r2, [sp, #36]	; 0x24
 8009128:	f89a 3000 	ldrb.w	r3, [sl]
 800912c:	2b00      	cmp	r3, #0
 800912e:	f000 80a2 	beq.w	8009276 <_vfiprintf_r+0x20e>
 8009132:	2300      	movs	r3, #0
 8009134:	f04f 32ff 	mov.w	r2, #4294967295
 8009138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800913c:	f10a 0a01 	add.w	sl, sl, #1
 8009140:	9304      	str	r3, [sp, #16]
 8009142:	9307      	str	r3, [sp, #28]
 8009144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009148:	931a      	str	r3, [sp, #104]	; 0x68
 800914a:	4654      	mov	r4, sl
 800914c:	2205      	movs	r2, #5
 800914e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009152:	4858      	ldr	r0, [pc, #352]	; (80092b4 <_vfiprintf_r+0x24c>)
 8009154:	f000 fcbc 	bl	8009ad0 <memchr>
 8009158:	9a04      	ldr	r2, [sp, #16]
 800915a:	b9d8      	cbnz	r0, 8009194 <_vfiprintf_r+0x12c>
 800915c:	06d1      	lsls	r1, r2, #27
 800915e:	bf44      	itt	mi
 8009160:	2320      	movmi	r3, #32
 8009162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009166:	0713      	lsls	r3, r2, #28
 8009168:	bf44      	itt	mi
 800916a:	232b      	movmi	r3, #43	; 0x2b
 800916c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009170:	f89a 3000 	ldrb.w	r3, [sl]
 8009174:	2b2a      	cmp	r3, #42	; 0x2a
 8009176:	d015      	beq.n	80091a4 <_vfiprintf_r+0x13c>
 8009178:	4654      	mov	r4, sl
 800917a:	2000      	movs	r0, #0
 800917c:	f04f 0c0a 	mov.w	ip, #10
 8009180:	9a07      	ldr	r2, [sp, #28]
 8009182:	4621      	mov	r1, r4
 8009184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009188:	3b30      	subs	r3, #48	; 0x30
 800918a:	2b09      	cmp	r3, #9
 800918c:	d94e      	bls.n	800922c <_vfiprintf_r+0x1c4>
 800918e:	b1b0      	cbz	r0, 80091be <_vfiprintf_r+0x156>
 8009190:	9207      	str	r2, [sp, #28]
 8009192:	e014      	b.n	80091be <_vfiprintf_r+0x156>
 8009194:	eba0 0308 	sub.w	r3, r0, r8
 8009198:	fa09 f303 	lsl.w	r3, r9, r3
 800919c:	4313      	orrs	r3, r2
 800919e:	46a2      	mov	sl, r4
 80091a0:	9304      	str	r3, [sp, #16]
 80091a2:	e7d2      	b.n	800914a <_vfiprintf_r+0xe2>
 80091a4:	9b03      	ldr	r3, [sp, #12]
 80091a6:	1d19      	adds	r1, r3, #4
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	9103      	str	r1, [sp, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	bfbb      	ittet	lt
 80091b0:	425b      	neglt	r3, r3
 80091b2:	f042 0202 	orrlt.w	r2, r2, #2
 80091b6:	9307      	strge	r3, [sp, #28]
 80091b8:	9307      	strlt	r3, [sp, #28]
 80091ba:	bfb8      	it	lt
 80091bc:	9204      	strlt	r2, [sp, #16]
 80091be:	7823      	ldrb	r3, [r4, #0]
 80091c0:	2b2e      	cmp	r3, #46	; 0x2e
 80091c2:	d10c      	bne.n	80091de <_vfiprintf_r+0x176>
 80091c4:	7863      	ldrb	r3, [r4, #1]
 80091c6:	2b2a      	cmp	r3, #42	; 0x2a
 80091c8:	d135      	bne.n	8009236 <_vfiprintf_r+0x1ce>
 80091ca:	9b03      	ldr	r3, [sp, #12]
 80091cc:	3402      	adds	r4, #2
 80091ce:	1d1a      	adds	r2, r3, #4
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	9203      	str	r2, [sp, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	bfb8      	it	lt
 80091d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80091dc:	9305      	str	r3, [sp, #20]
 80091de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80092c4 <_vfiprintf_r+0x25c>
 80091e2:	2203      	movs	r2, #3
 80091e4:	4650      	mov	r0, sl
 80091e6:	7821      	ldrb	r1, [r4, #0]
 80091e8:	f000 fc72 	bl	8009ad0 <memchr>
 80091ec:	b140      	cbz	r0, 8009200 <_vfiprintf_r+0x198>
 80091ee:	2340      	movs	r3, #64	; 0x40
 80091f0:	eba0 000a 	sub.w	r0, r0, sl
 80091f4:	fa03 f000 	lsl.w	r0, r3, r0
 80091f8:	9b04      	ldr	r3, [sp, #16]
 80091fa:	3401      	adds	r4, #1
 80091fc:	4303      	orrs	r3, r0
 80091fe:	9304      	str	r3, [sp, #16]
 8009200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009204:	2206      	movs	r2, #6
 8009206:	482c      	ldr	r0, [pc, #176]	; (80092b8 <_vfiprintf_r+0x250>)
 8009208:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800920c:	f000 fc60 	bl	8009ad0 <memchr>
 8009210:	2800      	cmp	r0, #0
 8009212:	d03f      	beq.n	8009294 <_vfiprintf_r+0x22c>
 8009214:	4b29      	ldr	r3, [pc, #164]	; (80092bc <_vfiprintf_r+0x254>)
 8009216:	bb1b      	cbnz	r3, 8009260 <_vfiprintf_r+0x1f8>
 8009218:	9b03      	ldr	r3, [sp, #12]
 800921a:	3307      	adds	r3, #7
 800921c:	f023 0307 	bic.w	r3, r3, #7
 8009220:	3308      	adds	r3, #8
 8009222:	9303      	str	r3, [sp, #12]
 8009224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009226:	443b      	add	r3, r7
 8009228:	9309      	str	r3, [sp, #36]	; 0x24
 800922a:	e767      	b.n	80090fc <_vfiprintf_r+0x94>
 800922c:	460c      	mov	r4, r1
 800922e:	2001      	movs	r0, #1
 8009230:	fb0c 3202 	mla	r2, ip, r2, r3
 8009234:	e7a5      	b.n	8009182 <_vfiprintf_r+0x11a>
 8009236:	2300      	movs	r3, #0
 8009238:	f04f 0c0a 	mov.w	ip, #10
 800923c:	4619      	mov	r1, r3
 800923e:	3401      	adds	r4, #1
 8009240:	9305      	str	r3, [sp, #20]
 8009242:	4620      	mov	r0, r4
 8009244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009248:	3a30      	subs	r2, #48	; 0x30
 800924a:	2a09      	cmp	r2, #9
 800924c:	d903      	bls.n	8009256 <_vfiprintf_r+0x1ee>
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0c5      	beq.n	80091de <_vfiprintf_r+0x176>
 8009252:	9105      	str	r1, [sp, #20]
 8009254:	e7c3      	b.n	80091de <_vfiprintf_r+0x176>
 8009256:	4604      	mov	r4, r0
 8009258:	2301      	movs	r3, #1
 800925a:	fb0c 2101 	mla	r1, ip, r1, r2
 800925e:	e7f0      	b.n	8009242 <_vfiprintf_r+0x1da>
 8009260:	ab03      	add	r3, sp, #12
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	462a      	mov	r2, r5
 8009266:	4630      	mov	r0, r6
 8009268:	4b15      	ldr	r3, [pc, #84]	; (80092c0 <_vfiprintf_r+0x258>)
 800926a:	a904      	add	r1, sp, #16
 800926c:	f3af 8000 	nop.w
 8009270:	4607      	mov	r7, r0
 8009272:	1c78      	adds	r0, r7, #1
 8009274:	d1d6      	bne.n	8009224 <_vfiprintf_r+0x1bc>
 8009276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009278:	07d9      	lsls	r1, r3, #31
 800927a:	d405      	bmi.n	8009288 <_vfiprintf_r+0x220>
 800927c:	89ab      	ldrh	r3, [r5, #12]
 800927e:	059a      	lsls	r2, r3, #22
 8009280:	d402      	bmi.n	8009288 <_vfiprintf_r+0x220>
 8009282:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009284:	f7ff fd11 	bl	8008caa <__retarget_lock_release_recursive>
 8009288:	89ab      	ldrh	r3, [r5, #12]
 800928a:	065b      	lsls	r3, r3, #25
 800928c:	f53f af12 	bmi.w	80090b4 <_vfiprintf_r+0x4c>
 8009290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009292:	e711      	b.n	80090b8 <_vfiprintf_r+0x50>
 8009294:	ab03      	add	r3, sp, #12
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	462a      	mov	r2, r5
 800929a:	4630      	mov	r0, r6
 800929c:	4b08      	ldr	r3, [pc, #32]	; (80092c0 <_vfiprintf_r+0x258>)
 800929e:	a904      	add	r1, sp, #16
 80092a0:	f000 f882 	bl	80093a8 <_printf_i>
 80092a4:	e7e4      	b.n	8009270 <_vfiprintf_r+0x208>
 80092a6:	bf00      	nop
 80092a8:	08009f0c 	.word	0x08009f0c
 80092ac:	08009f2c 	.word	0x08009f2c
 80092b0:	08009eec 	.word	0x08009eec
 80092b4:	08009f4c 	.word	0x08009f4c
 80092b8:	08009f56 	.word	0x08009f56
 80092bc:	00000000 	.word	0x00000000
 80092c0:	08009043 	.word	0x08009043
 80092c4:	08009f52 	.word	0x08009f52

080092c8 <_printf_common>:
 80092c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092cc:	4616      	mov	r6, r2
 80092ce:	4699      	mov	r9, r3
 80092d0:	688a      	ldr	r2, [r1, #8]
 80092d2:	690b      	ldr	r3, [r1, #16]
 80092d4:	4607      	mov	r7, r0
 80092d6:	4293      	cmp	r3, r2
 80092d8:	bfb8      	it	lt
 80092da:	4613      	movlt	r3, r2
 80092dc:	6033      	str	r3, [r6, #0]
 80092de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092e2:	460c      	mov	r4, r1
 80092e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092e8:	b10a      	cbz	r2, 80092ee <_printf_common+0x26>
 80092ea:	3301      	adds	r3, #1
 80092ec:	6033      	str	r3, [r6, #0]
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	0699      	lsls	r1, r3, #26
 80092f2:	bf42      	ittt	mi
 80092f4:	6833      	ldrmi	r3, [r6, #0]
 80092f6:	3302      	addmi	r3, #2
 80092f8:	6033      	strmi	r3, [r6, #0]
 80092fa:	6825      	ldr	r5, [r4, #0]
 80092fc:	f015 0506 	ands.w	r5, r5, #6
 8009300:	d106      	bne.n	8009310 <_printf_common+0x48>
 8009302:	f104 0a19 	add.w	sl, r4, #25
 8009306:	68e3      	ldr	r3, [r4, #12]
 8009308:	6832      	ldr	r2, [r6, #0]
 800930a:	1a9b      	subs	r3, r3, r2
 800930c:	42ab      	cmp	r3, r5
 800930e:	dc28      	bgt.n	8009362 <_printf_common+0x9a>
 8009310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009314:	1e13      	subs	r3, r2, #0
 8009316:	6822      	ldr	r2, [r4, #0]
 8009318:	bf18      	it	ne
 800931a:	2301      	movne	r3, #1
 800931c:	0692      	lsls	r2, r2, #26
 800931e:	d42d      	bmi.n	800937c <_printf_common+0xb4>
 8009320:	4649      	mov	r1, r9
 8009322:	4638      	mov	r0, r7
 8009324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009328:	47c0      	blx	r8
 800932a:	3001      	adds	r0, #1
 800932c:	d020      	beq.n	8009370 <_printf_common+0xa8>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	68e5      	ldr	r5, [r4, #12]
 8009332:	f003 0306 	and.w	r3, r3, #6
 8009336:	2b04      	cmp	r3, #4
 8009338:	bf18      	it	ne
 800933a:	2500      	movne	r5, #0
 800933c:	6832      	ldr	r2, [r6, #0]
 800933e:	f04f 0600 	mov.w	r6, #0
 8009342:	68a3      	ldr	r3, [r4, #8]
 8009344:	bf08      	it	eq
 8009346:	1aad      	subeq	r5, r5, r2
 8009348:	6922      	ldr	r2, [r4, #16]
 800934a:	bf08      	it	eq
 800934c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009350:	4293      	cmp	r3, r2
 8009352:	bfc4      	itt	gt
 8009354:	1a9b      	subgt	r3, r3, r2
 8009356:	18ed      	addgt	r5, r5, r3
 8009358:	341a      	adds	r4, #26
 800935a:	42b5      	cmp	r5, r6
 800935c:	d11a      	bne.n	8009394 <_printf_common+0xcc>
 800935e:	2000      	movs	r0, #0
 8009360:	e008      	b.n	8009374 <_printf_common+0xac>
 8009362:	2301      	movs	r3, #1
 8009364:	4652      	mov	r2, sl
 8009366:	4649      	mov	r1, r9
 8009368:	4638      	mov	r0, r7
 800936a:	47c0      	blx	r8
 800936c:	3001      	adds	r0, #1
 800936e:	d103      	bne.n	8009378 <_printf_common+0xb0>
 8009370:	f04f 30ff 	mov.w	r0, #4294967295
 8009374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009378:	3501      	adds	r5, #1
 800937a:	e7c4      	b.n	8009306 <_printf_common+0x3e>
 800937c:	2030      	movs	r0, #48	; 0x30
 800937e:	18e1      	adds	r1, r4, r3
 8009380:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009384:	1c5a      	adds	r2, r3, #1
 8009386:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800938a:	4422      	add	r2, r4
 800938c:	3302      	adds	r3, #2
 800938e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009392:	e7c5      	b.n	8009320 <_printf_common+0x58>
 8009394:	2301      	movs	r3, #1
 8009396:	4622      	mov	r2, r4
 8009398:	4649      	mov	r1, r9
 800939a:	4638      	mov	r0, r7
 800939c:	47c0      	blx	r8
 800939e:	3001      	adds	r0, #1
 80093a0:	d0e6      	beq.n	8009370 <_printf_common+0xa8>
 80093a2:	3601      	adds	r6, #1
 80093a4:	e7d9      	b.n	800935a <_printf_common+0x92>
	...

080093a8 <_printf_i>:
 80093a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093ac:	460c      	mov	r4, r1
 80093ae:	7e27      	ldrb	r7, [r4, #24]
 80093b0:	4691      	mov	r9, r2
 80093b2:	2f78      	cmp	r7, #120	; 0x78
 80093b4:	4680      	mov	r8, r0
 80093b6:	469a      	mov	sl, r3
 80093b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80093ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093be:	d807      	bhi.n	80093d0 <_printf_i+0x28>
 80093c0:	2f62      	cmp	r7, #98	; 0x62
 80093c2:	d80a      	bhi.n	80093da <_printf_i+0x32>
 80093c4:	2f00      	cmp	r7, #0
 80093c6:	f000 80d9 	beq.w	800957c <_printf_i+0x1d4>
 80093ca:	2f58      	cmp	r7, #88	; 0x58
 80093cc:	f000 80a4 	beq.w	8009518 <_printf_i+0x170>
 80093d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80093d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093d8:	e03a      	b.n	8009450 <_printf_i+0xa8>
 80093da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093de:	2b15      	cmp	r3, #21
 80093e0:	d8f6      	bhi.n	80093d0 <_printf_i+0x28>
 80093e2:	a001      	add	r0, pc, #4	; (adr r0, 80093e8 <_printf_i+0x40>)
 80093e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80093e8:	08009441 	.word	0x08009441
 80093ec:	08009455 	.word	0x08009455
 80093f0:	080093d1 	.word	0x080093d1
 80093f4:	080093d1 	.word	0x080093d1
 80093f8:	080093d1 	.word	0x080093d1
 80093fc:	080093d1 	.word	0x080093d1
 8009400:	08009455 	.word	0x08009455
 8009404:	080093d1 	.word	0x080093d1
 8009408:	080093d1 	.word	0x080093d1
 800940c:	080093d1 	.word	0x080093d1
 8009410:	080093d1 	.word	0x080093d1
 8009414:	08009563 	.word	0x08009563
 8009418:	08009485 	.word	0x08009485
 800941c:	08009545 	.word	0x08009545
 8009420:	080093d1 	.word	0x080093d1
 8009424:	080093d1 	.word	0x080093d1
 8009428:	08009585 	.word	0x08009585
 800942c:	080093d1 	.word	0x080093d1
 8009430:	08009485 	.word	0x08009485
 8009434:	080093d1 	.word	0x080093d1
 8009438:	080093d1 	.word	0x080093d1
 800943c:	0800954d 	.word	0x0800954d
 8009440:	680b      	ldr	r3, [r1, #0]
 8009442:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009446:	1d1a      	adds	r2, r3, #4
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	600a      	str	r2, [r1, #0]
 800944c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009450:	2301      	movs	r3, #1
 8009452:	e0a4      	b.n	800959e <_printf_i+0x1f6>
 8009454:	6825      	ldr	r5, [r4, #0]
 8009456:	6808      	ldr	r0, [r1, #0]
 8009458:	062e      	lsls	r6, r5, #24
 800945a:	f100 0304 	add.w	r3, r0, #4
 800945e:	d50a      	bpl.n	8009476 <_printf_i+0xce>
 8009460:	6805      	ldr	r5, [r0, #0]
 8009462:	600b      	str	r3, [r1, #0]
 8009464:	2d00      	cmp	r5, #0
 8009466:	da03      	bge.n	8009470 <_printf_i+0xc8>
 8009468:	232d      	movs	r3, #45	; 0x2d
 800946a:	426d      	negs	r5, r5
 800946c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009470:	230a      	movs	r3, #10
 8009472:	485e      	ldr	r0, [pc, #376]	; (80095ec <_printf_i+0x244>)
 8009474:	e019      	b.n	80094aa <_printf_i+0x102>
 8009476:	f015 0f40 	tst.w	r5, #64	; 0x40
 800947a:	6805      	ldr	r5, [r0, #0]
 800947c:	600b      	str	r3, [r1, #0]
 800947e:	bf18      	it	ne
 8009480:	b22d      	sxthne	r5, r5
 8009482:	e7ef      	b.n	8009464 <_printf_i+0xbc>
 8009484:	680b      	ldr	r3, [r1, #0]
 8009486:	6825      	ldr	r5, [r4, #0]
 8009488:	1d18      	adds	r0, r3, #4
 800948a:	6008      	str	r0, [r1, #0]
 800948c:	0628      	lsls	r0, r5, #24
 800948e:	d501      	bpl.n	8009494 <_printf_i+0xec>
 8009490:	681d      	ldr	r5, [r3, #0]
 8009492:	e002      	b.n	800949a <_printf_i+0xf2>
 8009494:	0669      	lsls	r1, r5, #25
 8009496:	d5fb      	bpl.n	8009490 <_printf_i+0xe8>
 8009498:	881d      	ldrh	r5, [r3, #0]
 800949a:	2f6f      	cmp	r7, #111	; 0x6f
 800949c:	bf0c      	ite	eq
 800949e:	2308      	moveq	r3, #8
 80094a0:	230a      	movne	r3, #10
 80094a2:	4852      	ldr	r0, [pc, #328]	; (80095ec <_printf_i+0x244>)
 80094a4:	2100      	movs	r1, #0
 80094a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094aa:	6866      	ldr	r6, [r4, #4]
 80094ac:	2e00      	cmp	r6, #0
 80094ae:	bfa8      	it	ge
 80094b0:	6821      	ldrge	r1, [r4, #0]
 80094b2:	60a6      	str	r6, [r4, #8]
 80094b4:	bfa4      	itt	ge
 80094b6:	f021 0104 	bicge.w	r1, r1, #4
 80094ba:	6021      	strge	r1, [r4, #0]
 80094bc:	b90d      	cbnz	r5, 80094c2 <_printf_i+0x11a>
 80094be:	2e00      	cmp	r6, #0
 80094c0:	d04d      	beq.n	800955e <_printf_i+0x1b6>
 80094c2:	4616      	mov	r6, r2
 80094c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80094c8:	fb03 5711 	mls	r7, r3, r1, r5
 80094cc:	5dc7      	ldrb	r7, [r0, r7]
 80094ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094d2:	462f      	mov	r7, r5
 80094d4:	42bb      	cmp	r3, r7
 80094d6:	460d      	mov	r5, r1
 80094d8:	d9f4      	bls.n	80094c4 <_printf_i+0x11c>
 80094da:	2b08      	cmp	r3, #8
 80094dc:	d10b      	bne.n	80094f6 <_printf_i+0x14e>
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	07df      	lsls	r7, r3, #31
 80094e2:	d508      	bpl.n	80094f6 <_printf_i+0x14e>
 80094e4:	6923      	ldr	r3, [r4, #16]
 80094e6:	6861      	ldr	r1, [r4, #4]
 80094e8:	4299      	cmp	r1, r3
 80094ea:	bfde      	ittt	le
 80094ec:	2330      	movle	r3, #48	; 0x30
 80094ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80094f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80094f6:	1b92      	subs	r2, r2, r6
 80094f8:	6122      	str	r2, [r4, #16]
 80094fa:	464b      	mov	r3, r9
 80094fc:	4621      	mov	r1, r4
 80094fe:	4640      	mov	r0, r8
 8009500:	f8cd a000 	str.w	sl, [sp]
 8009504:	aa03      	add	r2, sp, #12
 8009506:	f7ff fedf 	bl	80092c8 <_printf_common>
 800950a:	3001      	adds	r0, #1
 800950c:	d14c      	bne.n	80095a8 <_printf_i+0x200>
 800950e:	f04f 30ff 	mov.w	r0, #4294967295
 8009512:	b004      	add	sp, #16
 8009514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009518:	4834      	ldr	r0, [pc, #208]	; (80095ec <_printf_i+0x244>)
 800951a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800951e:	680e      	ldr	r6, [r1, #0]
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	f856 5b04 	ldr.w	r5, [r6], #4
 8009526:	061f      	lsls	r7, r3, #24
 8009528:	600e      	str	r6, [r1, #0]
 800952a:	d514      	bpl.n	8009556 <_printf_i+0x1ae>
 800952c:	07d9      	lsls	r1, r3, #31
 800952e:	bf44      	itt	mi
 8009530:	f043 0320 	orrmi.w	r3, r3, #32
 8009534:	6023      	strmi	r3, [r4, #0]
 8009536:	b91d      	cbnz	r5, 8009540 <_printf_i+0x198>
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	f023 0320 	bic.w	r3, r3, #32
 800953e:	6023      	str	r3, [r4, #0]
 8009540:	2310      	movs	r3, #16
 8009542:	e7af      	b.n	80094a4 <_printf_i+0xfc>
 8009544:	6823      	ldr	r3, [r4, #0]
 8009546:	f043 0320 	orr.w	r3, r3, #32
 800954a:	6023      	str	r3, [r4, #0]
 800954c:	2378      	movs	r3, #120	; 0x78
 800954e:	4828      	ldr	r0, [pc, #160]	; (80095f0 <_printf_i+0x248>)
 8009550:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009554:	e7e3      	b.n	800951e <_printf_i+0x176>
 8009556:	065e      	lsls	r6, r3, #25
 8009558:	bf48      	it	mi
 800955a:	b2ad      	uxthmi	r5, r5
 800955c:	e7e6      	b.n	800952c <_printf_i+0x184>
 800955e:	4616      	mov	r6, r2
 8009560:	e7bb      	b.n	80094da <_printf_i+0x132>
 8009562:	680b      	ldr	r3, [r1, #0]
 8009564:	6826      	ldr	r6, [r4, #0]
 8009566:	1d1d      	adds	r5, r3, #4
 8009568:	6960      	ldr	r0, [r4, #20]
 800956a:	600d      	str	r5, [r1, #0]
 800956c:	0635      	lsls	r5, r6, #24
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	d501      	bpl.n	8009576 <_printf_i+0x1ce>
 8009572:	6018      	str	r0, [r3, #0]
 8009574:	e002      	b.n	800957c <_printf_i+0x1d4>
 8009576:	0671      	lsls	r1, r6, #25
 8009578:	d5fb      	bpl.n	8009572 <_printf_i+0x1ca>
 800957a:	8018      	strh	r0, [r3, #0]
 800957c:	2300      	movs	r3, #0
 800957e:	4616      	mov	r6, r2
 8009580:	6123      	str	r3, [r4, #16]
 8009582:	e7ba      	b.n	80094fa <_printf_i+0x152>
 8009584:	680b      	ldr	r3, [r1, #0]
 8009586:	1d1a      	adds	r2, r3, #4
 8009588:	600a      	str	r2, [r1, #0]
 800958a:	681e      	ldr	r6, [r3, #0]
 800958c:	2100      	movs	r1, #0
 800958e:	4630      	mov	r0, r6
 8009590:	6862      	ldr	r2, [r4, #4]
 8009592:	f000 fa9d 	bl	8009ad0 <memchr>
 8009596:	b108      	cbz	r0, 800959c <_printf_i+0x1f4>
 8009598:	1b80      	subs	r0, r0, r6
 800959a:	6060      	str	r0, [r4, #4]
 800959c:	6863      	ldr	r3, [r4, #4]
 800959e:	6123      	str	r3, [r4, #16]
 80095a0:	2300      	movs	r3, #0
 80095a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095a6:	e7a8      	b.n	80094fa <_printf_i+0x152>
 80095a8:	4632      	mov	r2, r6
 80095aa:	4649      	mov	r1, r9
 80095ac:	4640      	mov	r0, r8
 80095ae:	6923      	ldr	r3, [r4, #16]
 80095b0:	47d0      	blx	sl
 80095b2:	3001      	adds	r0, #1
 80095b4:	d0ab      	beq.n	800950e <_printf_i+0x166>
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	079b      	lsls	r3, r3, #30
 80095ba:	d413      	bmi.n	80095e4 <_printf_i+0x23c>
 80095bc:	68e0      	ldr	r0, [r4, #12]
 80095be:	9b03      	ldr	r3, [sp, #12]
 80095c0:	4298      	cmp	r0, r3
 80095c2:	bfb8      	it	lt
 80095c4:	4618      	movlt	r0, r3
 80095c6:	e7a4      	b.n	8009512 <_printf_i+0x16a>
 80095c8:	2301      	movs	r3, #1
 80095ca:	4632      	mov	r2, r6
 80095cc:	4649      	mov	r1, r9
 80095ce:	4640      	mov	r0, r8
 80095d0:	47d0      	blx	sl
 80095d2:	3001      	adds	r0, #1
 80095d4:	d09b      	beq.n	800950e <_printf_i+0x166>
 80095d6:	3501      	adds	r5, #1
 80095d8:	68e3      	ldr	r3, [r4, #12]
 80095da:	9903      	ldr	r1, [sp, #12]
 80095dc:	1a5b      	subs	r3, r3, r1
 80095de:	42ab      	cmp	r3, r5
 80095e0:	dcf2      	bgt.n	80095c8 <_printf_i+0x220>
 80095e2:	e7eb      	b.n	80095bc <_printf_i+0x214>
 80095e4:	2500      	movs	r5, #0
 80095e6:	f104 0619 	add.w	r6, r4, #25
 80095ea:	e7f5      	b.n	80095d8 <_printf_i+0x230>
 80095ec:	08009f5d 	.word	0x08009f5d
 80095f0:	08009f6e 	.word	0x08009f6e

080095f4 <_sbrk_r>:
 80095f4:	b538      	push	{r3, r4, r5, lr}
 80095f6:	2300      	movs	r3, #0
 80095f8:	4d05      	ldr	r5, [pc, #20]	; (8009610 <_sbrk_r+0x1c>)
 80095fa:	4604      	mov	r4, r0
 80095fc:	4608      	mov	r0, r1
 80095fe:	602b      	str	r3, [r5, #0]
 8009600:	f7f7 fbcc 	bl	8000d9c <_sbrk>
 8009604:	1c43      	adds	r3, r0, #1
 8009606:	d102      	bne.n	800960e <_sbrk_r+0x1a>
 8009608:	682b      	ldr	r3, [r5, #0]
 800960a:	b103      	cbz	r3, 800960e <_sbrk_r+0x1a>
 800960c:	6023      	str	r3, [r4, #0]
 800960e:	bd38      	pop	{r3, r4, r5, pc}
 8009610:	200014e8 	.word	0x200014e8

08009614 <__sread>:
 8009614:	b510      	push	{r4, lr}
 8009616:	460c      	mov	r4, r1
 8009618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800961c:	f000 fafe 	bl	8009c1c <_read_r>
 8009620:	2800      	cmp	r0, #0
 8009622:	bfab      	itete	ge
 8009624:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009626:	89a3      	ldrhlt	r3, [r4, #12]
 8009628:	181b      	addge	r3, r3, r0
 800962a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800962e:	bfac      	ite	ge
 8009630:	6563      	strge	r3, [r4, #84]	; 0x54
 8009632:	81a3      	strhlt	r3, [r4, #12]
 8009634:	bd10      	pop	{r4, pc}

08009636 <__swrite>:
 8009636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800963a:	461f      	mov	r7, r3
 800963c:	898b      	ldrh	r3, [r1, #12]
 800963e:	4605      	mov	r5, r0
 8009640:	05db      	lsls	r3, r3, #23
 8009642:	460c      	mov	r4, r1
 8009644:	4616      	mov	r6, r2
 8009646:	d505      	bpl.n	8009654 <__swrite+0x1e>
 8009648:	2302      	movs	r3, #2
 800964a:	2200      	movs	r2, #0
 800964c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009650:	f000 f9c8 	bl	80099e4 <_lseek_r>
 8009654:	89a3      	ldrh	r3, [r4, #12]
 8009656:	4632      	mov	r2, r6
 8009658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800965c:	81a3      	strh	r3, [r4, #12]
 800965e:	4628      	mov	r0, r5
 8009660:	463b      	mov	r3, r7
 8009662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800966a:	f000 b869 	b.w	8009740 <_write_r>

0800966e <__sseek>:
 800966e:	b510      	push	{r4, lr}
 8009670:	460c      	mov	r4, r1
 8009672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009676:	f000 f9b5 	bl	80099e4 <_lseek_r>
 800967a:	1c43      	adds	r3, r0, #1
 800967c:	89a3      	ldrh	r3, [r4, #12]
 800967e:	bf15      	itete	ne
 8009680:	6560      	strne	r0, [r4, #84]	; 0x54
 8009682:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009686:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800968a:	81a3      	strheq	r3, [r4, #12]
 800968c:	bf18      	it	ne
 800968e:	81a3      	strhne	r3, [r4, #12]
 8009690:	bd10      	pop	{r4, pc}

08009692 <__sclose>:
 8009692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009696:	f000 b8d3 	b.w	8009840 <_close_r>
	...

0800969c <__swbuf_r>:
 800969c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969e:	460e      	mov	r6, r1
 80096a0:	4614      	mov	r4, r2
 80096a2:	4605      	mov	r5, r0
 80096a4:	b118      	cbz	r0, 80096ae <__swbuf_r+0x12>
 80096a6:	6983      	ldr	r3, [r0, #24]
 80096a8:	b90b      	cbnz	r3, 80096ae <__swbuf_r+0x12>
 80096aa:	f7ff fa5f 	bl	8008b6c <__sinit>
 80096ae:	4b21      	ldr	r3, [pc, #132]	; (8009734 <__swbuf_r+0x98>)
 80096b0:	429c      	cmp	r4, r3
 80096b2:	d12b      	bne.n	800970c <__swbuf_r+0x70>
 80096b4:	686c      	ldr	r4, [r5, #4]
 80096b6:	69a3      	ldr	r3, [r4, #24]
 80096b8:	60a3      	str	r3, [r4, #8]
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	071a      	lsls	r2, r3, #28
 80096be:	d52f      	bpl.n	8009720 <__swbuf_r+0x84>
 80096c0:	6923      	ldr	r3, [r4, #16]
 80096c2:	b36b      	cbz	r3, 8009720 <__swbuf_r+0x84>
 80096c4:	6923      	ldr	r3, [r4, #16]
 80096c6:	6820      	ldr	r0, [r4, #0]
 80096c8:	b2f6      	uxtb	r6, r6
 80096ca:	1ac0      	subs	r0, r0, r3
 80096cc:	6963      	ldr	r3, [r4, #20]
 80096ce:	4637      	mov	r7, r6
 80096d0:	4283      	cmp	r3, r0
 80096d2:	dc04      	bgt.n	80096de <__swbuf_r+0x42>
 80096d4:	4621      	mov	r1, r4
 80096d6:	4628      	mov	r0, r5
 80096d8:	f000 f948 	bl	800996c <_fflush_r>
 80096dc:	bb30      	cbnz	r0, 800972c <__swbuf_r+0x90>
 80096de:	68a3      	ldr	r3, [r4, #8]
 80096e0:	3001      	adds	r0, #1
 80096e2:	3b01      	subs	r3, #1
 80096e4:	60a3      	str	r3, [r4, #8]
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	1c5a      	adds	r2, r3, #1
 80096ea:	6022      	str	r2, [r4, #0]
 80096ec:	701e      	strb	r6, [r3, #0]
 80096ee:	6963      	ldr	r3, [r4, #20]
 80096f0:	4283      	cmp	r3, r0
 80096f2:	d004      	beq.n	80096fe <__swbuf_r+0x62>
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	07db      	lsls	r3, r3, #31
 80096f8:	d506      	bpl.n	8009708 <__swbuf_r+0x6c>
 80096fa:	2e0a      	cmp	r6, #10
 80096fc:	d104      	bne.n	8009708 <__swbuf_r+0x6c>
 80096fe:	4621      	mov	r1, r4
 8009700:	4628      	mov	r0, r5
 8009702:	f000 f933 	bl	800996c <_fflush_r>
 8009706:	b988      	cbnz	r0, 800972c <__swbuf_r+0x90>
 8009708:	4638      	mov	r0, r7
 800970a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800970c:	4b0a      	ldr	r3, [pc, #40]	; (8009738 <__swbuf_r+0x9c>)
 800970e:	429c      	cmp	r4, r3
 8009710:	d101      	bne.n	8009716 <__swbuf_r+0x7a>
 8009712:	68ac      	ldr	r4, [r5, #8]
 8009714:	e7cf      	b.n	80096b6 <__swbuf_r+0x1a>
 8009716:	4b09      	ldr	r3, [pc, #36]	; (800973c <__swbuf_r+0xa0>)
 8009718:	429c      	cmp	r4, r3
 800971a:	bf08      	it	eq
 800971c:	68ec      	ldreq	r4, [r5, #12]
 800971e:	e7ca      	b.n	80096b6 <__swbuf_r+0x1a>
 8009720:	4621      	mov	r1, r4
 8009722:	4628      	mov	r0, r5
 8009724:	f000 f81e 	bl	8009764 <__swsetup_r>
 8009728:	2800      	cmp	r0, #0
 800972a:	d0cb      	beq.n	80096c4 <__swbuf_r+0x28>
 800972c:	f04f 37ff 	mov.w	r7, #4294967295
 8009730:	e7ea      	b.n	8009708 <__swbuf_r+0x6c>
 8009732:	bf00      	nop
 8009734:	08009f0c 	.word	0x08009f0c
 8009738:	08009f2c 	.word	0x08009f2c
 800973c:	08009eec 	.word	0x08009eec

08009740 <_write_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	4604      	mov	r4, r0
 8009744:	4608      	mov	r0, r1
 8009746:	4611      	mov	r1, r2
 8009748:	2200      	movs	r2, #0
 800974a:	4d05      	ldr	r5, [pc, #20]	; (8009760 <_write_r+0x20>)
 800974c:	602a      	str	r2, [r5, #0]
 800974e:	461a      	mov	r2, r3
 8009750:	f7f7 fad7 	bl	8000d02 <_write>
 8009754:	1c43      	adds	r3, r0, #1
 8009756:	d102      	bne.n	800975e <_write_r+0x1e>
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	b103      	cbz	r3, 800975e <_write_r+0x1e>
 800975c:	6023      	str	r3, [r4, #0]
 800975e:	bd38      	pop	{r3, r4, r5, pc}
 8009760:	200014e8 	.word	0x200014e8

08009764 <__swsetup_r>:
 8009764:	4b32      	ldr	r3, [pc, #200]	; (8009830 <__swsetup_r+0xcc>)
 8009766:	b570      	push	{r4, r5, r6, lr}
 8009768:	681d      	ldr	r5, [r3, #0]
 800976a:	4606      	mov	r6, r0
 800976c:	460c      	mov	r4, r1
 800976e:	b125      	cbz	r5, 800977a <__swsetup_r+0x16>
 8009770:	69ab      	ldr	r3, [r5, #24]
 8009772:	b913      	cbnz	r3, 800977a <__swsetup_r+0x16>
 8009774:	4628      	mov	r0, r5
 8009776:	f7ff f9f9 	bl	8008b6c <__sinit>
 800977a:	4b2e      	ldr	r3, [pc, #184]	; (8009834 <__swsetup_r+0xd0>)
 800977c:	429c      	cmp	r4, r3
 800977e:	d10f      	bne.n	80097a0 <__swsetup_r+0x3c>
 8009780:	686c      	ldr	r4, [r5, #4]
 8009782:	89a3      	ldrh	r3, [r4, #12]
 8009784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009788:	0719      	lsls	r1, r3, #28
 800978a:	d42c      	bmi.n	80097e6 <__swsetup_r+0x82>
 800978c:	06dd      	lsls	r5, r3, #27
 800978e:	d411      	bmi.n	80097b4 <__swsetup_r+0x50>
 8009790:	2309      	movs	r3, #9
 8009792:	6033      	str	r3, [r6, #0]
 8009794:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009798:	f04f 30ff 	mov.w	r0, #4294967295
 800979c:	81a3      	strh	r3, [r4, #12]
 800979e:	e03e      	b.n	800981e <__swsetup_r+0xba>
 80097a0:	4b25      	ldr	r3, [pc, #148]	; (8009838 <__swsetup_r+0xd4>)
 80097a2:	429c      	cmp	r4, r3
 80097a4:	d101      	bne.n	80097aa <__swsetup_r+0x46>
 80097a6:	68ac      	ldr	r4, [r5, #8]
 80097a8:	e7eb      	b.n	8009782 <__swsetup_r+0x1e>
 80097aa:	4b24      	ldr	r3, [pc, #144]	; (800983c <__swsetup_r+0xd8>)
 80097ac:	429c      	cmp	r4, r3
 80097ae:	bf08      	it	eq
 80097b0:	68ec      	ldreq	r4, [r5, #12]
 80097b2:	e7e6      	b.n	8009782 <__swsetup_r+0x1e>
 80097b4:	0758      	lsls	r0, r3, #29
 80097b6:	d512      	bpl.n	80097de <__swsetup_r+0x7a>
 80097b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097ba:	b141      	cbz	r1, 80097ce <__swsetup_r+0x6a>
 80097bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097c0:	4299      	cmp	r1, r3
 80097c2:	d002      	beq.n	80097ca <__swsetup_r+0x66>
 80097c4:	4630      	mov	r0, r6
 80097c6:	f000 f9b7 	bl	8009b38 <_free_r>
 80097ca:	2300      	movs	r3, #0
 80097cc:	6363      	str	r3, [r4, #52]	; 0x34
 80097ce:	89a3      	ldrh	r3, [r4, #12]
 80097d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097d4:	81a3      	strh	r3, [r4, #12]
 80097d6:	2300      	movs	r3, #0
 80097d8:	6063      	str	r3, [r4, #4]
 80097da:	6923      	ldr	r3, [r4, #16]
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	f043 0308 	orr.w	r3, r3, #8
 80097e4:	81a3      	strh	r3, [r4, #12]
 80097e6:	6923      	ldr	r3, [r4, #16]
 80097e8:	b94b      	cbnz	r3, 80097fe <__swsetup_r+0x9a>
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097f4:	d003      	beq.n	80097fe <__swsetup_r+0x9a>
 80097f6:	4621      	mov	r1, r4
 80097f8:	4630      	mov	r0, r6
 80097fa:	f000 f929 	bl	8009a50 <__smakebuf_r>
 80097fe:	89a0      	ldrh	r0, [r4, #12]
 8009800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009804:	f010 0301 	ands.w	r3, r0, #1
 8009808:	d00a      	beq.n	8009820 <__swsetup_r+0xbc>
 800980a:	2300      	movs	r3, #0
 800980c:	60a3      	str	r3, [r4, #8]
 800980e:	6963      	ldr	r3, [r4, #20]
 8009810:	425b      	negs	r3, r3
 8009812:	61a3      	str	r3, [r4, #24]
 8009814:	6923      	ldr	r3, [r4, #16]
 8009816:	b943      	cbnz	r3, 800982a <__swsetup_r+0xc6>
 8009818:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800981c:	d1ba      	bne.n	8009794 <__swsetup_r+0x30>
 800981e:	bd70      	pop	{r4, r5, r6, pc}
 8009820:	0781      	lsls	r1, r0, #30
 8009822:	bf58      	it	pl
 8009824:	6963      	ldrpl	r3, [r4, #20]
 8009826:	60a3      	str	r3, [r4, #8]
 8009828:	e7f4      	b.n	8009814 <__swsetup_r+0xb0>
 800982a:	2000      	movs	r0, #0
 800982c:	e7f7      	b.n	800981e <__swsetup_r+0xba>
 800982e:	bf00      	nop
 8009830:	2000002c 	.word	0x2000002c
 8009834:	08009f0c 	.word	0x08009f0c
 8009838:	08009f2c 	.word	0x08009f2c
 800983c:	08009eec 	.word	0x08009eec

08009840 <_close_r>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	2300      	movs	r3, #0
 8009844:	4d05      	ldr	r5, [pc, #20]	; (800985c <_close_r+0x1c>)
 8009846:	4604      	mov	r4, r0
 8009848:	4608      	mov	r0, r1
 800984a:	602b      	str	r3, [r5, #0]
 800984c:	f7f7 fa75 	bl	8000d3a <_close>
 8009850:	1c43      	adds	r3, r0, #1
 8009852:	d102      	bne.n	800985a <_close_r+0x1a>
 8009854:	682b      	ldr	r3, [r5, #0]
 8009856:	b103      	cbz	r3, 800985a <_close_r+0x1a>
 8009858:	6023      	str	r3, [r4, #0]
 800985a:	bd38      	pop	{r3, r4, r5, pc}
 800985c:	200014e8 	.word	0x200014e8

08009860 <__sflush_r>:
 8009860:	898a      	ldrh	r2, [r1, #12]
 8009862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009866:	4605      	mov	r5, r0
 8009868:	0710      	lsls	r0, r2, #28
 800986a:	460c      	mov	r4, r1
 800986c:	d458      	bmi.n	8009920 <__sflush_r+0xc0>
 800986e:	684b      	ldr	r3, [r1, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	dc05      	bgt.n	8009880 <__sflush_r+0x20>
 8009874:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009876:	2b00      	cmp	r3, #0
 8009878:	dc02      	bgt.n	8009880 <__sflush_r+0x20>
 800987a:	2000      	movs	r0, #0
 800987c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009880:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009882:	2e00      	cmp	r6, #0
 8009884:	d0f9      	beq.n	800987a <__sflush_r+0x1a>
 8009886:	2300      	movs	r3, #0
 8009888:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800988c:	682f      	ldr	r7, [r5, #0]
 800988e:	602b      	str	r3, [r5, #0]
 8009890:	d032      	beq.n	80098f8 <__sflush_r+0x98>
 8009892:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009894:	89a3      	ldrh	r3, [r4, #12]
 8009896:	075a      	lsls	r2, r3, #29
 8009898:	d505      	bpl.n	80098a6 <__sflush_r+0x46>
 800989a:	6863      	ldr	r3, [r4, #4]
 800989c:	1ac0      	subs	r0, r0, r3
 800989e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098a0:	b10b      	cbz	r3, 80098a6 <__sflush_r+0x46>
 80098a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098a4:	1ac0      	subs	r0, r0, r3
 80098a6:	2300      	movs	r3, #0
 80098a8:	4602      	mov	r2, r0
 80098aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098ac:	4628      	mov	r0, r5
 80098ae:	6a21      	ldr	r1, [r4, #32]
 80098b0:	47b0      	blx	r6
 80098b2:	1c43      	adds	r3, r0, #1
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	d106      	bne.n	80098c6 <__sflush_r+0x66>
 80098b8:	6829      	ldr	r1, [r5, #0]
 80098ba:	291d      	cmp	r1, #29
 80098bc:	d82c      	bhi.n	8009918 <__sflush_r+0xb8>
 80098be:	4a2a      	ldr	r2, [pc, #168]	; (8009968 <__sflush_r+0x108>)
 80098c0:	40ca      	lsrs	r2, r1
 80098c2:	07d6      	lsls	r6, r2, #31
 80098c4:	d528      	bpl.n	8009918 <__sflush_r+0xb8>
 80098c6:	2200      	movs	r2, #0
 80098c8:	6062      	str	r2, [r4, #4]
 80098ca:	6922      	ldr	r2, [r4, #16]
 80098cc:	04d9      	lsls	r1, r3, #19
 80098ce:	6022      	str	r2, [r4, #0]
 80098d0:	d504      	bpl.n	80098dc <__sflush_r+0x7c>
 80098d2:	1c42      	adds	r2, r0, #1
 80098d4:	d101      	bne.n	80098da <__sflush_r+0x7a>
 80098d6:	682b      	ldr	r3, [r5, #0]
 80098d8:	b903      	cbnz	r3, 80098dc <__sflush_r+0x7c>
 80098da:	6560      	str	r0, [r4, #84]	; 0x54
 80098dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098de:	602f      	str	r7, [r5, #0]
 80098e0:	2900      	cmp	r1, #0
 80098e2:	d0ca      	beq.n	800987a <__sflush_r+0x1a>
 80098e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098e8:	4299      	cmp	r1, r3
 80098ea:	d002      	beq.n	80098f2 <__sflush_r+0x92>
 80098ec:	4628      	mov	r0, r5
 80098ee:	f000 f923 	bl	8009b38 <_free_r>
 80098f2:	2000      	movs	r0, #0
 80098f4:	6360      	str	r0, [r4, #52]	; 0x34
 80098f6:	e7c1      	b.n	800987c <__sflush_r+0x1c>
 80098f8:	6a21      	ldr	r1, [r4, #32]
 80098fa:	2301      	movs	r3, #1
 80098fc:	4628      	mov	r0, r5
 80098fe:	47b0      	blx	r6
 8009900:	1c41      	adds	r1, r0, #1
 8009902:	d1c7      	bne.n	8009894 <__sflush_r+0x34>
 8009904:	682b      	ldr	r3, [r5, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d0c4      	beq.n	8009894 <__sflush_r+0x34>
 800990a:	2b1d      	cmp	r3, #29
 800990c:	d001      	beq.n	8009912 <__sflush_r+0xb2>
 800990e:	2b16      	cmp	r3, #22
 8009910:	d101      	bne.n	8009916 <__sflush_r+0xb6>
 8009912:	602f      	str	r7, [r5, #0]
 8009914:	e7b1      	b.n	800987a <__sflush_r+0x1a>
 8009916:	89a3      	ldrh	r3, [r4, #12]
 8009918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800991c:	81a3      	strh	r3, [r4, #12]
 800991e:	e7ad      	b.n	800987c <__sflush_r+0x1c>
 8009920:	690f      	ldr	r7, [r1, #16]
 8009922:	2f00      	cmp	r7, #0
 8009924:	d0a9      	beq.n	800987a <__sflush_r+0x1a>
 8009926:	0793      	lsls	r3, r2, #30
 8009928:	bf18      	it	ne
 800992a:	2300      	movne	r3, #0
 800992c:	680e      	ldr	r6, [r1, #0]
 800992e:	bf08      	it	eq
 8009930:	694b      	ldreq	r3, [r1, #20]
 8009932:	eba6 0807 	sub.w	r8, r6, r7
 8009936:	600f      	str	r7, [r1, #0]
 8009938:	608b      	str	r3, [r1, #8]
 800993a:	f1b8 0f00 	cmp.w	r8, #0
 800993e:	dd9c      	ble.n	800987a <__sflush_r+0x1a>
 8009940:	4643      	mov	r3, r8
 8009942:	463a      	mov	r2, r7
 8009944:	4628      	mov	r0, r5
 8009946:	6a21      	ldr	r1, [r4, #32]
 8009948:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800994a:	47b0      	blx	r6
 800994c:	2800      	cmp	r0, #0
 800994e:	dc06      	bgt.n	800995e <__sflush_r+0xfe>
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	f04f 30ff 	mov.w	r0, #4294967295
 8009956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800995a:	81a3      	strh	r3, [r4, #12]
 800995c:	e78e      	b.n	800987c <__sflush_r+0x1c>
 800995e:	4407      	add	r7, r0
 8009960:	eba8 0800 	sub.w	r8, r8, r0
 8009964:	e7e9      	b.n	800993a <__sflush_r+0xda>
 8009966:	bf00      	nop
 8009968:	20400001 	.word	0x20400001

0800996c <_fflush_r>:
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	690b      	ldr	r3, [r1, #16]
 8009970:	4605      	mov	r5, r0
 8009972:	460c      	mov	r4, r1
 8009974:	b913      	cbnz	r3, 800997c <_fflush_r+0x10>
 8009976:	2500      	movs	r5, #0
 8009978:	4628      	mov	r0, r5
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	b118      	cbz	r0, 8009986 <_fflush_r+0x1a>
 800997e:	6983      	ldr	r3, [r0, #24]
 8009980:	b90b      	cbnz	r3, 8009986 <_fflush_r+0x1a>
 8009982:	f7ff f8f3 	bl	8008b6c <__sinit>
 8009986:	4b14      	ldr	r3, [pc, #80]	; (80099d8 <_fflush_r+0x6c>)
 8009988:	429c      	cmp	r4, r3
 800998a:	d11b      	bne.n	80099c4 <_fflush_r+0x58>
 800998c:	686c      	ldr	r4, [r5, #4]
 800998e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d0ef      	beq.n	8009976 <_fflush_r+0xa>
 8009996:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009998:	07d0      	lsls	r0, r2, #31
 800999a:	d404      	bmi.n	80099a6 <_fflush_r+0x3a>
 800999c:	0599      	lsls	r1, r3, #22
 800999e:	d402      	bmi.n	80099a6 <_fflush_r+0x3a>
 80099a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099a2:	f7ff f981 	bl	8008ca8 <__retarget_lock_acquire_recursive>
 80099a6:	4628      	mov	r0, r5
 80099a8:	4621      	mov	r1, r4
 80099aa:	f7ff ff59 	bl	8009860 <__sflush_r>
 80099ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099b0:	4605      	mov	r5, r0
 80099b2:	07da      	lsls	r2, r3, #31
 80099b4:	d4e0      	bmi.n	8009978 <_fflush_r+0xc>
 80099b6:	89a3      	ldrh	r3, [r4, #12]
 80099b8:	059b      	lsls	r3, r3, #22
 80099ba:	d4dd      	bmi.n	8009978 <_fflush_r+0xc>
 80099bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099be:	f7ff f974 	bl	8008caa <__retarget_lock_release_recursive>
 80099c2:	e7d9      	b.n	8009978 <_fflush_r+0xc>
 80099c4:	4b05      	ldr	r3, [pc, #20]	; (80099dc <_fflush_r+0x70>)
 80099c6:	429c      	cmp	r4, r3
 80099c8:	d101      	bne.n	80099ce <_fflush_r+0x62>
 80099ca:	68ac      	ldr	r4, [r5, #8]
 80099cc:	e7df      	b.n	800998e <_fflush_r+0x22>
 80099ce:	4b04      	ldr	r3, [pc, #16]	; (80099e0 <_fflush_r+0x74>)
 80099d0:	429c      	cmp	r4, r3
 80099d2:	bf08      	it	eq
 80099d4:	68ec      	ldreq	r4, [r5, #12]
 80099d6:	e7da      	b.n	800998e <_fflush_r+0x22>
 80099d8:	08009f0c 	.word	0x08009f0c
 80099dc:	08009f2c 	.word	0x08009f2c
 80099e0:	08009eec 	.word	0x08009eec

080099e4 <_lseek_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4604      	mov	r4, r0
 80099e8:	4608      	mov	r0, r1
 80099ea:	4611      	mov	r1, r2
 80099ec:	2200      	movs	r2, #0
 80099ee:	4d05      	ldr	r5, [pc, #20]	; (8009a04 <_lseek_r+0x20>)
 80099f0:	602a      	str	r2, [r5, #0]
 80099f2:	461a      	mov	r2, r3
 80099f4:	f7f7 f9c5 	bl	8000d82 <_lseek>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d102      	bne.n	8009a02 <_lseek_r+0x1e>
 80099fc:	682b      	ldr	r3, [r5, #0]
 80099fe:	b103      	cbz	r3, 8009a02 <_lseek_r+0x1e>
 8009a00:	6023      	str	r3, [r4, #0]
 8009a02:	bd38      	pop	{r3, r4, r5, pc}
 8009a04:	200014e8 	.word	0x200014e8

08009a08 <__swhatbuf_r>:
 8009a08:	b570      	push	{r4, r5, r6, lr}
 8009a0a:	460e      	mov	r6, r1
 8009a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a10:	4614      	mov	r4, r2
 8009a12:	2900      	cmp	r1, #0
 8009a14:	461d      	mov	r5, r3
 8009a16:	b096      	sub	sp, #88	; 0x58
 8009a18:	da07      	bge.n	8009a2a <__swhatbuf_r+0x22>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	602b      	str	r3, [r5, #0]
 8009a1e:	89b3      	ldrh	r3, [r6, #12]
 8009a20:	061a      	lsls	r2, r3, #24
 8009a22:	d410      	bmi.n	8009a46 <__swhatbuf_r+0x3e>
 8009a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a28:	e00e      	b.n	8009a48 <__swhatbuf_r+0x40>
 8009a2a:	466a      	mov	r2, sp
 8009a2c:	f000 f908 	bl	8009c40 <_fstat_r>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	dbf2      	blt.n	8009a1a <__swhatbuf_r+0x12>
 8009a34:	9a01      	ldr	r2, [sp, #4]
 8009a36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a3e:	425a      	negs	r2, r3
 8009a40:	415a      	adcs	r2, r3
 8009a42:	602a      	str	r2, [r5, #0]
 8009a44:	e7ee      	b.n	8009a24 <__swhatbuf_r+0x1c>
 8009a46:	2340      	movs	r3, #64	; 0x40
 8009a48:	2000      	movs	r0, #0
 8009a4a:	6023      	str	r3, [r4, #0]
 8009a4c:	b016      	add	sp, #88	; 0x58
 8009a4e:	bd70      	pop	{r4, r5, r6, pc}

08009a50 <__smakebuf_r>:
 8009a50:	898b      	ldrh	r3, [r1, #12]
 8009a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a54:	079d      	lsls	r5, r3, #30
 8009a56:	4606      	mov	r6, r0
 8009a58:	460c      	mov	r4, r1
 8009a5a:	d507      	bpl.n	8009a6c <__smakebuf_r+0x1c>
 8009a5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	6123      	str	r3, [r4, #16]
 8009a64:	2301      	movs	r3, #1
 8009a66:	6163      	str	r3, [r4, #20]
 8009a68:	b002      	add	sp, #8
 8009a6a:	bd70      	pop	{r4, r5, r6, pc}
 8009a6c:	466a      	mov	r2, sp
 8009a6e:	ab01      	add	r3, sp, #4
 8009a70:	f7ff ffca 	bl	8009a08 <__swhatbuf_r>
 8009a74:	9900      	ldr	r1, [sp, #0]
 8009a76:	4605      	mov	r5, r0
 8009a78:	4630      	mov	r0, r6
 8009a7a:	f7ff f917 	bl	8008cac <_malloc_r>
 8009a7e:	b948      	cbnz	r0, 8009a94 <__smakebuf_r+0x44>
 8009a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a84:	059a      	lsls	r2, r3, #22
 8009a86:	d4ef      	bmi.n	8009a68 <__smakebuf_r+0x18>
 8009a88:	f023 0303 	bic.w	r3, r3, #3
 8009a8c:	f043 0302 	orr.w	r3, r3, #2
 8009a90:	81a3      	strh	r3, [r4, #12]
 8009a92:	e7e3      	b.n	8009a5c <__smakebuf_r+0xc>
 8009a94:	4b0d      	ldr	r3, [pc, #52]	; (8009acc <__smakebuf_r+0x7c>)
 8009a96:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	6020      	str	r0, [r4, #0]
 8009a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa0:	81a3      	strh	r3, [r4, #12]
 8009aa2:	9b00      	ldr	r3, [sp, #0]
 8009aa4:	6120      	str	r0, [r4, #16]
 8009aa6:	6163      	str	r3, [r4, #20]
 8009aa8:	9b01      	ldr	r3, [sp, #4]
 8009aaa:	b15b      	cbz	r3, 8009ac4 <__smakebuf_r+0x74>
 8009aac:	4630      	mov	r0, r6
 8009aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ab2:	f000 f8d7 	bl	8009c64 <_isatty_r>
 8009ab6:	b128      	cbz	r0, 8009ac4 <__smakebuf_r+0x74>
 8009ab8:	89a3      	ldrh	r3, [r4, #12]
 8009aba:	f023 0303 	bic.w	r3, r3, #3
 8009abe:	f043 0301 	orr.w	r3, r3, #1
 8009ac2:	81a3      	strh	r3, [r4, #12]
 8009ac4:	89a0      	ldrh	r0, [r4, #12]
 8009ac6:	4305      	orrs	r5, r0
 8009ac8:	81a5      	strh	r5, [r4, #12]
 8009aca:	e7cd      	b.n	8009a68 <__smakebuf_r+0x18>
 8009acc:	08008b05 	.word	0x08008b05

08009ad0 <memchr>:
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	b510      	push	{r4, lr}
 8009ad4:	b2c9      	uxtb	r1, r1
 8009ad6:	4402      	add	r2, r0
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	4618      	mov	r0, r3
 8009adc:	d101      	bne.n	8009ae2 <memchr+0x12>
 8009ade:	2000      	movs	r0, #0
 8009ae0:	e003      	b.n	8009aea <memchr+0x1a>
 8009ae2:	7804      	ldrb	r4, [r0, #0]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	428c      	cmp	r4, r1
 8009ae8:	d1f6      	bne.n	8009ad8 <memchr+0x8>
 8009aea:	bd10      	pop	{r4, pc}

08009aec <memmove>:
 8009aec:	4288      	cmp	r0, r1
 8009aee:	b510      	push	{r4, lr}
 8009af0:	eb01 0402 	add.w	r4, r1, r2
 8009af4:	d902      	bls.n	8009afc <memmove+0x10>
 8009af6:	4284      	cmp	r4, r0
 8009af8:	4623      	mov	r3, r4
 8009afa:	d807      	bhi.n	8009b0c <memmove+0x20>
 8009afc:	1e43      	subs	r3, r0, #1
 8009afe:	42a1      	cmp	r1, r4
 8009b00:	d008      	beq.n	8009b14 <memmove+0x28>
 8009b02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b0a:	e7f8      	b.n	8009afe <memmove+0x12>
 8009b0c:	4601      	mov	r1, r0
 8009b0e:	4402      	add	r2, r0
 8009b10:	428a      	cmp	r2, r1
 8009b12:	d100      	bne.n	8009b16 <memmove+0x2a>
 8009b14:	bd10      	pop	{r4, pc}
 8009b16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b1e:	e7f7      	b.n	8009b10 <memmove+0x24>

08009b20 <__malloc_lock>:
 8009b20:	4801      	ldr	r0, [pc, #4]	; (8009b28 <__malloc_lock+0x8>)
 8009b22:	f7ff b8c1 	b.w	8008ca8 <__retarget_lock_acquire_recursive>
 8009b26:	bf00      	nop
 8009b28:	200014e0 	.word	0x200014e0

08009b2c <__malloc_unlock>:
 8009b2c:	4801      	ldr	r0, [pc, #4]	; (8009b34 <__malloc_unlock+0x8>)
 8009b2e:	f7ff b8bc 	b.w	8008caa <__retarget_lock_release_recursive>
 8009b32:	bf00      	nop
 8009b34:	200014e0 	.word	0x200014e0

08009b38 <_free_r>:
 8009b38:	b538      	push	{r3, r4, r5, lr}
 8009b3a:	4605      	mov	r5, r0
 8009b3c:	2900      	cmp	r1, #0
 8009b3e:	d043      	beq.n	8009bc8 <_free_r+0x90>
 8009b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b44:	1f0c      	subs	r4, r1, #4
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	bfb8      	it	lt
 8009b4a:	18e4      	addlt	r4, r4, r3
 8009b4c:	f7ff ffe8 	bl	8009b20 <__malloc_lock>
 8009b50:	4a1e      	ldr	r2, [pc, #120]	; (8009bcc <_free_r+0x94>)
 8009b52:	6813      	ldr	r3, [r2, #0]
 8009b54:	4610      	mov	r0, r2
 8009b56:	b933      	cbnz	r3, 8009b66 <_free_r+0x2e>
 8009b58:	6063      	str	r3, [r4, #4]
 8009b5a:	6014      	str	r4, [r2, #0]
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b62:	f7ff bfe3 	b.w	8009b2c <__malloc_unlock>
 8009b66:	42a3      	cmp	r3, r4
 8009b68:	d90a      	bls.n	8009b80 <_free_r+0x48>
 8009b6a:	6821      	ldr	r1, [r4, #0]
 8009b6c:	1862      	adds	r2, r4, r1
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	bf01      	itttt	eq
 8009b72:	681a      	ldreq	r2, [r3, #0]
 8009b74:	685b      	ldreq	r3, [r3, #4]
 8009b76:	1852      	addeq	r2, r2, r1
 8009b78:	6022      	streq	r2, [r4, #0]
 8009b7a:	6063      	str	r3, [r4, #4]
 8009b7c:	6004      	str	r4, [r0, #0]
 8009b7e:	e7ed      	b.n	8009b5c <_free_r+0x24>
 8009b80:	461a      	mov	r2, r3
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	b10b      	cbz	r3, 8009b8a <_free_r+0x52>
 8009b86:	42a3      	cmp	r3, r4
 8009b88:	d9fa      	bls.n	8009b80 <_free_r+0x48>
 8009b8a:	6811      	ldr	r1, [r2, #0]
 8009b8c:	1850      	adds	r0, r2, r1
 8009b8e:	42a0      	cmp	r0, r4
 8009b90:	d10b      	bne.n	8009baa <_free_r+0x72>
 8009b92:	6820      	ldr	r0, [r4, #0]
 8009b94:	4401      	add	r1, r0
 8009b96:	1850      	adds	r0, r2, r1
 8009b98:	4283      	cmp	r3, r0
 8009b9a:	6011      	str	r1, [r2, #0]
 8009b9c:	d1de      	bne.n	8009b5c <_free_r+0x24>
 8009b9e:	6818      	ldr	r0, [r3, #0]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	4401      	add	r1, r0
 8009ba4:	6011      	str	r1, [r2, #0]
 8009ba6:	6053      	str	r3, [r2, #4]
 8009ba8:	e7d8      	b.n	8009b5c <_free_r+0x24>
 8009baa:	d902      	bls.n	8009bb2 <_free_r+0x7a>
 8009bac:	230c      	movs	r3, #12
 8009bae:	602b      	str	r3, [r5, #0]
 8009bb0:	e7d4      	b.n	8009b5c <_free_r+0x24>
 8009bb2:	6820      	ldr	r0, [r4, #0]
 8009bb4:	1821      	adds	r1, r4, r0
 8009bb6:	428b      	cmp	r3, r1
 8009bb8:	bf01      	itttt	eq
 8009bba:	6819      	ldreq	r1, [r3, #0]
 8009bbc:	685b      	ldreq	r3, [r3, #4]
 8009bbe:	1809      	addeq	r1, r1, r0
 8009bc0:	6021      	streq	r1, [r4, #0]
 8009bc2:	6063      	str	r3, [r4, #4]
 8009bc4:	6054      	str	r4, [r2, #4]
 8009bc6:	e7c9      	b.n	8009b5c <_free_r+0x24>
 8009bc8:	bd38      	pop	{r3, r4, r5, pc}
 8009bca:	bf00      	nop
 8009bcc:	20001258 	.word	0x20001258

08009bd0 <_realloc_r>:
 8009bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd2:	4607      	mov	r7, r0
 8009bd4:	4614      	mov	r4, r2
 8009bd6:	460e      	mov	r6, r1
 8009bd8:	b921      	cbnz	r1, 8009be4 <_realloc_r+0x14>
 8009bda:	4611      	mov	r1, r2
 8009bdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009be0:	f7ff b864 	b.w	8008cac <_malloc_r>
 8009be4:	b922      	cbnz	r2, 8009bf0 <_realloc_r+0x20>
 8009be6:	f7ff ffa7 	bl	8009b38 <_free_r>
 8009bea:	4625      	mov	r5, r4
 8009bec:	4628      	mov	r0, r5
 8009bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bf0:	f000 f848 	bl	8009c84 <_malloc_usable_size_r>
 8009bf4:	42a0      	cmp	r0, r4
 8009bf6:	d20f      	bcs.n	8009c18 <_realloc_r+0x48>
 8009bf8:	4621      	mov	r1, r4
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	f7ff f856 	bl	8008cac <_malloc_r>
 8009c00:	4605      	mov	r5, r0
 8009c02:	2800      	cmp	r0, #0
 8009c04:	d0f2      	beq.n	8009bec <_realloc_r+0x1c>
 8009c06:	4631      	mov	r1, r6
 8009c08:	4622      	mov	r2, r4
 8009c0a:	f7fe ff09 	bl	8008a20 <memcpy>
 8009c0e:	4631      	mov	r1, r6
 8009c10:	4638      	mov	r0, r7
 8009c12:	f7ff ff91 	bl	8009b38 <_free_r>
 8009c16:	e7e9      	b.n	8009bec <_realloc_r+0x1c>
 8009c18:	4635      	mov	r5, r6
 8009c1a:	e7e7      	b.n	8009bec <_realloc_r+0x1c>

08009c1c <_read_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	4604      	mov	r4, r0
 8009c20:	4608      	mov	r0, r1
 8009c22:	4611      	mov	r1, r2
 8009c24:	2200      	movs	r2, #0
 8009c26:	4d05      	ldr	r5, [pc, #20]	; (8009c3c <_read_r+0x20>)
 8009c28:	602a      	str	r2, [r5, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f7f7 f84c 	bl	8000cc8 <_read>
 8009c30:	1c43      	adds	r3, r0, #1
 8009c32:	d102      	bne.n	8009c3a <_read_r+0x1e>
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	b103      	cbz	r3, 8009c3a <_read_r+0x1e>
 8009c38:	6023      	str	r3, [r4, #0]
 8009c3a:	bd38      	pop	{r3, r4, r5, pc}
 8009c3c:	200014e8 	.word	0x200014e8

08009c40 <_fstat_r>:
 8009c40:	b538      	push	{r3, r4, r5, lr}
 8009c42:	2300      	movs	r3, #0
 8009c44:	4d06      	ldr	r5, [pc, #24]	; (8009c60 <_fstat_r+0x20>)
 8009c46:	4604      	mov	r4, r0
 8009c48:	4608      	mov	r0, r1
 8009c4a:	4611      	mov	r1, r2
 8009c4c:	602b      	str	r3, [r5, #0]
 8009c4e:	f7f7 f87f 	bl	8000d50 <_fstat>
 8009c52:	1c43      	adds	r3, r0, #1
 8009c54:	d102      	bne.n	8009c5c <_fstat_r+0x1c>
 8009c56:	682b      	ldr	r3, [r5, #0]
 8009c58:	b103      	cbz	r3, 8009c5c <_fstat_r+0x1c>
 8009c5a:	6023      	str	r3, [r4, #0]
 8009c5c:	bd38      	pop	{r3, r4, r5, pc}
 8009c5e:	bf00      	nop
 8009c60:	200014e8 	.word	0x200014e8

08009c64 <_isatty_r>:
 8009c64:	b538      	push	{r3, r4, r5, lr}
 8009c66:	2300      	movs	r3, #0
 8009c68:	4d05      	ldr	r5, [pc, #20]	; (8009c80 <_isatty_r+0x1c>)
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	4608      	mov	r0, r1
 8009c6e:	602b      	str	r3, [r5, #0]
 8009c70:	f7f7 f87d 	bl	8000d6e <_isatty>
 8009c74:	1c43      	adds	r3, r0, #1
 8009c76:	d102      	bne.n	8009c7e <_isatty_r+0x1a>
 8009c78:	682b      	ldr	r3, [r5, #0]
 8009c7a:	b103      	cbz	r3, 8009c7e <_isatty_r+0x1a>
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	bd38      	pop	{r3, r4, r5, pc}
 8009c80:	200014e8 	.word	0x200014e8

08009c84 <_malloc_usable_size_r>:
 8009c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c88:	1f18      	subs	r0, r3, #4
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	bfbc      	itt	lt
 8009c8e:	580b      	ldrlt	r3, [r1, r0]
 8009c90:	18c0      	addlt	r0, r0, r3
 8009c92:	4770      	bx	lr

08009c94 <_init>:
 8009c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c96:	bf00      	nop
 8009c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c9a:	bc08      	pop	{r3}
 8009c9c:	469e      	mov	lr, r3
 8009c9e:	4770      	bx	lr

08009ca0 <_fini>:
 8009ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca2:	bf00      	nop
 8009ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ca6:	bc08      	pop	{r3}
 8009ca8:	469e      	mov	lr, r3
 8009caa:	4770      	bx	lr
